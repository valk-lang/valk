
test "Operators" {
    // Bit shift compatibility
    0.0.to(int) << 1
    1 << 0.1.to(int)
    1.to(u8) << 1
    1 << 1.to(u8)
    1.to(u8) << 1.to(u16)
    1.to(u16) << 1.to(u8)
    1.to(i8) << 1.to(u16)
    1.to(u16) << 1.to(i8)
    1.to(i8) << 1.to(u8)
    1.to(u8) << 1.to(i8)
    1.to(int) << 1.to(uint)

    // Integer type promotion
    let t1 = 1.to(u8) + 1.to(i8)
    #if !is_type_of_class(typeof(t1), i16)
    assert(false)
    #end
    let t2 = 1.to(u16) + 1.to(i16)
    #if !is_type_of_class(typeof(t2), i32)
    assert(false)
    #end
    let t3 = 1.to(u32) + 1.to(i32)
    #if !is_type_of_class(typeof(t3), i64)
    assert(false)
    #end
}
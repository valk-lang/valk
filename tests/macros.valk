
test "Macro: array" {
    let arr = Array[String]{}
    assert(arr.length == 0)
    arr = Array[String]{ "a", "b", "c" }
    assert(arr.length == 3)
    arr = Array[String]{
        "a",
        "b"
    }
    assert(arr.length == 2)
    arr = Array[String]{
        "a"
        "b",
    }
    assert(arr.length == 2)
    // Infer generic types
    arr = Array{ "x" }
    assert(arr.length == 1)
    assert((arr.get(0) !? "y") == "x")
    assert((arr.get(1) !? "y") == "y")
}

test "Macro: map" {
    let m = Map[String]{}
    assert(m.length == 0)
    m = Map[String]{ "a" => "1",
        "b" => "2"
        "c" => "3",
    }
    assert(m.length == 3)
    assert((m.get("a") !? "9") == "1")
    assert((m.get("b") !? "9") == "2")
    assert((m.get("c") !? "9") == "3")
}

class MacroScopeTest {
    value: Array[String] (.{})
}

test "Macro: default value compile test" {
    // Check if this compile
    let x = MacroScopeTest{}
    assert(x.value.length == 0)
}
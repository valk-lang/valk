
class A {
    value: String
}
class B[T] {
    value: T
}

extend A {
    get v : String {
        return this.value + "xA"
    }
}

extend B[X] {
    get v : X {
        return this.value + "xB"
    }
}

extend String {

    + fn str_extend() String {
        return "> " + this + " from extend (" + this.bytes + ")"
    }
}

test "Extend" {
    let a = A{ value: "1" }
    let b = B[String] { value: "2" }
    assert(a.v == "1xA")
    assert(b.v == "2xB")
    assert("hello".str_extend() == "> hello from extend (5)")
}

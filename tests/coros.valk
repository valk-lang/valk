
use valk:coro

global coro_test_str: String ("")

fn coro_test() {
    coro_test_str += "_2"
    coro:yield()
    coro_test_str += "_4"
}

fn coro_val(suffix: String) String {
    return "a" + suffix
}

fn coro_throw(suffix: String) String !testerr {
    throw testerr, "throw_msg"
}

fn coro_cothrow(suffix: String) String {
    cothrow testerr, "cothrow_msg"
}

test "Coro: basics" {
    coro_test_str = "1"
    let coro = co coro_test()
    coro_test_str += "_3"
    await coro
    assert(coro_test_str == "1_2_3_4")
}

test "Coro: await" {
    let task = co coro_val("x")
    let res = await task
    assert(res == "ax")
}

test "Coro: throw" {
    let task = co coro_throw("x")
    let res = await task !? <{
        assert(error_is(E, testerr))
        assert(EMSG == "throw_msg")
        return "z"
    }
    assert(res == "z")
}

test "Coro: cothrow" {
    let task = co coro_cothrow("x")
    let res = await task !? <{
        assert(error_is(E, testerr))
        assert(EMSG == "cothrow_msg")
        return "z"
    }
    assert(res == "z")
}
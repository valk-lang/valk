
// test "Null checking: ??" {
//     let s : ?String = <{ return null }
//     let s2 = <{ return s } ?? <{ return "1" }
//     assert(s2 == "1")
//     s = "2"
//     s2 = <{ return s } ?? <{ return "1" }
//     assert(s2 == "2")
// }

test "Null: while-loop" {
    let x : ?String = "x"
    let z = ""
    while isset(x) {
        let i = 0
        while i++ < 2 {
            z += x
        }
        x = null
    }
    assert(z == "xx")
}

test "Null: each-loop" {
    let list = array[String]{ "a", "b", "c" }
    let x : ?String = "x"
    let z = ""
    each list as item, i {
        if isset(x) && i < 2 : z += x + item
        else : x = null
    }
    assert(z == "xaxb")
}

test "Null: dont merge not_null" {
    let x : ?String = "x"
    if true {
        x = null
        return
    }
    x + x
}

test "Null: isset && ..." {
    let x : ?String = null
    let y : ?String = null
    if isset(x) && isset(y) && x.bytes > 0 && y.bytes > 0 {
        println(x.bytes)
        println(y.bytes)
    }

    let z = isset(x) ? x.bytes : "a".bytes
    assert(z == 1)
}

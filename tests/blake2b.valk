
use valk:crypto

test "Blake2b" {

    // Without key
    let hash = crypto:Blake2b.hash_str("abc") !? "failed"
    assert(hash == "ba80a53f981c4d0d6a2797b69f12f6e94c212f14685ac4b74b12bb6fdbffa2d17d87c5392aab792dc252d5de4533cc9518d38aa8dbf1925ab92386edd4009923")
    // With key
    hash = crypto:Blake2b.hash_str("abc", "test") !? "failed"
    assert(hash == "271aafa177d01c1a96b5db53cacf75fc895f757f3a24cfbacb07d2d737bcf6997dbcf8b2e97bace9842f526208197791996f9d5c557124d2ce3353bf0e263339")

}

// fn test_blake2b_kat() {
//     let mut input = [0u8; 256];
//     for i in 0..input.len() {
//         input[i] = i as u8;
//     }

//     for i in 0..kat::BLAKE2B_KAT.len() {
//         let mut h = Blake2b::new(OUT_BYTES);
//         let mut out = [0u8; OUT_BYTES];
//         h.update(&input[..i]);
//         h.finalize(&mut out);
//         assert_eq!(out.as_ref(), kat::BLAKE2B_KAT[i].as_ref());
//     }
// }

// fn test_blake2b_keyed_kat() {
//     let mut input = [0u8; 256];
//     let mut key = [0u8; KEY_BYTES];

//     for i in 0..input.len() {
//         input[i] = i as u8;
//     }

//     for i in 0..key.len() {
//         key[i] = i as u8;
//     }

//     for i in 0..kat::BLAKE2B_KEYED_KAT.len() {
//         let mut h = Blake2b::new_with_key(OUT_BYTES, key.as_ref());
//         let mut out = [0u8; OUT_BYTES];
//         h.update(&input[..i]);
//         h.finalize(&mut out);
//         assert_eq!(out.as_ref(), kat::BLAKE2B_KEYED_KAT[i].as_ref());
//     }
// }
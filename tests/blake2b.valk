
use valk:crypto

test "Blake2" {

    let str = "abc"
    let hash = crypto:Blake2b.hash_str(str)
    // 1f7e26f63b6ad25a0896fd978fd050a1766391d2fd0471a77afb975e5034b7ad2d9ccf8dfb47abbbe656e1b82fbc634ba42ce186e8dc5e1ce09a885d41f43451
    println("----------")
    println(hash)
    println("----------")
}

// fn test_blake2b_kat() {
//     let mut input = [0u8; 256];
//     for i in 0..input.len() {
//         input[i] = i as u8;
//     }

//     for i in 0..kat::BLAKE2B_KAT.len() {
//         let mut h = Blake2b::new(OUT_BYTES);
//         let mut out = [0u8; OUT_BYTES];
//         h.update(&input[..i]);
//         h.finalize(&mut out);
//         assert_eq!(out.as_ref(), kat::BLAKE2B_KAT[i].as_ref());
//     }
// }

// fn test_blake2b_keyed_kat() {
//     let mut input = [0u8; 256];
//     let mut key = [0u8; KEY_BYTES];

//     for i in 0..input.len() {
//         input[i] = i as u8;
//     }

//     for i in 0..key.len() {
//         key[i] = i as u8;
//     }

//     for i in 0..kat::BLAKE2B_KEYED_KAT.len() {
//         let mut h = Blake2b::new_with_key(OUT_BYTES, key.as_ref());
//         let mut out = [0u8; OUT_BYTES];
//         h.update(&input[..i]);
//         h.finalize(&mut out);
//         assert_eq!(out.as_ref(), kat::BLAKE2B_KEYED_KAT[i].as_ref());
//     }
// }
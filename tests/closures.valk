
global closure_g1 : uint (0)

test "Closures" {
    let cl1 : fn(int)(String) = fn(x: int) String {
        return "test_1_" + x
    }
    let cl2 : fnRef(int)(String) = fn(x: int) String {
        return "test_2_" + x
    }
    let cl3 : fnRef(int)(String, String) = fn(x: int) (String, String) {
        return "test_3_" + x, "test_4_" + x
    }

    // Call once
    assert(cl1(123) == "test_1_123")

    // Call multiple times
    assert(cl2(124) == "test_2_124")
    assert(cl2(125) == "test_2_125")

    // Multiple return values
    let v1, v2 = cl3(126)
    assert(v1 == "test_3_126")
    assert(v2 == "test_4_126")

    // Void return type + direct call
    fn(v: uint)() { closure_g1 = v }(123)
    assert(closure_g1 == 123)
    fn(v: uint)() { closure_g1 = v }(124)
    assert(closure_g1 == 124)

    // Recursive + binding
    let bind1 = 1
    let bind2 = 8
    let sum = fn(v: int) int {
        return fn(v: int) int {
            return v + bind1 + bind2
        }(v + 2)
    }(4)

    assert(sum == 15)

    // Errors
    let ecl = fn(v: bool) int !err {
        if v : throw err
        return 1
    }

    assert((ecl(false) !? 2) == 1)
    assert((ecl(true) !? 2) == 2)
}

class ClosureTestValue {
    value: int
}

test "Closure: imut" {

    let m = imut ClosureTestValue { value: 3 }

    let icl = imut fn(v: imut ClosureTestValue) int {
        return v.value + m.value
    }

    let v = imut ClosureTestValue { value: 5 }
    assert(icl(v) == 8)
}

test "Closure: move arg" {
    assert(closure_move_arg(5) == 10)
    assert(closure_move_arg(7) == 12)
}

fn closure_move_arg(arg: int) int {
    arg += 3
    let cl = imut fn() int {
        return arg + 2
    }
    return cl()
}

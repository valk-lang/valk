
global closure_g1 : uint (0)

test "Closures" {
    let cl1 : fn(int)(String) = fn(x: int) String {
        return "test_1_" + x
    }
    let cl2 : fnRef(int)(String) = fn(x: int) String {
        return "test_2_" + x
    }
    let cl3 : fnRef(int)(String, String) = fn(x: int) (String, String) {
        return "test_3_" + x, "test_4_" + x
    }

    // Call once
    assert(cl1(123) == "test_1_123")

    // Call multiple times
    assert(cl2(124) == "test_2_124")
    assert(cl2(125) == "test_2_125")

    // Multiple return values
    let v1, v2 = cl3(126)
    assert(v1 == "test_3_126")
    assert(v2 == "test_4_126")

    // Void return type + direct call
    fn(v: uint)() { closure_g1 = v }(123)
    assert(closure_g1 == 123)
    fn(v: uint)() { closure_g1 = v }(124)
    assert(closure_g1 == 124)
}

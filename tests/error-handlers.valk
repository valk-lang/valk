
fn test_errh_success() uint !err {
    return 5
}
fn test_errh_error() uint !err {
    throw err
}
fn test_errh_error2() uint !err !err2 {
    throw err2
}
fn test_errh_error3() !err {
    throw err, "Hello"
}
fn test_errh_error4() !err !err2 {
    test_errh_error3() !>
    throw err2
}

test "Error handling" {
    let v1 = test_errh_success() !? 10
    assert(v1 == 5)
    let v2 = test_errh_error() !? 10
    assert(v2 == 10)
    // Ignore error
    test_errh_error3() _
    // 
    let v3 = test_errh_error() !? <{
        assert(error_is(E, err))
        return 5
    }
    assert(v3 == 5)
    let v4 = test_errh_error2() !? <{
        assert(!error_is(E, err))
        assert(error_is(E, err2))
        assert(E == E.err2)
        // assert(error_is(err, err, err2))
        return 5
    } 
    assert(v4 == 5)
    // Error passing
    let has_error = false
    test_errh_error4() ! {
        has_error = true
        assert(E == E.err)
        assert(EMSG == "Hello")
    }
    assert(has_error)
}


use valk:fs
use valk:io

test "fs: dir_of" {
    assert(fs:dir_of("/etc/nginx/nginx.conf") == "/etc/nginx")
    assert(fs:dir_of("/etc/nginx/") == "/etc")
    assert(fs:dir_of("/etc/nginx") == "/etc")
    assert(fs:dir_of("/etc") == "/")
    assert(fs:dir_of("/") == "/")
    assert(fs:dir_of("etc") == "etc")
    assert(fs:dir_of("") == "")
    // TODO: windows paths
}

test "fs: basename" {
    assert(fs:basename("/etc/nginx/nginx.conf") == "nginx.conf")
    assert(fs:basename("/etc/nginx/") == "nginx")
    assert(fs:basename("/") == "")
    assert(fs:basename("") == "")
    // TODO: windows paths
}

test "fs: create / delete directories & files" {

    let dir = fs:exe_dir() + "/valk-mkdir-test/"
    let copy_dir = fs:exe_dir() + "/valk-mkdir-test-2/"
    // Make sure files dont exist
    if fs:is_dir(dir) : fs:delete_recursive(dir)
    if fs:is_dir(copy_dir) : fs:delete_recursive(copy_dir)

    // Create dir
    fs:mkdir(dir, 509) _
    assert(fs:exists(dir))

    // Cwd / Chdir
    let cwd = fs:cwd()
    assert(!cwd.contains("valk-mkdir-test"))
    fs:chdir(dir)
    assert(fs:cwd().contains("valk-mkdir-test"))
    fs:chdir(cwd)
    assert(fs:cwd() == cwd)

    // Open & create file
    let file = dir + "test.txt"
    let fd = fs:open_extend(file, true, true, true) !? 10000
    assert(fd != 10000)
    assert(fs:exists(file))

    // Files in dir
    let files = fs:files_in(dir)
    assert(files.length == 1)
    let fn = files.get(0) !? ""
    let base = fs:basename(fn)
    assert(base == "test.txt")

    // Write to FD
    if fd != 10000 {
        io:write(fd, "hello") ! {
            assert(false)
            return
        }
        io:write(fd, "-world") ! {
            assert(false)
            return
        }
        io:close(fd)

        let content = fs:read(file) !? "-failed to read file-"
        assert(content == "hello-world")
    }

    // Move file
    let file2 = file + ".tmp"
    fs:move(file, file2) ! assert(false)
    assert(!fs:exists(file))
    assert(fs:exists(file2))
    file = file2

    // Copy files
    fs:copy(dir, copy_dir, false) _
    files = fs:files_in(copy_dir, true)
    assert(files.length == 1)
    // Add extra files to copy
    let subdir = fs:add(dir, "sub-dir")
    fs:mkdir(subdir) _
    let subfile = fs:add(subdir, "tmp.txt")
    fs:write(subfile, "hello") ! assert(false)
    // Copy again
    fs:copy(dir, copy_dir, true) ! assert(false)
    // Check file count
    files = fs:files_in(copy_dir, true)
    assert(files.length == 3)

    // Delete file
    if fs:exists(file) : fs:delete(file)
    assert(fs:exists(file) == false)

    // Delete recursive
    fs:delete_recursive(dir)
    assert(fs:exists(dir) == false)

    fs:delete_recursive(copy_dir)
    assert(fs:exists(copy_dir) == false)
}

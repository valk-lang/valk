
test "Floats" {
    let a = 0.5
    let b = 1.7
    let c = -5.2
    let d = -0.0
    let e = 10

    assert(a == "0.50")
    assert(b == "1.70")
    assert(c == "-5.20")
    assert(d == "0.00")
    assert(e == "10")

    let sum = a + b
    assert(sum == 2.2)
    sum += c
    assert(sum == -3)
    sum /= 3
    assert(sum == -1)
    sum += d
    assert(sum == -1)
    sum += e
    assert(sum == 9)
}

test "Floats: operator compatibility" {
    //
    let v_f0 : float = 0.0
    let v_f1 : float = 0.01
    let v_u8 : u8 = 0
    let v_i8 : i8 = 0
    let v_uint : uint = 0
    let v_int : int = 0
    //
    assert(v_f1 > v_i8)
    assert(v_f1 > v_u8)
    assert(v_f1 > v_uint)
    assert(v_f1 > v_int)
    // Reverse
    assert(v_i8 < v_f1)
    assert(v_u8 < v_f1)
    assert(v_uint < v_f1)
    assert(v_int < v_f1)
    //
    assert(v_i8 < 0.01)
    assert(v_u8 < 0.01)
    assert(v_uint < 0.01)
    assert(v_int < 0.01)
    //
    assert(0.01 > v_i8)
    assert(0.01 > v_u8)
    assert(0.01 > v_uint)
    assert(0.01 > v_int)
    //
    assert(0.0 == 0)
    assert(0 == 0.0)
    assert(0.0 == v_u8)
    assert(v_u8 == 0.0)
    assert(v_f0 == 0)
    assert(0 == v_f0)
    // String compare
    assert(0.0 == "0.00")
    assert(0 == "0")
    assert("0.00" == 0.0)
    assert("0" == 0)
    assert(v_f0 == "0.00")
    assert(v_int == "0")
    assert("0.00" == v_f0)
    assert("0" == v_int)
}

class OffsetOb {
    value: int
}

test "Offsets: Array" {
    let arr = Array[uint].new()
    arr.push(0)
    arr.push(2)
    arr.push(4)

    assert(arr[0] == 0)
    assert(arr[1] == 2)
    assert(arr[2] == 4)
    assert(arr[3] == 0)
    assert((arr[3] ? 10) == 10)
    assert((arr[3] ? <{
        return 11
    }) == 11)

    arr[0] = 5
    arr[3] = 6
    arr[5] = 10
    assert(arr[0] == 5)
    assert(arr[3] == 6)
    assert(arr[5] == 0)
}

test "Offsets: Map" {
    let m = Map[uint].new()
    m.set("a", 0)
    m.set("b", 2)
    m.set("c", 4)

    assert(m["a"] == 0)
    assert(m["b"] == 2)
    assert(m["c"] == 4)
    assert(m["d"] == 0)

    m["a"] = 5
    m["d"] = 6
    assert(m["a"] == 5)
    assert(m["d"] == 6)
    assert(m["e"] == 0)
}

test "Offsets: Object" {
    let arr = Array[OffsetOb].new()
    let ob1 = OffsetOb { value: 1 }
    let ob2 = OffsetOb { value: 2 }
    let ob3 = OffsetOb { value: 3 }
    arr.push(ob1)
    arr.push(ob2)
    arr.push(ob3)

    assert((arr[0] ? OffsetOb { value: 5 }).value == 1)
    assert((arr[1] ? OffsetOb { value: 5 }).value == 2)
    assert((arr[3] ? OffsetOb { value: 5 }).value == 5)
    assert((arr[3] ? null) == null)
    assert(arr[0] != null)
    assert(arr[1] != null)
    assert(arr[2] != null)
    assert(arr[3] == null)

    let v = 1
    while true {
        arr[0] ! break
        v = 2
        arr[3] ! break
        v = 3
        break
    }
    assert(v == 2)
}

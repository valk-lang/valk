
class ClassTest {
    value: int (5)

    get val : int {
        return this.value + 2
    }
    group sub {
        get val : int {
            return this.value + 20
        }
        static get stat : int {
            return 40
        }
    }
}

test "Class syntax" {
    let x = ClassTest{}
    assert(x.value == 5)
    assert(x.val == 7)
    assert(x.sub.val == 25)
    assert(ClassTest.sub.stat == 40)
}

extend Array[T] {
    + fn test_last() T { return this.get(this.length - 1) ! exit(1) }
}
extend X[T] {
    fn test_first() T { return this.get(0) ! exit(1) }
}

mode X[T] for Array[T] {
    get size : uint { return this.length + 100 }
}

test "Class mode" {
    let x : X[String] = X[String].new()
    let y : Array[String] = x
    assert(x.size == 100)
    assert(y.length == 0)
    x.push("hi")
    assert(x.size == 101)
    assert(y.length == 1)
    let f = x.test_first()
    let l1 = x.test_last()
    let l2 = y.test_last()
}
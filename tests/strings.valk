
test "String: concat" {
    assert("test" + " " + "concat" == "test concat")
}

test "String: auto convert integers to string" {
    let n1 : String = -10203
    assert(n1 == "-10203")
    let n2 : String = 10203
    assert(n2 == "10203")
    let n3 : String = (31).to_hex()
    assert(n3 == "1F")
}

// test "String: auto convert floats to string" {
//     let f1 : String = -0.129
//     assert(f1 == "-0.12")
//     let f2 : String = -1.40
//     assert(f2 == "-1.39")
//     let f3 : String = -0.0
//     assert(f3 == "0.00")
//     let f4 : String = 1.0
//     assert(f4 == "1.00")
//     let f5 : String = 1.129
//     assert(f5 == "1.12")
// }

test "String: starts/ends with" {
    assert("abc".starts_with("abc"))
    assert("abc".starts_with("ab"))
    assert("abc".starts_with(""))
    assert("abc".ends_with("abc"))
    assert("abc".ends_with("bc"))
    assert("abc".ends_with(""))
    assert("".ends_with(""))
    // Invalid
    assert(!"abc".starts_with("c"))
    assert(!"abc".starts_with("b"))
    assert(!"abc".ends_with("a"))
    assert(!"abc".ends_with("b"))
    assert(!"".ends_with("e"))
}

test "String: length" {
    assert("".bytes == 0)
    assert("".utf8.length == 0)
    assert("abc".bytes == 3)
    assert("abc".utf8.length == 3)
    assert("a🐔c".bytes == 6)
    assert("a🐔c".utf8.length == 3)
}

test "String: index of" {
    assert(("a🐔c".index_of("") !? 999) == 0)
    assert(("a🐔c".utf8.index_of("") !? 999) == 0)
    assert(("a🐔c".index_of("c") !? 0) == 5)
    assert(("a🐔c".utf8.index_of("c") !? 0) == 2)
    assert(("a🐔c".index_of_byte('c') !? 0) == 5)
}

test "String: split" {
    let str = "a=🐔=b"
    let s = str.split("=")
    assert(s.length == 3)
    assert((s.get(0) !? "_") == "a")
    assert((s.get(1) !? "_") == "🐔")
    assert((s.get(2) !? "_") == "b")
    // too long
    s = str.split("valkvalkvalk")
    assert(s.length == 1)
    assert((s.get(0) !? "_") == str)
    // not found
    s = str.split("~")
    assert(s.length == 1)
    assert((s.get(0) !? "_") == str)
    // empty
    s = str.split("")
    assert(s.length == str.length)
    assert((s.get(0) !? "_") == "a")
    // next to eachother
    s = "==a==".split("=")
    assert(s.length == 5)
    assert((s.get(0) !? "_") == "")
    assert((s.get(1) !? "_") == "")
    assert((s.get(2) !? "_") == "a")
    assert((s.get(3) !? "_") == "")
    assert((s.get(4) !? "_") == "")
}

test "String: sub strings" {
    //
    assert("ab🐔cd".get(0) == 'a')
    assert("ab🐔cd".get(1) == 'b')
    assert("ab🐔cd".utf8.get(0) == "a")
    assert("ab🐔cd".utf8.get(1) == "b")
    assert("ab🐔cd".utf8.get(2) == "🐔")
    //
    assert("".substr(0, 1) == "")
    assert("".substr(1, 1) == "")
    assert("ab🐔cd".utf8.substr(1, 1) == "b")
    assert("ab🐔cd".utf8.substr(3, 1) == "c")
    assert("ab🐔cd".utf8.substr(1, 3) == "b🐔c")
    assert("ab🐔cd".utf8.substr(1, 10) == "b🐔cd")
    //
    assert("".substr(0, 1) == "")
    assert("".substr(1, 1) == "")
    assert("ab🐔cd".substr(1, 1) == "b")
    assert("ab🐔cd".substr(6, 1) == "c")
    assert("ab🐔cd".substr(1, 6) == "b🐔c")
    assert("ab🐔cd".substr(1, 10) == "b🐔cd")
    assert("\"ab🐔\"".utf8.substr(1, 3) == "ab🐔")
}

test "String: comparing" {
    assert("a" != "b")
    assert("a" != "")
    assert("" != "0")
    assert("" < "a")
    assert("a" < "b")
    assert("b" >= "b")
    assert("b" > "a")
    assert("a" <= "a")
    assert("" == "")
}

test "String: #STR" {
    assert(#STR(TEST) == "1")
}


use valk:gc

global node_count: uint

@ignore_access

class Node {
    left : ?Node (null)
    right : ?Node (null)

    static fn tree(x: int) Node {
        node_count++
        if x == 0 {
            let res = Node {}
            return res
        }
        let res = Node {
            left: Node.tree(x - 1)
            right: Node.tree(x - 1)
        }
        return res
    }

    fn check() uint {
        let res : uint = 1
        let lt = this.left
        let rt = this.right
        if isset(lt) && isset(rt) {
            res += lt.check()
            res += rt.check()
        }
        return res
    }

    fn gc_free() {
        node_count--
    }
}

fn stretch(depth: int) uint {
    let check = Node.tree(depth).check()
    return check
}

test "GC: Leaks" {

    // stretch tree of depth 13         check: 16383
    // 4096     trees of depth 4        check: 126976
    // 1024     trees of depth 6        check: 130048
    // 256      trees of depth 8        check: 130816
    // 64       trees of depth 10       check: 131008
    // 16       trees of depth 12       check: 131056
    // long lived tree of depth 12      check: 8191

    let depth = 12

    assert(stretch(depth + 1) == 16383)

    gc:run()
    assert(node_count == 0)

    let longlived = Node.tree(depth)

    assert(node_count == 8191)
    gc:run()
    assert(node_count == 8191)

    let x = 4
    while x <= depth {
        let mul = (depth - x + 4)
        let iters = 1
        while mul-- > 0 {
            iters = iters * 2
        }
        let check : uint = 0

        let i = 0
        while i++ < iters {
            check += Node.tree(x).check()
        }
        if x == 4 : assert(check == 126976)
        if x == 6 : assert(check == 130048)
        if x == 8 : assert(check == 130816)
        if x == 10 : assert(check == 131008)
        if x == 12 : assert(check == 131056)
        x += 2
    }

    assert(longlived.check() == 8191)
    longlived = null.@cast(Node)

    gc:run()
    assert(node_count == 0)
}

global cycle_g : ?CycleNode (null)

class CycleNode {
    parent: ?CycleNode (null)
    sub: ?CycleNode (null)
}

fn cycle_check(all: Array[CycleNode], depth: uint, run: bool) ?CycleNode {
    if run && depth % 7 == 0 {
        gc:run()
    }
    if depth == 0 {
        return null
    }
    let parent : ?CycleNode = null
    if depth % 3 == 0 {
        parent = all.pop_first() !? null
    } else if depth % 5 == 0 {
        parent = all.pop_last() !? null
    } else if depth % 4 == 0 {
        parent = cycle_g
    }
    let n = CycleNode { parent: parent }
    all.push(n)
    if depth % 7 == 0 {
        cycle_g = n
    }
    let sub = cycle_check(all, depth - 1, run)
    n.sub = sub
    return n
}

test "GC: Cycle reference check" {
    let all = Array[CycleNode].new(2)
    gc:run()
    gc:run()
    let start = gc:mem_marked
    cycle_check(all, 125, false)
    all.clear()
    cycle_g = null
    gc:run()
    gc:run()
    assert(start == gc:mem_marked)

    // Gc runs in between
    cycle_check(all, 175, true)
    all.clear()
    cycle_g = null
    gc:run()
    gc:run()
    assert(start == gc:mem_marked)
}

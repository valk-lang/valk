
@ignore_access

use valk:gc

@shared shared_ob1 : ?SharedTest (null)
@shared shared_ob2 : ?SharedTest (null)
@shared shared_ob3 : ?SharedTest (null)
@shared shared_result : String ("")

class SharedTest {
    value: String

    static fn new(value: String) SELF {
        return SELF {
            value: value
        }
    }

    fn gc_free() {
        shared_result += this.value + "."
    }
}

fn create_shared_objects() {
    shared_ob1 = SharedTest.new("ob1")
    shared_ob2 = SharedTest.new("ob2")
    shared_ob3 = SharedTest.new("ob3")
}

// test "GC: Shared" {
//     gc:shared_gc.disable = true

//     gc:shared_gc.update_age()
//     create_shared_objects()

//     gc:local_gc.shared_state = gc:shared_state_mark
//     gc:local_gc.shared_update = true
//     gc:run()

//     shared_ob1 = null
//     shared_ob3 = null
//     gc:run()

//     assert(shared_result == "")

//     gc:shared_gc.update_age()
//     gc:local_gc.shared_state = gc:shared_state_mark
//     gc:local_gc.shared_update = true
//     gc:run()
//     gc:shared_gc.mark_shared_globals()


//     gc:local_gc.shared_state = gc:shared_state_clear
//     gc:local_gc.shared_update = true
//     gc:run()

//     assert(shared_result == "ob1.ob3.")

//     gc:shared_gc.disable = false
// }

@shared shared_test_node : ?Node (null)

fn shared_1() {
    shared_test_node = Node.tree(12)
}
fn shared_2() {
    let i = 0
    while i++ < 10 {
        shared_test_node = Node.tree(12)
    }
}

test "GC: Shared Leaks" {
    // Record before memory usage
    let before = gc:mem_shared
    // Create some shared memory
    shared_1()
    // Record new memory usage
    let before2 = gc:mem_shared
    assert(before2 > before)
    // Create much more shared memory
    shared_2()
    // Test shared memory amount
    gc:run_shared_gc()
    assert(gc:mem_shared == before2)
    // Remove shared memory test
    shared_test_node = null
    gc:run_shared_gc()
    assert(gc:mem_shared <= before + 100)
}

use valk:http
use valk:core

fn http_handler_data(req: http:Request) http:Response {
    let result = req.method + "|" + req.path
    result += "|" + req.params().get("p1") ? ""
    result += "|" + req.data().get("p2") ? ""
    return http:Response.html(result)
}

fn http_handler_file(req: http:Request) http:Response {
    return http:Response.file(__DIR__ + "/assets/valk-logo.png")
}

fn http_handler(req: http:Request) http:Response {

    let r = http:Router[fn(http:Request)(http:Response)].new()
    r.add("POST", "/test-data", http_handler_data) _
    r.add("GET", "/test-file", http_handler_file) _
    r.add("GET", "/stop", http_handler_file) _

    let route = r.find(req.method, req.path) ! {
        println("ROUTE NOT FOUND: '" + req.path + "'")
        return http:Response.empty(404)
    }
    return route.handler(req)
}

fn http_server() {
    let ip = "127.0.0.1"
    let port : u16 = 9000
    let s = http:Server.new(ip, port, http_handler) ! {
        return
    }
    s.start(1)
    return
}

test "Http: server/client" {

    // #if OS != win

    co http_server()

    let req = http:request("POST", "http://127.0.0.1:9000/test-data?p1=v1")
    let res = req.exec() ? <{
        println("ERR: " + core:error_msg)
        assert(false)
        return null
    }
    if isset(res) {
        assert(res.body == "POST|/test-data|v1|")
    }

    req = http:request("GET", "http://127.0.0.1:9000/test-file?p1=v1")
    res = req.exec() ? <{
        println("ERR: " + core:error_msg)
        assert(false)
        return null
    }
    if isset(res) {
        assert(res.body.bytes == 15425)
    }

    // #end
}


fn test_match_return(val: int) int {
    match val {
        1 => return 5
        2 => return 10
        default => {
            return 15
        }
    }
}

test "Match" {

    let a = 100
    let b = 0

    match a {
        default => {
            a = 1
            b = 15
        }
    }

    assert(a == 1)
    assert(b == 15)

    let c = match a : String {
        1 => "v1"
        default => "v2"
    }

    assert(c == "v1")

    let arr = Array[String].new()
    arr.get(0) ! match E {
        E.not_found => {
            a = 2
        }
    }

    assert(a == 2)

    //
    assert(test_match_return(1) == 5)
    assert(test_match_return(2) == 10)
    assert(test_match_return(3) == 15)

    // Auto cast
    let d = match a : String {
        default => 123
    }
    assert(d == "123")

    // Multi value
    let m1, m2, m3 = match a : (int, String, int) {
        default => (10, 20, 30)
    }
    assert(m1 == 10)
    assert(m2 == "20")
    assert(m3 == 30)
}
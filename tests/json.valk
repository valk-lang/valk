
use valk:json

test "Json" {
    let str = "{ \"msg\": \"hello\", \"sub\": { \"msg\": \"world\" } }"
    let data = json:decode(str) ! {
        assert(false)
        return
    }
    assert(data.get("msg").string() == "hello")
    assert(data.get("sub").get("msg").string() == "world")

    let sub = data.get("sub")
    sub.set("msg", json:new_string("modified"))
    let enc = sub.encode()

    assert(enc == "{\"msg\":\"modified\"}")
}

class JsonTest{
    v1: String ("Hello")
    v2: int (123)
    v3: int (-123)
    v4: uint (-123)
    v5: JsonSub (JsonSub{})
    v6: ?ptr (null)
    v7: Array[Map[String]] (array[Map[String]]{ map[String]{ "a" => "b" }, map[String]{ "c" => "d" } })
}
class JsonSub{
    v1: String ("World")
}

test "Json trait" {
    let ob = JsonTest{}
    let json = json:encode[JsonTest](ob, true)
    let compare = "{
    \"v1\": \"Hello\",
    \"v5\": {
        \"v1\": \"World\"
    },
    \"v7\": [{
        \"a\": \"b\"
    }, {
        \"c\": \"d\"
    }],
    \"v2\": 123,
    \"v3\": -123,
    \"v4\": -123,
    \"v6\": null
}"
    assert(json == compare)
    if json != compare {
        println(json)
        println(compare)
    }

    // let jval = json:value[JsonTest](ob)
    // let ob2 = json:to_type[JsonTest](jval)
    // println(json)
    // println(jval.encode(true))
    // println(ob2.v1)

    // let jval = json:decode(json) ! {
    //     panic("Failed to decode")
    // }

    // let ob2 = JsonTest.json_decode(jval)
    // println(ob2.v1)

}
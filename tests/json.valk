
use valk:json
use valk:fs

test "Json" {
    let str = "{ \"msg\": \"hello\", \"sub\": { \"msg\": \"world\" } }"
    let data = json:decode(str) ! {
        assert(false)
        return
    }
    assert(data.get("msg").string() == "hello")
    assert(data.get("sub").get("msg").string() == "world")

    let sub = data.get("sub")
    sub.set("msg", json:new_string("modified"))
    let enc = sub.encode()

    assert(enc == "{\"msg\":\"modified\"}")
}

class JsonTest{
    v1: String ("Hello")
    v2: int (123)
    v3: int (-123)
    v4: uint (-123)
    v5: JsonSub (JsonSub{})
    v6: ?ptr
    v7: Array[Map[String]] (.{ .{ "a" => "b" }, .{ "c" => "d" } })
}
class JsonSub{
    v1: String ("World")
}

test "Json convert" {
    let ob = JsonTest{}
    let json = json:encode(ob, true)
    let compare = "{
    \"v1\": \"Hello\",
    \"v5\": {
        \"v1\": \"World\"
    },
    \"v7\": [{
        \"a\": \"b\"
    }, {
        \"c\": \"d\"
    }],
    \"v2\": 123,
    \"v3\": -123,
    \"v4\": -123,
    \"v6\": null
}"
    assert(json == compare)
    if json != compare {
        println("'" + json + "'")
        println("'" + compare + "'")
        println("'" + json.escape() + "'")
        println("'" + compare.escape() + "'")
    }

    let jval = json:value(ob)
    let ob2 = json:to_type[JsonTest](jval)
    assert(ob2.v1 == "Hello")
    assert(ob2.v5.v1 == "World")
}

test "Json decode" {
    let json = fs:read(fs:add(__DIR__, "/assets/parse.json")) !? <{
        assert(false)
        return "/"
    }

    let value = json:decode(json) !? <{
        println(EMSG)
        assert(false)
        return json:new_null()
    }

    let enc = value.encode(true)
    // println(enc)
}
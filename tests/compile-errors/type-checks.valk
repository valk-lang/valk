
use valk:fs
use valk:core

fn main() {
    let co_types = fs:read(fs:add(__DIR__, "types-compatible.txt")) ! panic("Failed to read types-compatible")
    let inco_types = fs:read(fs:add(__DIR__, "types-incompatible.txt")) ! panic("Failed to read types-incompatible")
    let template = fs:read(fs:add(__DIR__, "/type-check-template.valk")) ! panic("Failed to read template")
    let tmp = fs:add(__DIR__, "tmp-type-check.valk")

    // Compatible
    co_types = co_types.trim(" ")
    co_types = co_types.trim("\n")
    let rows = co_types.split("\n")
    each rows as row {
        println("> Must be compatible: " + row)
        let split = row.split(" <=> ")
        if split.length != 2 : panic("Missing type: " + row)
        let t1 = split.get(0) ! panic("Missing type 1: " + row)
        let t2 = split.get(1) ! panic("Missing type 2: " + row)
        let code = template.replace("TYPE1", t1)
        code = code.replace("TYPE2", t2)
        fs:write(tmp, code) ! panic("Failed to write tmp file")

        let ecode, out = core:exec("./valk build \"%tmp\"")
        if ecode != 0 || !out.contains("Compiled in ") {
            println("Types: " + row)
            println("Exit code: " + ecode)
            println("Error: Compatible types were not compatible")
            exit(1)
        }
    }

    // Incompatible
    inco_types = inco_types.trim(" ")
    inco_types = inco_types.trim("\n")
    rows = inco_types.split("\n")
    each rows as row {
        println("> Must be incompatible: " + row)
        let split = row.split(" <=> ")
        if split.length != 2 : panic("Missing type: " + row)
        let t1 = split.get(0) ! panic("Missing type 1: " + row)
        let t2 = split.get(1) ! panic("Missing type 2: " + row)
        let code = template.replace("TYPE1", t1)
        code = code.replace("TYPE2", t2)
        fs:write(tmp, code) ! panic("Failed to write tmp file")

        let ecode, out = core:exec("./valk build \"%tmp\"")
        if ecode != 1 || !out.contains("Incompatible types") {
            println("Types: " + row)
            println("Exit code: " + ecode)
            println("Out: " + out)
            println("Error: Incompatible types were not incompatible")
            exit(1)
        }
    }
}
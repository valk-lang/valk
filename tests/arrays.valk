
use valk:gc
use valk:type

test "Array memory test" {
    let i : uint = 0
    // let arr = array[uint]{}
    // let arr = array[String]{}
    let arr = Array[String].new()
    while i++ < 1000 {
        arr.push(i)
    }
    i = 0
    while i < 500 {
        i++
        let str = arr.pop_first() !? "0"
        assert(str == i)
    }
    each arr => index, str {
        i++
        assert(str == i)
        assert(index == i - 501)
    }
}

test "Array[String] tests" {
    // let arr = array[String]{ "1", "2", "3" }
    let arr = Array[String].new(3)
    arr.push("1")
    arr.push("2")
    arr.push("3")
    //
    assert(arr.contains("0") == false)
    assert(arr.contains("1"))
    assert(arr.contains("2"))
    assert(arr.contains("3"))

    ir_comment("1")
    let x = arr.get(0) !? "0"
    ir_comment("2")
    assert(x == "1")
    ir_comment("3")
    assert((arr.get(0) !? "0") == "1")
    ir_comment("4")
    assert((arr.get(1) !? "0") == "2")
    assert((arr.get(2) !? "0") == "3")
    assert((arr.get(3) !? "0") == "0")
    assert(arr.length == 3)
    arr.remove_value("1")
    assert(arr.length == 2)
    arr.remove_value("0")
    assert(arr.length == 2)
}

test "Array[int] tests" {
    // let arr = array[int]{ 1, 2, 3 }
    let arr = Array[int].new(3)
    arr.push(1)
    arr.push(2)
    arr.push(3)
    //
    each arr => k, v {
        assert(k + 1 == v @as uint)
    }
    //
    assert(arr.contains(0) == false)
    assert(arr.contains(1))
    assert(arr.contains(2))
    assert(arr.contains(3))
    assert((arr.get(0) !? 0) == 1)
    assert((arr.get(1) !? 0) == 2)
    assert((arr.get(2) !? 0) == 3)
    assert((arr.get(3) !? 0) == 0)
    assert(arr.length == 3)
    arr.remove_value(1)
    assert(arr.length == 2)
    arr.remove_value(0)
    assert(arr.length == 2)
}


test "Array sorting" {
    let arr = Array[int].new(3)
    arr.push(3)
    arr.push(1)
    arr.push(2)

    arr.sort()

    assert((arr.get(0) !? 0) == 1)
    assert((arr.get(1) !? 0) == 2)
    assert((arr.get(2) !? 0) == 3)

    arr.clear()
    arr.push(3)
    arr.push(1)
    arr.push(2)
    arr.push(4)

    arr.sort_custom(fn(a: int, b: int) bool {
        return a > b
    })

    assert((arr.get(0) !? 0) == 1)
    assert((arr.get(1) !? 0) == 2)
    assert((arr.get(2) !? 0) == 3)
    assert(arr.length == 4)
}

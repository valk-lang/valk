
test "Array memory test" {
    let i : uint = 0
    let arr = Array[String]{}
    while i++ < 200 {
        arr.push(i)
    }
    i = 0
    while i < 100 {
        i++
        let str = arr.pop_first() !? "0"
        assert(str == i)
    }
    each arr as str, index {
        i++
        assert(str == i)
        assert(index == i - 101)
    }
}

test "Array[String] tests" {
    let arr = Array[String]{ "1", "2", "3" }
    //
    assert(arr.contains("0") == false)
    assert(arr.contains("1"))
    assert(arr.contains("2"))
    assert(arr.contains("3"))

    let x = arr.get(0) !? "0"
    assert(x == "1")
    assert((arr.get(0) !? "0") == "1")
    assert((arr.get(1) !? "0") == "2")
    assert((arr.get(2) !? "0") == "3")
    assert((arr.get(3) !? "0") == "0")
    assert(arr.length == 3)
    arr.remove_value("1")
    assert(arr.length == 2)
    arr.remove_value("0")
    assert(arr.length == 2)
}

test "Array[int] tests" {
    let arr = Array[int]{ 1, 2, 3 }
    //
    each arr as v, k {
        assert(k + 1 == v.to(uint))
    }
    //
    assert(arr.contains(0) == false)
    assert(arr.contains(1))
    assert(arr.contains(2))
    assert(arr.contains(3))
    assert((arr.get(0) !? 0) == 1)
    assert((arr.get(1) !? 0) == 2)
    assert((arr.get(2) !? 0) == 3)
    assert((arr.get(3) !? 0) == 0)
    assert(arr.length == 3)
    arr.remove_value(1)
    assert(arr.length == 2)
    arr.remove_value(0)
    assert(arr.length == 2)
}


test "Array sorting" {
    let arr = Array[int]{ 3, 1, 2 }

    arr.sort()

    assert((arr.get(0) !? 0) == 1)
    assert((arr.get(1) !? 0) == 2)
    assert((arr.get(2) !? 0) == 3)

    arr.clear()
    arr.push(3)
    arr.push(1)
    arr.push(2)
    arr.push(4)

    arr.sort(fn(a: int, b: int) bool {
        return a > b
    })

    assert((arr.get(0) !? 0) == 1)
    assert((arr.get(1) !? 0) == 2)
    assert((arr.get(2) !? 0) == 3)
    assert(arr.length == 4)
}

test "Array clearing" {
    let arr = Array[int]{ 6, 3, 1, 2, 8 }
    assert((arr.get(0) !? 0) == 6)
    assert((arr.get(arr.length - 1) !? 0) == 8)
    let v = arr.pop_first() !? 0
    assert(v == 6)
    assert((arr.get(0) !? 0) == 3)
    assert((arr.get(arr.length - 1) !? 0) == 8)
    v = arr.pop_last() !? 0
    assert(v == 8)
    assert((arr.get(0) !? 0) == 3)
    assert((arr.get(arr.length - 1) !? 0) == 2)
    arr.remove(1)
    assert(arr.length == 2)
    assert((arr.get(0) !? 0) == 3)
    assert((arr.get(arr.length - 1) !? 0) == 2)
}

test "Array range / equal / equal_ignore_order" {
    let arr = Array[int]{ 6, 3, 1, 2, 8 }
    let part = arr.part(1, 2)
    assert(part.length == 2)
    assert(part.equal(.{ 3, 1 }))
    assert(!part.equal(.{ 1, 3 }))
    assert(part.equal_ignore_order(.{ 1, 3 }))
    assert(part == arr.range(1, 3, false))
    assert(part == arr.range(1, 2))
}

test "Array filter" {
    let a1 : Array[?String] = .{ "", null, "a", null, "b" }
    assert(a1.filter().equal(.{ "a", "b" }))
}

test "Array merge" {
    let a = Array[String]{ "a" }
    let b = Array[String]{ "b" }
    let c = a.merge(b)
    assert(a.length == 1)
    assert(a == .{ "a" })
    assert(b.length == 1)
    assert(b == .{ "b" })
    assert(c.length == 2)
    assert(c == .{ "a", "b" })
    c = a + b
    assert(a.length == 1)
    assert(a == .{ "a" })
    assert(b.length == 1)
    assert(b == .{ "b" })
    assert(c.length == 2)
    assert(c == .{ "a", "b" })
}

test "Array unique" {
    let a = Array[?String]{ "a", "b", "a", "a", null, "b", null, null }
    let b = a.copy()
    a.unique()
    // A
    assert(a.length == 3)
    assert(a == .{ "a", "b", null })
    assert(a != .{ "a", null, "b" })
    assert(a.equal_ignore_order(.{ "a", null, "b" }))
    // B
    assert(b.length == 8)
    b.unique_copy()
    assert(b.length == 8)
    b = b.unique_copy()
    assert(b.length == 3)
    assert(b == .{ "a", "b", null })
    //
    assert(a == b)
    assert(b.join("-") == "a-b")
}

test "Array prepend" {
    let a = Array[?String]{ "a" }
    let b = Array[?String]{ "b" }
    a.prepend_many(b)
    assert(a.length == 2)
    assert(b.length == 1)
    assert(a == .{ "b", "a" })
    b.prepend("c")
    assert(b.length == 2)
    assert(a.length == 2)
    assert(a == .{ "b", "a" })
    assert(b == .{ "c", "b" })
}

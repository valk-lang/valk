

// class Closure {
//     size: uint
//     stack: ?ptr
//     size_gc: uint
//     stack_gc: ?ptr
//     func: ptr

//     fn init(size: uint, size_gc: uint, func: ptr) {
//         return SELF {
//             size: size
//             size_gc: size_gc
//             stack: size > 0 ? mem:alloc(size) : null
//             stack_gc: size_gc > 0 ? mem:alloc(size_gc) : null
//             func: func
//         }
//     }

//     fn _gc_mark(color: u16) {
//         let stack = this.stack_gc
//         if !isset(stack) : return
//         let size = this.size_gc
//         while size > 0 {
//             let item = @ptrv(stack, ptr)
//             if item != null {
//                 let vti = @ptrv(item, u16, -1)
//                 if vti > 0 {
//                     let mark = @ptrv(vtable, fn(ptr, u16)(), vti @as uint * VTABLE_COLS)
//                     mark(item, color)
//                 }
//             }

//             stack += sizeof(ptr)
//             size -= sizeof(ptr)
//         }
//     }
// }
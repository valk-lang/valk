
header "sys" as sys

use mem

fn libc_errno() i32 {
    #if OS == win
    let i : i32 = 0
    sys:_get_errno(@ref(i))
    return i
    #else
    return sys:errno
    #end
}

fn socket_errno() i32 {
    #if OS == win
    // Windows error
    return WSA_error()
    #else
    // Linux / macos error
    return libc_errno()
    #end
}

#if OS == win

global WSA_INITED : bool

fn WSA_init() void {
    if WSA_INITED == false {
        WSA_INITED = true

        let v : u16 = 0 
        let v_ptr = @ref(v)
        @ptrv(v_ptr, u8, 0) = 2
        @ptrv(v_ptr, u8, 1) = 2

        // let data = mem:alloc(sizeof(inline sys:WSADATA)) @as sys:WSADATA
        let data = mem:alloc(560)
        let err = sys:WSAStartup(v, data)
        if err != 0 {
			println("WSA startup error: " + sys:WSAGetLastError())
            panic("Windows WSAStartup failed")
        }
    }
}

fn WSA_error() i32 {
    return sys:WSAGetLastError()
}

#end

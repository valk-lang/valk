
header "openssl" as ossl

class SSL {
    ~ ssl: ossl:SSL
    - host: String
    - cert_path: String

    static fn new(fd: FD, host: String, cert_dir: ?String) SSL {
        let method = ossl:TLS_client_method()
        let ctx = ossl:SSL_CTX_new(method)

        if !isset(cert_dir) {
            #if OS == linux
            cert_dir = "/etc/ssl/certs/"
            #elif OS == macos
            cert_dir = "/usr/local/etc/openssl/"
            #elif OS == win
            cert_dir = "C:\\ProgramData\\ssl\\certs\\"
            #end
        }

        #if OS == win
        if !cert_dir.ends_with("\\") && !cert_dir.ends_with("//") : cert_dir += "\\"
        #else
        if !cert_dir.ends_with("//") : cert_dir += "/"
        #end

        let cert_path = cert_dir + "ca-certificates.crt"

        ossl:SSL_CTX_load_verify_locations(ctx, cert_path.data_ptr(), null)
        ossl:SSL_CTX_set_verify(ctx, ossl:SSL_VERIFY_PEER, null);

        // ossl:SSL_CTX_ctrl(ctx, ossl:SSL_CTRL_SET_MIN_PROTO_VERSION, ossl:TLS1_2_VERSION, null)
        // ossl:SSL_CTX_set_options(ctx, ossl:SSL_OP_NO_SSLv3);

        let ssl = ossl:SSL_new(ctx)
        ossl:SSL_set_fd(ssl, fd.@cast(i32))
        ossl:SSL_ctrl(ssl, ossl:SSL_CTRL_SET_TLSEXT_HOSTNAME, ossl:TLSEXT_NAMETYPE_host_name, host.data_ptr())

        return SSL {
            ssl: ssl
            host: host
            cert_path: cert_path
        }
    }

    fn gc_free() {
        ossl:SSL_free(this.ssl)
    }
}

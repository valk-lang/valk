
header "sys" as sys

use core
use coro
use mem
use io

class SocketTCP {
    ~ host: String
    ~ fd: FD
    ~ port: u16
    addrinfo: sys:libc_addrinfo_fix

    static fn new(host: String, port: u16) SocketTCP !os_socket_create !invalid_host {

        #if OS == win
        core:WSA_init()
        #end

        #if OS == win
        let sock_fd = sys:socket(sys:AF_INET, sys:SOCK_STREAM, 0)
        let fd : FD = io:valk_fd(sock_fd)
        #else
        let ufd = sys:socket(sys:AF_INET, sys:SOCK_STREAM, 0)
        let fd : FD = ufd @as FD
        #end

        if fd == -1 {
            throw os_socket_create
        }

        io:fd_set_non_block(fd, true)

        // Get host info
        let addrinfo = SELF.get_addrinfo(host, port) ! {
            throw invalid_host
        }

        // Set timeout
        #if OS == win
        let timeout : i32 = 1000 * 5 // 5 seconds
        sys:setsockopt(sock_fd, sys:SOL_SOCKET, sys:SO_RCVTIMEO, @ref(timeout), sizeof(i32))
        #else
        let timeout = @stack(<sys:libc_timeval>)
        timeout.tv_sec = 5
        timeout.tv_usec = 0
        sys:setsockopt(ufd, sys:SOL_SOCKET, sys:SO_RCVTIMEO, timeout, sizeof(<sys:libc_timeval>))
        #end

        // SO_NOSIGPIPE
        #if OS == macos
        let nosigv : i32 = 1
        sys:setsockopt(ufd, sys:SOL_SOCKET, sys:SO_NOSIGPIPE, @ref(nosigv), sizeof(i32))
        #end

        return SocketTCP{
            host: host
            port: port
            fd: fd
            addrinfo: addrinfo
        }
    }

    fn connect() Connection !connection_failed {

        let fd = this.fd
        let ofd = io:os_fd(this.fd)

        while true {
            // let err = sys:connect(ofd, this.addrinfo.ai_addr @as sys:libc_sockaddr, this.addrinfo.ai_addrlen @autocast)
            let err = sys:connect(ofd, this.addrinfo.ai_addr @as sys:libc_sockaddr, this.addrinfo.ai_addrlen)
            if err != 0 {
                let e = core:socket_errno()
                #if OS == win
                if e == sys:WSAEISCONN : break
                let a = e == sys:WSAEWOULDBLOCK || e == sys:WSAEINPROGRESS || e == sys:WSAEALREADY
                #else
                if e == sys:EISCONN : break
                let a = e == sys:EINPROGRESS
                #end
                if a {
                    coro:current_coro.await_fd(fd, true, true)
                    continue
                }
                throw connection_failed
            }
        }

        return Connection.new(this.fd)
    }

    fn bind() !get_addr_info !bind !listen {
        let yes : i32 = 1
        let yes_ptr = @ref(yes)
        
        let err : i32 = 0

        sys:setsockopt(io:os_fd(this.fd), sys:SOL_SOCKET, sys:SO_REUSEADDR, yes_ptr, sizeof(i32))
        err = sys:bind(io:os_fd(this.fd), this.addrinfo.ai_addr @as sys:libc_sockaddr, this.addrinfo.ai_addrlen)

        if err != 0 {
            throw bind
        }

        err = sys:listen(io:os_fd(this.fd), 2000000)
        if err != 0 {
            throw listen
        }
    }

    static fn get_addrinfo(host: String, port: u16) sys:libc_addrinfo_fix !failed {

        let addrinfo : ?sys:libc_addrinfo_fix = null
        let hints = @stack(<sys:libc_addrinfo_fix>)
        mem:clear(hints, sizeof(<sys:libc_addrinfo_fix>))

        hints.ai_family = sys:AF_INET
        hints.ai_socktype = sys:SOCK_STREAM
        hints.ai_flags = sys:AI_PASSIVE

        let chost = host.data_cstring()
        let cport = port.to_str().data_cstring()
        let err = sys:getaddrinfo(chost, cport, hints, @ref(addrinfo))
        if err != 0 {
            throw failed
        }
        if addrinfo == null {
            throw failed
        }

        return addrinfo @as sys:libc_addrinfo_fix
    }

    fn accept() Connection !error {

        while true {
            let ofd = sys:accept(io:os_fd(this.fd), null, null)
            let fd = io:valk_fd(ofd)

            // Error
            if fd == -1 {
                #if OS == win
                // Windows error
                let err = core:WSA_error()
                if err == sys:WSAEWOULDBLOCK {
                    coro:current_coro.await_fd(this.fd, true, false)
                    continue
                }
                #else
                // Linux / macos error
                let err = core:libc_errno()
                if err == sys:EAGAIN {
                    coro:current_coro.await_fd(this.fd, true, false)
                    continue
                }
                #end
                // On error
                throw error
            }

            return Connection.new(fd)
        }
        throw error
    }

    fn clone() SELF {
        return SELF {
            host: this.host
            fd: this.fd
            port: this.port
            addrinfo: SELF.get_addrinfo(this.host, this.port) ? this.addrinfo @as sys:libc_addrinfo_fix
        }
    }

    fn _gc_free() {
        sys:freeaddrinfo(this.addrinfo)
    }
}

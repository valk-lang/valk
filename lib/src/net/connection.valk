
header "sys" as sys
header "openssl" as ossl

use core
use coro
use io
use utils

class Connection {
    ~ fd: FD
    // ~ open: bool (false)
    ~ ssl: ?SSL (null)
    ~ ssl_enabled: bool (false)

    static fn new(fd: FD) Connection {
        io:fd_set_non_block(fd, true)
        return Connection {
            fd: fd
        }
    }

    fn close() {
        // if this.open == false { return }
        Socket.close(this.fd)
        // this.open = false
    }

    fn ssl_connect() !ssl_error {

        let fd = this.fd
        io:fd_set_non_block(fd, false)

        if this.ssl_enabled : return
        let ssl = SSL.new(fd)
        let err = ossl:SSL_connect(ssl.ssl)
        if err != 1 {
            throw ssl_error
        }
        this.ssl = ssl
        this.ssl_enabled = true

        io:fd_set_non_block(fd, true)
    }

    fn send_string(data: String) !connection {
        this.send_from_ptr(data.data_ptr(), data.bytes) ! throw connection
    }
    fn send_byte_buffer(data: utils:ByteBuffer) !connection {
        this.send_from_ptr(data.data, data.length) ! throw connection
    }

    fn send_from_ptr(data: ptr, bytes_to_send: uint) !connection {

        // if this.open == false { throw connection }
        let ssl = this.ssl

        while true {
            //////////////
            // SSL
            //////////////
            if isset(ssl) {
                let wbytes = ossl:SSL_write(ssl.ssl, data, bytes_to_send);
                if wbytes < 0 {
                    // SSL_ERROR_WANT_WRITE: 3
                    let err = ossl:SSL_get_error(ssl.ssl, wbytes);
                    if err == 3 {
                        // EAGAIN
                        coro:current_coro.await_fd(this.fd, false, true)
                        continue
                    }
                    throw connection;
                }

                let bytes_sent = wbytes @as uint;
                if bytes_sent == bytes_to_send : return
                if bytes_sent < bytes_to_send {
                    data += bytes_sent
                    bytes_to_send -= bytes_sent
                    coro:current_coro.await_fd(this.fd, false, true)
                    continue
                }

                throw connection
            }

            //////////////
            // NO SSL
            //////////////
            let ofd = io:os_fd(this.fd)
            #if OS == linux
            let wbytes = sys:send(ofd, data, bytes_to_send, sys:MSG_NOSIGNAL)
            #elif OS == win
            let wbytes = sys:send(ofd, data, bytes_to_send @as i32, 0)
            #else
            let wbytes = sys:send(ofd, data, bytes_to_send, 0)
            #end

            if wbytes < 0 {
                #if OS == win
                let err = core:WSA_error()
                if err == sys:WSAEWOULDBLOCK {
                    // EAGAIN
                    coro:current_coro.await_fd(this.fd, false, true)
                    continue
                }
                #else
                let err = core:libc_errno()
                if err == sys:EAGAIN {
                    // EAGAIN
                    coro:current_coro.await_fd(this.fd, false, true)
                    continue
                }
                #end
                throw connection
            }

            let bytes_sent = wbytes @as uint
            if bytes_sent == bytes_to_send : return
            if bytes_sent < bytes_to_send {
                data += bytes_sent
                bytes_to_send -= bytes_sent
                coro:current_coro.await_fd(this.fd, false, true)
                continue
            }

            throw connection
        }
    }

    fn recv(buffer: utils:ByteBuffer, bytes: uint) uint !connection !disconnected {

        // if this.open == false { return 0 }

        buffer.minimum_free_space(bytes)
        let count : uint = 0
        let ssl = this.ssl;

        while true {
            //////////////
            // SSL
            //////////////
            if isset(ssl) {
                let rcvd = ossl:SSL_read(ssl.ssl, buffer.data + buffer.length, bytes);
                if rcvd < 0 {
                    // SSL_ERROR_NONE: 0
                    // SSL_ERROR_WANT_READ: 2
                    // SSL_ERROR_ZERO_RETURN: 6
                    let err = ossl:SSL_get_error(ssl.ssl, rcvd);
                    if err == 2 {
                        coro:current_coro.await_fd(this.fd, true, false)
                        continue
                    }
                    throw connection;
                }
                if rcvd == 0 : throw disconnected
                count = rcvd @as uint
                break
            }

            //////////////
            // NO SSL
            //////////////
            #if OS == win
            let rcvd = sys:recv(this.fd @as uint, buffer.data + buffer.length, bytes @as i32, 0)
            #else
            let rcvd = sys:recv(this.fd @as i32, buffer.data + buffer.length, bytes, 0)
            #end
            if (rcvd < 0) {
                #if OS == win
                let err = core:WSA_error()
                if err == sys:WSAEWOULDBLOCK {
                    // EAGAIN
                    coro:current_coro.await_fd(this.fd, true, false)
                    continue
                }
                #else
                let err = core:libc_errno()
                if err == sys:EAGAIN {
                    // EAGAIN
                    coro:current_coro.await_fd(this.fd, true, false)
                    continue
                }
                #end
                print(":" + err)
                if err == sys:EBADF {
                    // print(".BADF-" + this.fd + ".")
                }
                if err == sys:ECONNRESET {
                }
                throw connection
            }
            if rcvd == 0 : throw disconnected
            count = rcvd @as uint
            break
        }
            
        buffer.length += count
        return count
    }

    fn _gc_free() {
        this.close()
    }
}

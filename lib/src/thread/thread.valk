
@ignore_access

header "sys" as sys

use gc
use coro
use mem

global current_thread: ?Thread (null)

+ fn start(func: imut fn()()) Thread {
    let t = Thread {
        handler: func.@cast(fn()())
    }
    t.init()
    return t
}

class Thread {
    - thread: ?ptr (null)
    - handler: fn()()
    ~ finished: bool (false)

    + static fn start(func: imut fn()()) SELF {
        let t = SELF {
            handler: func.@cast(fn()())
        }
        t.init()
        return t
    }
    + static fn start_unsafe(func: fn()()) SELF {
        let t = SELF {
            handler: func
        }
        t.init()
        return t
    }

    fn init() $undefined {

        gc:share(this)

        #if OS == win
        this.thread = sys:CreateThread(null, 0, this.entry, this, 0, null)
        #else
        let thr = sys:pthread_t{ data: 0 }
        let err = sys:pthread_create(thr, null, this.entry, this)
        // if err != 0 {
        // 	throw fail
        // }
        this.thread = thr
        #end
    }

    fn entry() $entrance {

        // Init
        gc:thread_init()

        @allocas

        let gc = gc:gc
        gc.mutex.lock()

        #loop globals G T
        #if !global_is_shared(G)
        G = @global_default_value(G)
        #if is_gc_type(T)
        gc.add_global(@ref(G))
        #end
        #end
        #end

        current_thread = this

        gc.disable = false
        gc.push_to_shared()

        // Run
        let run_until = (co this.handler()).@cast(coro:Coro)
        coro:Coro.loop(run_until)

        // Stop
        this.finished = true
        gc:shutdown()

        // Free stack last
        stack_main.free()
    }

    + fn wait() {
        let thr = this.thread
        if isset(thr) {
            gc:gc.mutex.unlock()
            #if OS == win
            sys:WaitForSingleObject(thr, -1)
            #else
            sys:pthread_join((thr.@cast(sys:pthread_t)).data, null)
            #end
            gc:gc.mutex.lock()
            if gc:mem_shared_running : gc:wait_for_shared_gc()
        }
    }

    fn gc_free() {
        let thr = this.thread
        if isset(thr) {
            #if OS == win
            sys:CloseHandle(thr)
            #else
            mem:free(thr)
            #end
        }
    }
}


header "sys" as sys

use valk:gc
use valk:mem
use valk:coro
use io

struct ThreadEntry {
    func: ptr
    data: ?ptr
    has_data: bool
}

struct Thread {

    static fn entry(e: ThreadEntry) void $entrance {
        // Init
        gc:thread_init()
        gc:GcLocal.init()

        @allocas

        let gc = gc:local_gc

        #loop globals G T
        #if !@global_is_shared(G)
        G = @global_default_value(G)
        #if @is_gc_type(T)
        gc.add_global(@ref(G))
        #end
        #end
        #end

        gc.push_to_shared()

        // Run
        if e.has_data {
            let func = e.func @as fn(ptr)()
            co func(e.data @as ptr)
        } else {
            let func = e.func @as fn()()
            co func()
        }

        coro:Coro.loop()
        gc:shutdown()
    }

    static fn start(start_func: ptr) {
        SELF.init(start_func, null, false)
    }
    static fn start_with_data(start_func: ptr, data: ?ptr) {
        if isset(data) {
            gc:share_item(data)
        }
        SELF.init(start_func, data, true)
    }

    static fn init(start_func: ptr, data: ?ptr, has_data: bool) {

        let e = ThreadEntry {
            func: start_func
            data: data
            has_data: has_data
        }

        #if OS == win
		let thr = sys:CreateThread(null, 0, Thread.entry, e, 0, null)
		#else
        let thr = sys:pthread_t{ data: 0 }
        let err = sys:pthread_create(thr, null, Thread.entry, e)
        #end
        // if err != 0 {
        // 	throw fail
        // }
        // let t = Thread{ os_thread: thr }
    }

    static fn start_without_gc(start_func: ptr) void {
        #if OS == win
		let thr = sys:CreateThread(null, 0, start_func, null, 0, null)
		#else
        let thr = sys:pthread_t{ data: 0 }
        let err = sys:pthread_create(thr, null, start_func, null)
        #end
    }
}


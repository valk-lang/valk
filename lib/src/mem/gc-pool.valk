
global vtable_count: uint
global vtables: ptr

global pools: ptr

fn pools_init() {
    pools = alloc(64 * sizeof(ptr))
}
fn vtables_init() {
    vtables = calloc((vtable_count + 1) * sizeof(ptr))
}

fn pool_alloc(size: uint, vtable_index: uint (0)) ptr {
    let pow: uint = 3
    let value: uint = 8
    while size > value {
        value *= 2
        pow++
    }
    let pool = @ptrv(pools, ?GcPool, pow)
    if !isset(pool) {
        let p = GcPool.init(value)
        @ptrv(pools, ?GcPool, pow) = p
        return p.get()
    }
    return pool.get()
}

struct GcPool {
    item_size: uint

    pub static fn init(size: uint) GcPool {
        let s = size + 8
        return GcPool {
            item_size: s
        }
    }

    fn get() ptr {
        return null @as ptr
    }
}

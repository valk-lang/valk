
header "sys" as sys

use io

+ fn alloc(size: uint) ptr {
        // print("alloc\n")
    return sys:malloc(size)
}

+ fn free(adr: ptr) {
    sys:free(adr)
}

+ fn calloc(size: uint) ptr {
    let adr = alloc(size)
    clear(adr, size)
    return adr
}

+ fn copy(from: ptr, to: ptr, length: uint) {
    if length == 0 : return
    @memcpy(from, to, length)
}

fn resized_clone_and_free(from: ptr, size: uint, new_size: uint) ptr {
    if new_size < size : size = new_size
    let new = alloc(new_size)
    @memcpy(from, new, size)
    free(from)
    return new
}

+ fn clear(adr: ptr, length: uint) {
    let i : uint = 0
    let chunks = length / sizeof(uint)
    while i < chunks {
        @ptrv(adr, uint, i) = 0
        i++
    }
    i = i * sizeof(uint)
    while i < length {
        @ptrv(adr, u8, i) = 0
        i++
    }
}

+ fn equal(a: ptr, b: ptr, length: uint) bool {
    let chunks = length / sizeof(ptr)
    let i : uint = chunks
    while i > 0 {
        i--
        let av = @ptrv(a, uint, i)
        let bv = @ptrv(b, uint, i)
        if av != bv : return false
    }
    i = length % sizeof(ptr)
    let offset = chunks * sizeof(ptr)
    let ao = a + offset
    let bo = b + offset
    while i > 0 {
        i--
        let av = @ptrv(ao, u8, i)
        let bv = @ptrv(bo, u8, i)
        if av != bv : return false
    }
    return true
}

+ fn ascii_bytes_to_lower(adr: ptr, len: uint) {
    while len-- > 0 {
        let ch = @ptrv(adr, u8, len)
        if ch > 64 && ch < 91 : @ptrv(adr, u8, len) = ch + 32
    }
}

+ fn bytes_to_uint(adr: ptr, len: uint) uint !not_a_number {
    let result : uint = 0
    let mult : uint = 1
    while len-- > 0 {
        let ch = @ptrv(adr, u8, len)
        if ch < 48 || ch > 57 : throw not_a_number
        result += ((ch @as uint) - 48) * mult
        mult *= 10
    }
    return result
}

+ fn find_char(adr: ptr, ch: u8, length: uint) ptr !not_found {
    let start = adr + 8 - (adr % 8)
    let end = adr + length
    let until = end - (end % 8)
    //
    if start > end : start = end
    let s = start
    while adr < s {
        if @ptrv(adr, u8, 0) == ch : return adr
        adr += 1
    }
    while adr < until {
        let p = @ptrv(adr, u64)
        if p @as u8 == ch : return adr
        if (p >> 8) @as u8 == ch : return adr + 1
        if (p >> 16) @as u8 == ch : return adr + 2
        if (p >> 24) @as u8 == ch : return adr + 3
        if (p >> 32) @as u8 == ch : return adr + 4
        if (p >> 40) @as u8 == ch : return adr + 5
        if (p >> 48) @as u8 == ch : return adr + 6
        if (p >> 56) @as u8 == ch : return adr + 7
        adr += 8
    }
    while adr < end {
        if @ptrv(adr, u8, 0) == ch : return adr
        adr += 1
    }
    throw not_found
}

// GNU libc version for find_char aka. memchar (same performance, just here in case we need it)
fn gnu_libc_memchar(adr: ptr, ch: u8, length: uint) ptr !not_found {

    while (adr % sizeof(ptr) != 0) {
      if @ptrv(adr, u8) == ch : return adr
      adr += 1
    }

    let rep_one : u64 = 0x0101010101010101
    let rep_ch1 : u64 = ch | (ch << 8) | (ch << 16) | (ch << 24)
    let rep_ch = rep_ch1 | rep_ch1 << 32

    while length >= sizeof(u64) {
        let cmp = @ptrv(adr, u64) ^ rep_ch
        let inv : u64 = 0xffffffff - cmp

        if (((cmp - rep_one) & inv) & (rep_one << 7)) != 0 {
            break
        }
        adr += sizeof(u64)
        length -= sizeof(u64)
    }

    while length-- > 0 {
        if @ptrv(adr, u8) == ch : return adr
        adr += 1
    }

    throw not_found
}

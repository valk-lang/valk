
header "sys" as sys

use mem
use core

- global EXE_PATH : ?String (null)
- global EXE_DIR : ?String (null)

value PATH_MAX (4096)

// struct Path {
// 	parts: Array[String]

// 	static fn new(path: String) Path {
// 		return Path{
// 			parts: path.split("/"),
// 		}
// 	}

// 	static fn exe_dir() Path {
// 		let path = Path.exe_path()
// 		path.pop()
// 		return path
// 	}
// 	static fn exe_path() Path {
// 		return Path.new(exe_dir())
// 	}

// 	fn copy() Path {
// 		let parts = this.parts
// 		let new = Array[String].new()
// 		each parts as part {
// 			new.push(part)
// 		}
// 		return Path{
// 			parts: new,
// 		}
// 	}

// 	fn pop() void {
// 		let v = this.parts.pop() !! return
// 	}

// 	//fn to_str() String {
// 	//	return this.parts.join("/")
// 	//}
// }

fn exe_dir() String {
    let dir = EXE_DIR
    if isset(dir) {
        return dir
    }
    let d = dir_of(exe_path())
    EXE_DIR = d
    return d
}

fn exe_path() String {
    let p = EXE_PATH
    if isset(p) {
        return p
    }
    // TODO: USE PATH_MAX
    let buf : [4096 x u8] = @stack(<[4096 x u8]>)

    #if OS == win
    let len = sys:GetModuleFileNameA(null, buf, PATH_MAX)
    let str = String.make_from_ptr(buf, len)
       
    #elif OS == macos
    let args = core:cli_args
    let first = args.get(0) ! {
        panic("Missing cli args")
    }
    return first
    //let len : u32 = 0
    //if sys:_NSGetExecutablePath(data, @ref(len)) < 0 {
    //    return "fail"
    //}
    //str.bytes = len

    #else
    let link = "/proc/self/exe".data_cstring()
    let len = sys:readlink(link, buf, PATH_MAX)
    let str = String.make_from_ptr(buf, len)
    #end

    EXE_PATH = str
    return str
}

fn ext(path: String, with_dot: bool (false)) String {
    let len = path.bytes
    let start = len
    let found = false
    while start > 0 {
        start--
        let ch = path.byte(start)
        if ch == '.' {
            if with_dot == false : start++
            found = true
            break
        }
        if ch == '/' || ch == '\\' : break
    }
    if found == false : return ""
    return path.byte_sub_str(start, len - start)
}

// e.g. /etc/nginx/nginx.conf -> /etc/nginx
// e.g. /etc/nginx/ -> /etc
// e.g. /etc -> /
// e.g. "" -> ""
// e.g. etc -> etc
fn dir_of(path: String) String {
    let bytes = path.bytes
    if bytes == 0 : return ""
    let end = bytes - 1
    while end-- > 0 {
        let ch = path.byte(end)
        if ch == '/' || ch == '\\' {
            if end == 0 : end++
            return path.byte_sub_str(0, end)
        }
    }
    return path
}

// e.g. /etc/nginx/nginx.conf -> nginx.conf
// e.g. /etc/nginx/ -> nginx
// e.g. / -> ""
// e.g. "" -> ""
fn basename(path: String) String {
    let len = path.bytes
    let start = len
    let rtrim : uint = 0
    while start > 0 {
        let ch = path.byte(start - 1)
        if ch == '/' || ch == '\\' {
            start--
            rtrim++
            continue
        }
        break
    }
    while start-- > 0 {
        let ch = path.byte(start)
        if(ch == '/' || ch == '\\'){
            start++
            break
        }
    }
    return path.byte_sub_str(start, len - start - rtrim)
}

fn home_dir() String !not_found {
    #if OS == win
    return core:getenv("USERPROFILE") ! throw not_found
    #end
    return core:getenv("HOME") ! throw not_found
}

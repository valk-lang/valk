
use mem

class ByteBufferStrRef {
    ~ buffer: ByteBuffer
    ~ offset: uint
    ~ length: uint

    static fn new(buffer: ByteBuffer, offset: uint, length: uint) ByteBufferStrRef {
        let b = ByteBufferStrRef {
            buffer: buffer
            offset: offset
            length: length
        }
        return b
    }

    fn clear() {
        this.length = 0
    }

    fn data_ptr() ptr {
        return @ptr_offset(this.buffer.data, this.offset)
    }

    fn _string() String {
        let len = this.length
        if len == 0 : return ""
        return this.buffer.sub_str(this.offset, len)
    }

    fn _eq(cmp: String) bool {
        let len = this.length
        if len != cmp.bytes : return false 
        if len == 0 : return true
        return mem:equal(@ptr_offset(this.buffer.data, this.offset), cmp.data_ptr(), len)
    }
}

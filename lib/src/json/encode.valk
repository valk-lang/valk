
use utils

+ fn encode(json: Value, pretty: bool (false)) String {
    let bb = utils:ByteBuffer.new(100)
    encode_value(json, bb, 0, pretty)
    return bb.to_string()
}

fn encode_value(val: Value, result: utils:ByteBuffer, depth: uint, pretty: bool) {
    if val.type == type_object {
        result.append_str("{")
        depth++
        let vals = val.object_values
        if isset(vals) {
            let count = 0
            each vals as sub, key {
                if count++ > 0 {
                    result.append_str(",")
                }
                if pretty : indent(result, depth)
                result.append_str("\"")
                result.append_str(key)
                result.append_str("\"")
                result.append_str(pretty ? ": " : ":")
                encode_value(sub, result, depth, pretty)
            }
        }
        depth--
        if pretty : indent(result, depth)
        result.append_str("}")
        return
    }
    if val.type == type_array {
        result.append_str("[")
        let vals = val.array_values
        if isset(vals) {
            each vals as sub, i {
                if i > 0 {
                    result.append_str(", ")
                }
                encode_value(sub, result, depth, pretty)
            }
        }
        result.append_str("]")
        return
    }
    if val.type == type_string {
        result.append_str("\"")
        result.append_str(val.string_value.escape())
        result.append_str("\"")
        return
    }
    if val.type == type_number {
        result.append_str(val.int_value)
        return
    }
    if val.type == type_null {
        result.append_str("null")
        return
    }
    if val.type == type_bool {
        result.append_str(val.bool_value ? "true" : "false")
        return
    }
}

fn indent(result: utils:ByteBuffer, depth: uint) {
    result.append_str("\n")
    while depth-- > 0 {
        result.append_str("    ")
    }
}

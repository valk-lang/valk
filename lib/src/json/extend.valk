
extend KeyMap[K, V] {

    #if is_type_of_class(V, String)
    + fn to_json_value() Value $to {
        // Convert to KeyMap[K, V] -> KeyMap[String, Value]
        let result = keymap[String, Value]{}
        each this as v, k {
            result.set(k, value[V](v))
        }
        return new_object(result)
    }
    #end
}

extend Array[T] {

    #if is_type_of_class(T, String)
    + fn to_json_value() Value $to {
        // Convert to Array[T] -> Array[Value]
        let result = array[Value]{}
        each this as v {
            result.append(value[T](v))
        }
        return new_array(result)
    }
    #end
}

extend String {

    + fn to_json_value() Value $to {
        return new_string(this)
    }
    + static fn json_decode(val: Value) String {
        return val.string()
    }
}

trait json_encode {
    + fn json_value() Value {
        let i = map[Value]{}
        #loop object this as prop
        i.set(prop.name, prop.value.json_value())
        #end
        return i
    }
    + fn json_encode(pretty: bool (false)) String {
        return this.json_value().encode(pretty)
    }
}

extend KeyMap[K, V] {

    #if is_type_of_class(V, String)
    + fn json_value() Value {
        // Convert to KeyMap[K, V] -> KeyMap[String, Value]
        let result = keymap[String, Value]{}
        each this as v, k {
            result.set(k, v.json_value())
        }
        return new_object(result)
    }

    + fn json_encode(pretty: bool (false)) String {
        return this.json_value().encode(pretty)
    }
    #end
}

extend Array[T] {

    #if is_type_of_class(T, String)
    + fn json_value() Value {
        // Convert to Array[T] -> Array[Value]
        let result = array[Value]{}
        each this as v {
            #if is_nullable_type(T)
            if !isset(v) {
                result.append(new_null())
                continue
            }
            #end
            result.append(v.json_value())
        }
        return new_array(result)
    }

    + fn json_encode(pretty: bool (false)) String {
        return this.json_value().encode(pretty)
    }
    #end
}

extend String {

    + fn json_value() Value {
        return new_string(this)
    }
    + fn json_encode(pretty: bool (false)) String {
        return this.json_value().encode(pretty)
    }
}

use type

+ fn null_value() Value {
    return Value {
        type: type_null
    }
}
+ fn bool_value(value: type:bool) Value {
    return Value {
        type: type_bool
        bool_value: value
    }
}
+ fn int_value(value: type:int) Value {
    return Value {
        type: type_number
        int_value: value
    }
}
+ fn uint_value(value: type:uint) Value {
    return Value {
        type: type_number
        int_value: value.to(type:int)
    }
}
+ fn float_value(value: type:float) Value {
    return Value {
        type: type_number
        float_value: value
    }
}
+ fn string_value(text: String) Value {
    return Value {
        type: type_string
        string_value: text
    }
}
+ fn array_value(values: ?Array[Value] (null)) Value {
    return Value {
        type: type_array
        array_values: values ?? type:Array[Value]{}
    }
}
+ fn object_value(values: ?Map[Value] (null)) Value {
    return Value {
        type: type_object
        object_values: values ?? Map[Value]{}
    }
}

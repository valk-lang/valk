
+ fn value[T](val: T) Value {

    #if is_nullable_type(T)
    if !isset(val) : return new_null()
    #end

    #if type_has_method(T, to_json_value)
    return val.to_json_value()
    #elif is_integer_type(T)
    return new_int(val.to(int))
    #elif is_float_type(T)
    return new_float(val)
    #elif is_bool_type(T)
    return new_bool(val)
    #elif !is_structural_type(T)
        #if is_pointer_type(T)
        return new_string(val.@cast(ptr))
        #else
        return val
        #end
    #end

    // Structural
    let i = map[Value]{}

    #loop object val as prop
    i.set(prop.name, value[prop](prop.value))
    #end // End loop
    return new_object(i)
}


use type

+ fn value[T](val: T) Value {

    #if is_nullable_type(T)
    if !isset(val) : return null_value()
    #end

    #if type_has_method(T, to_json_value)
    return val.to_json_value()
    #elif is_integer_type(T)
    return int_value(val.to(type:int))
    #elif is_float_type(T)
    return float_value(val)
    #elif is_bool_type(T)
    return bool_value(val)
    #elif !is_structural_type(T)
        #if is_pointer_type(T)
        return string_value(val.@cast(ptr))
        #else
        return val
        #end
    #end

    // Structural
    let i = Map[Value]{}

    #loop object val as prop
    i.set(prop.name, value[prop](prop.value))
    #end // End loop
    return object_value(i)
}

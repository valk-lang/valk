
+ fn to_type[T](data: Value, pretty: bool (false)) T {
    #if is_integer_type(T)
    return data.int().@cast(T)
    #elif is_float_type(T)
    return data.float().@cast(T)
    #elif is_bool_type(T)
    return data.bool().@cast(T)
    #elif is_raw_pointer_type(T)
    return data.int().@cast(T)
    #elif !is_structural_type(T)
    #print_type(T)
    #error "Cannot convert json to this value type"
    #end

    // Structural
    let values = data.map()
    let result = T {
        #loop properties T as prop
        prop: <{
            let val = values.get(prop.name) !? new_null()

            #if is_nullable_type(prop)
            if val.is_null() : return null
            #end
            
            #if is_integer_type(prop)
            return val.int().@cast(prop)
            #elif is_float_type(prop)
            return val.float().@cast(prop)
            #elif is_bool_type(prop)
            return val.bool().@cast(prop)
            #elif is_raw_pointer_type(prop)
            return data.int().@cast(T)

            #elif !type_has_method(prop, json_value)
            #error "Cannot convert json to this value type"
            #end

            return prop.type.json_decode(val)
        }
        #end // End loop
    }
    return result
}

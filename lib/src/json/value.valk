
class Value {
    type: int
    object_values: ?Map[Value] (null)
    array_values: ?Array[Value] (null)
    int_value: int (0)
    float_value: float (0.0)
    string_value: String ("")
    bool_value: bool (false)

    + fn get(key: String) Value {
        this.type = type_object
        let vv = this.object_values
        if isset(vv) : vv.get(key) -> val : return val
        let val = Value{ type: type_null }
        this.set(key, val)
        return val
    }
    + fn set(key: String, val: Value) {
        this.type = type_object
        let vv = this.object_values
        if !isset(vv) {
            vv = map[Value]{}
            this.object_values = vv
        }
        vv.set(key, val)
    }
    + fn has(key: String) bool {
        let vv = this.object_values
        if isset(vv) : return vv.has(key)
        return false
    }

    + fn string() String $to {
        if this.is_string() : return this.string_value
        return ""
    }
    + fn int() int $to {
        if this.is_number() : return this.int_value
        return 0
    }
    + fn float() float $to {
        if this.is_number() : return this.float_value
        return 0
    }
    + fn bool() bool $to {
        if this.is_bool() : return this.bool_value
        return false
    }
    + fn array() Array[Value] $to {
        if this.is_array() {
            let a = this.array_values
            if isset(a) : return a
        }
        return array[Value]{}
    }
    + fn object() Map[Value] $to {
        if this.is_object() {
            let a = this.object_values
            if isset(a) : return a
        }
        return map[Value]{}
    }

    + fn is_null() bool {
        return this.type == type_null
    }
    + fn is_string() bool {
        return this.type == type_string
    }
    + fn is_bool() bool {
        return this.type == type_bool
    }
    + fn is_number() bool {
        return this.type == type_number
    }
    + fn is_array() bool {
        return this.type == type_array
    }
    + fn is_object() bool {
        return this.type == type_object
    }

    + fn encode(pretty: bool (false)) String {
        return encode(this, pretty)
    }
}

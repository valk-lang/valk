
use type

class Value {
    + type: type:int
    + object_values: ?Map[Value]
    + array_values: ?Array[Value]
    + int_value: type:int (0)
    + float_value: type:float (0.0)
    + string_value: String ("")
    + bool_value: type:bool (false)

    + fn get(key: String) Value {
        this.type = type_object
        let vv = this.object_values
        if isset(vv) : vv.get(key) -> val : return val
        let val = Value{ type: type_null }
        this.set(key, val)
        return val
    }
    + fn set(key: String, val: Value) {
        this.type = type_object
        let vv = this.object_values
        if !isset(vv) {
            vv = Map[Value]{}
            this.object_values = vv
        }
        vv.set(key, val)
    }
    + fn has(key: String) type:bool {
        let vv = this.object_values
        if isset(vv) : return vv.has(key)
        return false
    }
    + fn remove(key: String) {
        let vv = this.object_values
        if isset(vv) : vv.remove(key)
    }
    //
    + fn add(value: Value) {
        this.type = type_array
        let vv = this.array_values
        if !isset(vv) {
            vv = type:Array[Value]{}
            this.array_values = vv
        }
        vv.append(value)
    }
    + fn remove_index(index: uint) {
        let vv = this.array_values
        if isset(vv) : vv.remove(index)
    }

    //
    + fn string() String $to {
        if this.is_string() : return this.string_value
        return ""
    }
    + fn int() type:int $to {
        if this.is_number() : return this.int_value
        return 0
    }
    + fn float() type:float $to {
        if this.is_number() : return this.float_value
        return 0
    }
    + fn bool() type:bool $to {
        if this.is_bool() : return this.bool_value
        return false
    }
    + fn array() Array[Value] $to {
        if this.is_array() {
            let a = this.array_values
            if isset(a) : return a.copy()
        }
        return type:Array[Value]{}
    }
    + fn map() Map[Value] $to {
        if this.is_object() {
            let a = this.object_values
            if isset(a) : return a.copy()
        }
        return Map[Value]{}
    }

    + fn is_null() type:bool {
        return this.type == type_null
    }
    + fn is_string() type:bool {
        return this.type == type_string
    }
    + fn is_bool() type:bool {
        return this.type == type_bool
    }
    + fn is_number() type:bool {
        return this.type == type_number
    }
    + fn is_array() type:bool {
        return this.type == type_array
    }
    + fn is_object() type:bool {
        return this.type == type_object
    }

    // Quick object properties
    + fn set_null(key: String) SELF {
        this.set(key, null_value())
        return this
    }
    + fn set_string(key: String, value: String) SELF {
        this.set(key, string_value(value))
        return this
    }
    + fn set_number_int(key: String, value: type:int) SELF {
        this.set(key, int_value(value))
        return this
    }
    + fn set_number_uint(key: String, value: type:uint) SELF {
        this.set(key, int_value(value.to(type:int)))
        return this
    }
    + fn set_number_float(key: String, value: type:float) SELF {
        this.set(key, float_value(value))
        return this
    }
    + fn set_bool(key: String, value: type:bool) SELF {
        this.set(key, bool_value(value))
        return this
    }
    + fn set_array(key: String, values: Array[Value]) SELF {
        this.set(key, array_value(values))
        return this
    }
    + fn set_object(key: String, values: Map[Value]) SELF {
        this.set(key, object_value(values))
        return this
    }

    // Quick array items
    + fn add_null() SELF {
        this.add(null_value())
        return this
    }
    + fn add_string(value: String) SELF {
        this.add(string_value(value))
        return this
    }
    + fn add_number_int(value: type:int) SELF {
        this.add(int_value(value))
        return this
    }
    + fn add_number_uint(value: type:uint) SELF {
        this.add(int_value(value.to(type:int)))
        return this
    }
    + fn add_number_float(value: type:float) SELF {
        this.add(float_value(value))
        return this
    }
    + fn add_bool(value: type:bool) SELF {
        this.add(bool_value(value))
        return this
    }
    + fn add_array(value: Array[Value]) SELF {
        this.add(array_value(value))
        return this
    }
    + fn add_object(value: Map[Value]) SELF {
        this.add(object_value(value))
        return this
    }


    //
    + fn encode(pretty: type:bool (false)) String {
        return encode_value(this, pretty)
    }
}

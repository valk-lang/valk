
macro array optional("[" s T:t1 s "]") "{" suggest(t1, sprev) repeat(items, ws V:v1 ws optional(",") ws, "}")  suggest(sprev)
<{
	#if is_identifier(t1)
	let a = Array[t1].new()
	#else
	let a = Array.new()
	#end
	#loop macro_values items as item
	a.push(item.v1)
	#end
	return a
}

// macro map optional("[" s T:t1 s "," s T:t2 s "]") "{" repeat(items, ws V:v1 ws "=>" ws V:v2 ws optional(",") ws, "}")
macro map optional("[" s T:t1 s "]") "{" repeat(items, ws V:v1 ws "=>" ws V:v2 ws optional(",") ws, "}")
<{
	#if is_identifier(t1)
	// let m = Map[t1, t2].new()
	let m = Map[t1].new()
	#else
	let m = Map.new()
	#end
	#loop macro_values items as item
	m.set(item.v1, item.v2)
	#end
	return m
}

macro flatmap "[" s T:kt s "," s T:vt s "]" "{" repeat(items, ws V:v1 ws "=>" ws V:v2 ws optional(",") ws, "}")
<{
	let m = FlatMap[kt, vt].new()
	#loop macro_values items as item
	m.set(item.v1, item.v2)
	#end
	return m
}

macro hashmap "[" s T:kt s "," s T:vt s "]" "{" repeat(items, ws V:v1 ws "=>" ws V:v2 ws optional(",") ws, "}")
<{
	let m = HashMap[kt, vt].new()
	#loop macro_values items as item
	m.set(item.v1, item.v2)
	#end
	return m
}


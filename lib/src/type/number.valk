
header "sys" as sys

use mem
use io

global num2str_buf1 : ?ptr (@undefined)
global num2str_buf2 : ?ptr (@undefined)

trait Number {

    fn _string() String {
        return this.to_base(10)
    }
    fn to_str() String {
        return this.to_base(10)
    }
    fn to_hex() String {
        return this.to_base(16)
    }

    fn round_up(modulo: SELF) SELF {
        return this + ((modulo - (this % modulo)) % modulo)
    }
    fn round_down(modulo: SELF) SELF {
        return this - (this % modulo)
    }

    fn to_base(base: SELF) String {

        if this == 0 || base == 0 : return "0"

        let buf = num2str_buf1
        if !isset(buf) {
            buf = mem:alloc(64)
            num2str_buf1 = buf
        }
        let len = this.to_base_to_ptr(base, buf)

        return String.make_from_ptr(buf, len)
    }

    fn to_base_to_ptr(base: SELF, result: ptr) uint {

        if base > 16 : base = 16
        #if @is_signed_type(SELF)
        if base < 0 : base = 10
        #end
        let base_ = base

        let chars = "0123456789ABCDEF".data_ptr()

        let rev = num2str_buf2
        if !isset(rev) {
            rev = mem:alloc(64)
            num2str_buf2 = rev
        }

        let val = this
        let negative = false
        #if @is_signed_type(SELF)
        if val < 0 {
            negative = true
            val = val * -1
        }
        #end

        let i : uint = 0
        while val > 0 {
            @ptrv(rev, u8, i) = @ptrv(chars, u8, (val % base_))
            i++
            val = val / base_
        }
        // Set len
        if i == 0 {
            @ptrv(result, u8, 0) = '0'
            @ptrv(result, u8, 1) = 0
            return 1
        }
        let len = i
        #if @is_signed_type(SELF)
        if negative {
            len++
            @ptrv(result, u8, 0) = '-'
        }
        #end
        // Reverse
        let amount = i
        let offset : uint = negative ? 1 : 0
        while i-- > 0 {
            @ptrv(result, u8, i + offset) = @ptrv(rev, u8, amount - i - 1)
        }
        @ptrv(result, u8, len) = 0

        return len
    }

    fn print(base: SELF) {

        let buf = num2str_buf2
        if !isset(buf) { 
            buf = mem:alloc(64)
            num2str_buf2 = buf
        }
        let len = this.to_base_to_ptr(base, buf)

        io:write_from_ptr(1, buf, len) ? 0
    }
}


use io

class Map[T] {
    ~ _keys : Array[String] (Array[String].new())
    ~ _values : Array[T] (Array[T].new())

    static fn new() SELF {
        return SELF{}
    }

    fn length() uint {
        return this._keys.length
    }

    fn set(key: String, value: T) void {
        let index = this._keys.index_of(key) ! {
            // Set new key / value
            this._keys.push(key)
            this._values.push(value)
            return
        }
        // Update existing key / value
        this._values.set(index, value) ! { return }
    }

    fn set_unique(key: String, value: T) !not_unique {
        this._keys.index_of(key) ! {
            this._keys.push(key)
            this._values.push(value)
            return
        }
        throw not_unique
    }

    fn get(key: String) T !not_found {
        let index = this._keys.index_of(key) ! { throw not_found }
        return this._values.get(index) ! { throw not_found }
    }

    fn has(key: String) bool {
        return this._keys.contains(key)
    }
    fn has_value(value: T) bool {
        return this._values.contains(value)
    }

    fn remove(key: String) {
        let index = this._keys.index_of(key) ! { return }
        this._keys.remove_index(index)
        this._values.remove_index(index)
    }

    fn clear() {
        this._keys.clear()
        this._values.clear()
    }

    fn _each(index: uint) (T, String) !end {
        let k = this._keys.get(index) ! throw end
        let v = this._values.get(index) ! throw end
        return v, k
    }

    // #if @type_is(T, String)
    // fn print() {
    //     each this as k, v {
    //         println(k + ": " + v)
    //     }
    // }
    // #end
}

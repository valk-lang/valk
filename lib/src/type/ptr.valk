
use io
use mem

pointer ptr {
    fn to_hex() String {
        return (this @as uint).to_hex()
    }

    fn _string() String {
        return (this @as uint).to_hex()
    }

    fn print() {
        (this @as uint).print(16)
    }

    fn print_content(length: uint) {
        io:print_from_ptr(this, length)
    }
    fn print_bytes(length: uint, end_with_newline: bool (true)) {
        let adr = this
        while length-- > 0 {
            print("0x")
            @ptrv(adr, u8).print(16)
            adr += 1
            if length > 0 : print(",")
        }
        if end_with_newline : print("\n")
    }

    fn index_of_byte(byte: u8, memory_size: uint) uint !not_found {
        let index : uint = 0
        let len = memory_size
        while index < len {
            let ch = @ptrv(this, u8, index)
            if ch == byte : return index
            index++
        }
        throw not_found
    }

    fn create_string(length: uint) String {
        if length == 0 : return ""
        let str = String.make_empty(length)
        mem:copy(this, str.data_ptr(), length)
        return str
    }

    fn offset(offset: uint) ptr {
        return @ptr_offset(this, offset)
    }
    fn offset_int(offset: int) ptr {
        return @ptr_offset(this, offset)
    }
}

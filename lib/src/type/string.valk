
use mem
use utils
use io

struct CharStep {
    data: ptr
    bytes: uint
    pos: uint

    fn set(str: String) {
        this.data = str.data_ptr()
        this.bytes = str.bytes
        this.pos = 0
    }
    fn skip_bytes(len: uint) {
        this.pos += len
    }

    fn next() u8 !end {
        let pos = this.pos
        let bytes = this.bytes
        let data = this.data
        if pos == bytes : throw end
        let byte : u8 = @ptrv(data, u8, pos)
        let bytec : u8 = 1
        if((byte & 128) > 0){
            byte = byte << 1
            while (byte & 128) > 0 {
                bytec++
                byte = byte << 1
            }
            if bytec > 4 : bytec = 1
            if pos + bytec > bytes : bytec -= (pos + bytec - bytes) @as u8
        }
        this.pos = pos + bytec
        return bytec
    }
}

class String imut {
    ~ bytes: uint
    ~ data: ptr

    + fn data_ptr() ptr {
        return this.data
    }
    + fn data_cstring() cstring {
        return this.data @as cstring
    }

    /////////////////////
    // UTF8
    /////////////////////

    fn chars() uint {
        let step = @stack(<CharStep>)
        step.set(this)
        let count : uint = 0
        while true {
            step.next() ! return count
            count++
        }
        return 0
    }

    /////////////////////
    // Start / Ends
    /////////////////////

    fn starts_with(part: String) bool {
        if part.bytes > this.bytes : return false
        return mem:equal(this.data_ptr(), part.data_ptr(), part.bytes)
    }
    fn ends_with(part: String) bool {
        if part.bytes > this.bytes : return false
        return mem:equal(@offset(this.data_ptr(), u8,  this.bytes - part.bytes), part.data_ptr(), part.bytes)
    }

    /////////////////////
    // Index of
    /////////////////////

    fn byte_index_of_byte(byte: u8, start_index: uint (0)) uint !not_found {
        let index = start_index
        let len = this.bytes
        let data = this.data_ptr()
        while index < len {
            let ch = @ptrv(data, u8, index)
            if ch == byte : return index
            index++
        }
        throw not_found
    }

    fn byte_index_of(part: String, start_index: uint (0)) uint !not_found {
        let part_bytes = part.bytes
        if part_bytes > this.bytes : throw not_found
        let index = start_index
        let len = this.bytes - part_bytes + 1
        let data = this.data_ptr()
        let part_data = part.data_ptr()
        while index < len {
            if mem:equal(@offset(data, u8, index), part_data, part_bytes) : return index
            index++
        }
        throw not_found
    }

    fn index_of(part: String, start_index: uint (0)) uint !not_found {
        if part.bytes > this.bytes : throw not_found
        let step = @stack(<CharStep>)
        step.set(this)
        let count : uint = 0
        let offset : uint = 0
        let adr = this.data_ptr()
        let part_adr = part.data_ptr()
        let part_bytes = part.bytes
        let last_offset = this.bytes - part_bytes
        while count < start_index {
            offset += step.next() ! throw not_found
            if offset > last_offset : throw not_found
            count++
        }
        while true {
            if mem:equal(@offset(adr, u8, offset), part_adr, part_bytes) : return count
            offset += step.next() ! throw not_found
            if offset > last_offset : throw not_found
            count++
        }
        return 0
    }

    fn contains(part: String) bool {
        this.index_of(part) ! return false
        return true
    }
    fn contains_byte(byte: u8) bool {
        this.byte_index_of_byte(byte) ! return false
        return true
    }

    /////////////////////
    // Clean
    /////////////////////

    fn trim(part: String, limit: uint (0)) String {
        let res = this.ltrim(part, limit)
        return res.rtrim(part, limit)
    }

    fn rtrim(part: String, limit: uint (0)) String {

        let part_bytes = part.bytes
        let part_data = part.data_ptr()

        let data = this.data_ptr()
        let len = this.bytes
        let data_end = data + len
        let offset : uint = 0
        let count : uint = 0
        while (offset + part_bytes <= len) && mem:equal(data_end - offset - part_bytes, part_data, part_bytes) {
            offset += part_bytes
            count++
            if count == limit : break
        }
        if offset == 0 : return this

        return String.make_from_ptr(data, len - offset)
    }

    fn ltrim(part: String, limit: uint (0)) String {
        let part_bytes = part.bytes
        let part_data = part.data_ptr()

        let data = this.data_ptr()
        let len = this.bytes
        let offset : uint = 0
        let count : uint = 0
        while (offset + part_bytes <= len) && mem:equal(data + offset, part_data, part_bytes) {
            offset += part_bytes
            count++
            if count == limit : break
        }
        if offset == 0 : return this

        return String.make_from_ptr(data + offset, len - offset)
    }

    /////////////////////
    // Convert
    /////////////////////

    // fn to_uint() uint !invalid {
    //     let i = this.bytes
    //     let result : uint = 0
    //     let mult : uint = 1
    //     while i > 0 {
    //         let ch = this.byte(--i) - '0'
    //         if ch > 9 : throw invalid
    //         result += ch @as uint * mult
    //         mult *= 10
    //     }
    //     return result
    // }
    fn to_uint() uint !invalid {
        return this.data_ptr().read_uint_value(this.bytes) ! throw invalid
    }
    fn to_int() int !invalid {
        if this.byte(0) == '-' : return (((this.data_ptr() + 1) @as ptr).read_uint_value(this.bytes - 1) ! throw invalid) @as int * -1
        return (this.data_ptr().read_uint_value(this.bytes) ! throw invalid) @as int
    }

    fn hex_to_uint() uint !invalid {
        return this.data_ptr().read_hex_value(this.bytes) ! throw invalid
    }
    fn hex_to_int() int !invalid {
        if this.byte(0) == '-' : return (((this.data_ptr() + 1) @as ptr).read_hex_value(this.bytes - 1) ! throw invalid) @as int * -1
        return (this.data_ptr().read_hex_value(this.bytes) ! throw invalid) @as int
    }

    fn octal_to_uint() uint !invalid {
        return this.data_ptr().read_octal_value(this.bytes) ! throw invalid
    }
    fn octal_to_int() int !invalid {
        if this.byte(0) == '-' : return (((this.data_ptr() + 1) @as ptr).read_octal_value(this.bytes - 1) ! throw invalid) @as int * -1
        return (this.data_ptr().read_octal_value(this.bytes) ! throw invalid) @as int
    }

    fn to_float() f64 !invalid {

        let result : f64 = 0
        let sign : f64 = 1
        let i : uint = 0
        let len = this.bytes
        let has_dot = false
        let decimals = 0

        if i == len : throw invalid
        if this.byte(0) == '-' {
            sign = -1
            i++
            if i == len : throw invalid
        }

        while i < len {
            let ch = this.byte(i++)
            if ch.is_number() {
                result = result * 10 + (ch - '0');
                if has_dot : decimals++
            } else if ch == '.' {
                if has_dot : throw invalid
                has_dot = true
            } else {
                throw invalid
            }
        }

        while decimals-- > 0 {
            result = result / 10
        }

        return result * sign
    }

    fn to_lower() String {
        let len = this.bytes
        let data = this.data_ptr()
        let new_str = String.make_empty(len)
        let new_data = new_str.data_ptr()
        while len-- > 0 {
            let ch = @ptrv(data, u8, len)
            if ch > 64 && ch < 91 : ch += 32
            @ptrv(new_data, u8, len) = ch
        }
        return new_str
    }

    /////////////////////
    // Partials
    /////////////////////
    
    fn byte(index: uint) u8 {
        if index >= this.bytes : return 0
        return @ptrv(this.data_ptr(), u8, index)
    }
    fn byte_end(index: uint) u8 {
        if index >= this.bytes : return 0
        return @ptrv(this.data_ptr(), u8, this.bytes - index - 1)
    }
    fn char(index: uint) String {
        return this.sub_str(index, 1)
    }
    fn char_end(index: uint) String {
        let len = this.chars()
        if index >= len : return ""
        return this.sub_str(len - index - 1, 1)
    }

    fn byte_sub_str(start_index: uint, length: uint) String {
        let this_bytes = this.bytes
        if start_index > this_bytes : return ""
        if (start_index + length) > this_bytes {
            length = this_bytes - start_index
        }
        if length == 0 : return ""
        let from = @offset(this.data_ptr(), u8,  start_index)
        let res = String.make_empty(length)
        mem:copy(from, res.data_ptr(), length)
        return res
    }

    fn sub_str(start_index: uint, length: uint) String {

        if length == 0 : return ""
        let this_bytes = this.bytes
        if start_index > this_bytes : return ""

        let step = @stack(<CharStep>)
        step.set(this)

        let count : uint = 0
        let offset : uint = 0
        let data = this.data_ptr()
        while count < start_index {
            offset += step.next() ! return ""
            count++
        }
        let start = offset
        count = 0
        while count++ < length {
            offset += step.next() ! break
            if offset >= this_bytes : break
        }
        if offset > this_bytes : offset = this_bytes
        return String.make_from_ptr(@offset(data, u8, start), offset - start)
    }

    fn split(on: String) Array[String] {
        let result = Array[String].new()
        let on_bytes = on.bytes
        let this_bytes = this.bytes
        if on_bytes > this_bytes || on_bytes == 0 {
            result.push(this)
            return result
        }

        let step = @stack(<CharStep>)
        step.set(this)

        let offset : uint = 0
        let start : uint = 0

        let data = this.data_ptr()
        let on_data = on.data_ptr()
        let last_offset = this_bytes - on_bytes
        while offset <= last_offset {
            if mem:equal(@offset(data, u8, offset), on_data, on_bytes) {
                result.push(String.make_from_ptr(@offset(data, u8, start), offset - start))
                offset += on_bytes
                start = offset
                step.skip_bytes(on_bytes)
                continue
            }
            offset += step.next() ! break
        }
        if offset > this_bytes : offset = this_bytes
        result.push(String.make_from_ptr(@offset(data, u8, start), offset - start))
        return result
    }

    fn split_on_first_occurance_of_byte(byte: u8) (String, String) !not_found {
        let pos = this.byte_index_of_byte(byte) ! throw not_found
        let p2 = this.byte_sub_str(pos + 1, this.bytes - pos - 1)
        let p1 = this.byte_sub_str(0, pos)
        return p1, p2
    }

	/////////////////////
	// Syntax
	/////////////////////
    fn is_alpha(allow_extra_bytes: String ("")) bool {
		let i : uint = 0
		let len = this.bytes
		let data = this.data_ptr()
		while i < len {
			let ch = @ptrv(data, u8, i++)
			if (ch < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z') {
				if !allow_extra_bytes.contains_byte(ch) : return false
			}
		}
		return true
	}
    fn is_alpha_numeric(allow_extra_bytes: String ("")) bool {
		let i : uint = 0
		let len = this.bytes
		let data = this.data_ptr()
		while i < len {
			let ch = @ptrv(data, u8, i++)
			if (ch < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z') && (ch < '0' || ch > '9') {
				if !allow_extra_bytes.contains_byte(ch) : return false
			}
		}
		return true
	}

    /////////////////////
    // Misc
    /////////////////////

    // Convert escaped characters
    fn unescape() String {
        let bytes = this.bytes
        if bytes == 0 : return ""
        let data = this.data_ptr()
        let buf = utils:ByteBuffer.new(bytes)
        //
        let i : uint = 0
        while i < bytes {
            let ch = @ptrv(data, u8, i++)
            if (ch == '\\') {
                let ch = @ptrv(data, u8, i++)
                ch = ch.unescape()
                buf.append_byte(ch)
                continue
            }
            buf.append_byte(ch)
        }
        return buf.to_string()
    }

    /////////////////////
    // Create
    /////////////////////

    fn clone() String {
        return String.make_from_ptr(this.data_ptr(), this.bytes)
    }

    static fn make_empty(length: uint) String {
        if length == 0 : return ""
        let d = mem:alloc(length + 1)
        @ptrv(d, u8, length) = 0
        let str = String {
            data: d
            bytes: length
        }
        return str
    }

    static fn make_from_ptr(data: ptr, length: uint) String {
        if length == 0 : return ""
        let s = String.make_empty(length)
        let str_data = s.data_ptr()
        mem:copy(data, str_data, length)
        @ptrv(str_data, u8, length) = 0
        return s
    }

    /////////////////////
    // Internals
    /////////////////////

    fn _add(add: String) String {
        let this_len = this.bytes
        let add_len = add.bytes
        let len = this_len + add_len
        if len == 0 : return ""
        let s = SELF.make_empty(len)
        let data = s.data_ptr()
        mem:copy(this.data_ptr(), data, this_len)
        mem:copy(add.data_ptr(), @offset(data, u8, this_len), add_len + 1) // + 1 for 0 byte
        return s
    }

    fn eq_string(cmp: String) bool {
        if this.bytes != cmp.bytes : return false 
        return mem:equal(this.data_ptr(), cmp.data_ptr(), this.bytes)
    }
    fn lt_string(cmp: String) bool {
        let len1 = this.bytes
        let len2 = cmp.bytes
        let len = len1 <= len2 ? len1 : len2
        let data1 = this.data
        let data2 = cmp.data
        let i : uint = 0
        while i < len {
            let ch1 = @ptrv(data1, u8, i)
            let ch2 = @ptrv(data2, u8, i++)
            if ch1 != ch2 : return ch1 < ch2
        }
        return len1 <= len2
    }
    fn gt_string(cmp: String) bool {
        let len1 = this.bytes
        let len2 = cmp.bytes
        let len = len1 <= len2 ? len1 : len2
        let data1 = this.data
        let data2 = cmp.data
        let i : uint = 0
        while i < len {
            let ch1 = @ptrv(data1, u8, i)
            let ch2 = @ptrv(data2, u8, i++)
            if ch1 != ch2 : return ch1 > ch2
        }
        return len1 > len2
    }
    fn lte_string(cmp: String) bool {
        return this.lt_string(cmp) || this.eq_string(cmp)
    }
    fn gte_string(cmp: String) bool {
        return this.gt_string(cmp) || this.eq_string(cmp)
    }

    fn gc_free() {
        mem:free(this.data)
    }
}

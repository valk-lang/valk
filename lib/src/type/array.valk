
use mem
use io

class Arrayx[T: PROP_TYPE] {
    ~ data: ptr
    ~ size: uint
    ~ length: uint (0)

    + static fn new(start_size: uint (2)) SELF {
        if start_size < 2 {
            start_size = 2
        }
        let d = mem:alloc(start_size * size_of(T))

        let res = SELF {
            size: start_size
            data: d
        }
        return res
    }

    + mut fn push(item: T, unique: bool (false)) uint {
        if unique {
            return this.index_of(item) ! {
                return this.push(item, false)
            }
        }

        let size = this.size
        let length = this.length
        let data = this.data

        if length == size {
            data = this.increase_size(size * 2)
        }

        @property_init(this, @ptrv(data, T, length), item)

        this.length = length + 1

        return length
    }

    + mut fn push_many(items: Array[T], unique: bool (false)) {
        each items => item {
            this.push(item, unique)
        }
    }

    + mut fn prepend(item: T, unique: bool (false)) {
        if unique {
            this.index_of(item) ! {
                this.prepend(item, false)
                return
            }
            return
        }

        let size = this.size
        let length = this.length
        let data = this.data

        if length == size {
            data = this.increase_size(size * 2)
        }

        let to_pos = length
        while to_pos > 0 {
            @ptrv(data, T, to_pos) = @ptrv(data, T, to_pos - 1)
            to_pos--
        }

        @property_init(this, @ptrv(data, T, 0), item)

        this.length = length + 1
    }

    + mut fn prepend_many(items: Array[T], unique: bool (false)) {
        let result = items.copy()
        each this => item {
            result.prepend(item, unique)
        }
    }

    + fn intersect(with: Array[T]) Array[T] {
        let len = this.length
        if with.length < len : len = with.length
        let result = Array[T].new(len)
        each this => item {
            if with.contains(item) : result.push(item, true)
        }
        return result
    }

    + mut fn increase_size(new_size: uint) ptr {
        let data = this.data
        let size = this.size
        if size >= new_size : return data

        let new_data = mem:alloc(new_size * size_of(T))
        mem:copy(data, new_data, size * size_of(T))
        mem:free(data)

        this.data = new_data
        this.size = new_size
        return new_data
    }

    + fn get(index: uint) T !not_found $offset {
        if index >= this.length {
            throw not_found
        }

        return @property_get(@ptrv(this.data, T, index))
    }

    + mut fn set(index: uint, value: T) !out_of_range $offset_assign {
        if index >= this.length {
            if index == this.length {
                this.push(value)
                return
            }
            throw out_of_range
        }
        let data = this.data
        @property_update(this, @ptrv(data, T, index), value)
    }

    + mut fn set_expand(index: uint, value: T, filler_value: T) {
        let size = this.size
        if index >= size {
            let new_size = size * 2
            if index >= new_size {
                new_size = index + 1
            }
            this.increase_size(new_size)
        }
        let len = this.length
        if index >= len {
            this.length = index + 1
        }

        let data = this.data
        // fill
        let i = len
        while i < index {
            @property_init(this, @ptrv(data, T, i++), filler_value)
        }

        // Set index
        if index < len {
            @property_update(this, @ptrv(data, T, index), value)
        } else {
            @property_init(this, @ptrv(data, T, index), value)
        }
    }

    + fn contains(value: T) bool {
        let index = this.index_of(value) ! {
            return false
        }
        return true
    }

    + mut fn remove_index(index: uint) {
        let len = this.length
        if index >= len { return }
        let data : ptr = this.data
        let after_count = len - (index + 1)

        @property_clear(this, @ptrv(data, T, index))

        if after_count > 0 {
            mem:copy(data + (index + 1) * size_of(T), data + index * size_of(T), after_count * size_of(T))
        }

        this.length--
    }
    + mut fn remove_value(value: T) {
        let index = this.index_of(value) ! {
            return
        }
        this.remove_index(index)
    }

    + mut fn pop_last() T !empty {
        if this.length > 0 {

            let index = --this.length
            let data = this.data

            let item = @property_get(@ptrv(data, T, index))
            @property_clear(this, @ptrv(data, T, index))

            return item
        }
        throw empty
    }
    + mut fn pop_first() T !empty {
        if this.length > 0 {

            let data : ptr = this.data

            let item = @property_get(@ptrv(data, T, 0))
            @property_clear(this, @ptrv(data, T, 0))

            this.length--
            mem:copy(data + size_of(T), data, this.length * size_of(T))

            return item
        }
        throw empty
    }

    + mut fn swap(index_a: uint, index_b: uint) {
        let len = this.length
        if index_a >= len {
            return
        }
        if index_b >= len {
            return
        }
        let data = this.data
        let a = @ptrv(data, T, index_a)
        let b = @ptrv(data, T, index_b)
        @ptrv(data, T, index_a) = b
        @ptrv(data, T, index_b) = a
    }

    + fn index_of(item: T) uint !not_found {
        let index : uint = 0
        let adr = this.data
        let len = this.length
        while index < len {
            let x = @property_get(@ptrv(adr, T, index))
            if x == item : return index
            index++
        }
        throw not_found
    }

    + mut fn clear() {
        #if is_gc_type(T)
        let data = this.data
        let i = this.length
        while i-- > 0 {
            @property_clear(this, @ptrv(data, T, i))
        } 
        #end

        this.length = 0
    }

    + mut fn sort() {
        let len_ = this.length
        if len_ < 2 { return }

        let v = true
        let i : uint = 0
        let len = len_ - 1
        while i < len && v {
            v = false
            let j : uint = 0
            let until = len - i
            while j < until {
                let item = this.get(j) ! { break }
                let next = this.get(j + 1) ! { break }
                if item > next {
                    this.swap(j, j + 1)
                    v = true
                }
                j++
            }
            i++
        }
    }

    + mut fn sort_custom(compare_func: fn(T, T)(bool)) {
        let len_ = this.length
        if len_ < 2 { return }

        let v = true
        let i : uint = 0
        let len = len_ - 1
        while i < len && v {
            v = false
            let j : uint = 0
            let until = len - i
            while j < until {
                let item = this.get(j) ! { break }
                let next = this.get(j + 1) ! { break }
                if compare_func(item, next) {
                    this.swap(j, j + 1)
                    v = true
                }
                j++
            }
            i++
        }
    }

    + mut fn reverse() {
        let len_ = this.length
        if len_ < 2 : return
        let last = len_ - 1
        let first : uint = 0
        while len_ > 1 {
            this.swap(first, last)
            first++
            last--
            len_ -= 2
        }
    }

    ////////////////
    // Internals
    ////////////////

    + fn copy() Array[T] {
        let arr = Array[T].new(this.length)
        each this => item {
            arr.push(item)
        }
        return arr
    }

    fn each_get(index: uint) (uint, T) !end {
        let v = this.get(index) ! throw end
        return index, v
    }

    ////////////////
    // Gc
    ////////////////

    fn gc_free() {
        mem:free(this.data)
    }

    #if is_gc_type(T)

        fn gc_action(action: fnRef(ptr, ptr)()) {
            let data = this.data
            let x = this.length
            while x-- > 0 {
                action(this, @offset(data, ptr, x))
            }
        }

    #end

    fn clone() SELF {
        let new = Array[T].new(this.size)
        each this => i, item {
            new.push(item)
        }
        return new @as SELF
    }
}


use mem
use io
use gc

class Array[T] {
    ~ size: uint
    ~ length: uint (0)
    ~ data: ptr

    static fn new(start_size: uint (2)) SELF {
        if start_size < 2 {
            start_size = 2
        }
        let d = mem:alloc(start_size * sizeof(T))
        let res = SELF {
            size: start_size
            data: d
        }
        return res
    }

    fn push(item: T, unique: bool (false)) uint {
        if unique {
            return this.index_of(item) ! {
                return this.push(item, false)
            }
        }

        #if @is_gc_type(T)
        gc:changed(this)
        #end

        let size = this.size
        let length = this.length
        let data = this.data

        if length == size {
            data = this.increase_size(size * 2)
        }

        @ptrv(data, T, length) = item
        this.length = length + 1

        return length
    }

    fn push_many(items: Array[T], unique: bool (false)) {
        each items => item {
            this.push(item, unique)
        }
    }

    fn prepend(item: T, unique: bool (false)) {
        if unique {
            this.index_of(item) ! {
                this.prepend(item, false)
                return
            }
            return
        }

        #if @is_gc_type(T)
        gc:changed(this)
        #end

        let size = this.size
        let length = this.length
        let data = this.data

        if length == size {
            data = this.increase_size(size * 2)
        }

        let to_pos = length
        while to_pos > 0 {
            @ptrv(data, T, to_pos) = @ptrv(data, T, to_pos - 1)
            to_pos--
        }

        @ptrv(data, T, 0) = item
        this.length = length + 1
    }

    fn prepend_many(items: Array[T], unique: bool (false)) {
        let result = items.copy()
        each this => item {
            result.prepend(item, unique)
        }
    }

    fn intersect(with: Array[T]) Array[T] {
        let len = this.length
        if with.length < len : len = with.length
        let result = Array[T].new(len)
        each this => item {
            if with.contains(item) : result.push(item, true)
        }
        return result
    }

    fn increase_size(new_size: uint) ptr {
        let data = this.data
        let size = this.size
        if size >= new_size : return data

        let new_data = mem:alloc(new_size * sizeof(T))
        mem:copy(data, new_data, size * sizeof(T))
        mem:free(data)

        this.data = new_data
        this.size = new_size
        return new_data
    }

    fn get(index: uint) T !not_found {
        if index >= this.length {
            throw not_found
        }
        return @ptrv(this.data, T, index)
    }

    fn set(index: uint, value: T) !out_of_range {
        if index >= this.length {
            throw out_of_range
        }
        let data = this.data

        #if @is_gc_type(T)
        gc:changed(this)
        gc:removed(this, @ptrv(data, ptr, index))
        #end

        @ptrv(data, T, index) = value
    }
    fn set_expand(index: uint, value: T, filler_value: T) {
        let size = this.size
        if index >= size {
            let new_size = size * 2
            if index >= new_size {
                new_size = index + 1
            }
            this.increase_size(new_size)
        }
        let len = this.length
        if index >= len {
            this.length = index + 1
        }

        let data = this.data
        // fill
        let i = len
        while i < index {
            @ptrv(data, T, i++) = filler_value
        }

        //
        #if @is_gc_type(T)
        gc:changed(this)
        if index < len : gc:removed(this, @ptrv(data, T, index))
        #end

        // Set index
        @ptrv(data, T, index) = value
    }

    fn contains(value: T) bool {
        let index = this.index_of(value) ! {
            return false
        }
        return true
    }

    fn remove_index(index: uint) {
        let len = this.length
        if index >= len { return }
        let data = this.data
        let after_count = len - (index + 1)

        #if @is_gc_type(T)
        gc:changed(this)
        gc:removed(this, @ptrv(data, ptr, index))
        #end

        if after_count > 0 {
            mem:copy(data + (index + 1) * sizeof(T), data + index * sizeof(T), after_count * sizeof(T))
        }

        this.length--
    }
    fn remove_value(value: T) {
        let index = this.index_of(value) ! {
            return
        }
        this.remove_index(index)
    }

    fn pop_last() T !empty {
        if this.length > 0 {

            let item = @ptrv(this.data, T, --this.length)

            #if @is_gc_type(T)
            gc:changed(this)
            gc:removed(this, item)
            #end

            return item
        }
        throw empty
    }
    fn pop_first() T !empty {
        if this.length > 0 {

            let item = @ptrv(this.data, T, 0)

            #if @is_gc_type(T)
            gc:changed(this)
            gc:removed(this, item)
            #end

            this.length--
            mem:copy(this.data + sizeof(T), this.data, this.length * sizeof(T))

            return item
        }
        throw empty
    }

    fn swap(index_a: uint, index_b: uint) {
        let len = this.length
        if index_a >= len {
            return
        }
        if index_b >= len {
            return
        }
        let data = this.data
        let a = @ptrv(data, T, index_a)
        let b = @ptrv(data, T, index_b)
        @ptrv(data, T, index_a) = b
        @ptrv(data, T, index_b) = a
    }

    fn index_of(item: T) uint !not_found {
        let index : uint = 0
        let adr = this.data
        let len = this.length
        while index < len {
            let x = @ptrv(adr, T, index)
            if x == item {
                return index
            }
            index++
        }
        throw not_found
    }

    fn clear() {
        #if @is_gc_type(T)
        let data = this.data
        let i = this.length
        while i-- > 0 {
            gc:removed(this, @ptrv(data, ptr, i))
        } 
        #end

        this.length = 0
    }

    fn sort() {
        let len_ = this.length
        if len_ < 2 { return }

        let v = true
        let i : uint = 0
        let len = len_ - 1
        while i < len && v {
            v = false
            let j : uint = 0
            let until = len - i
            while j < until {
                let item = this.get(j) ! { break }
                let next = this.get(j + 1) ! { break }
                if item > next {
                    this.swap(j, j + 1)
                    v = true
                }
                j++
            }
            i++
        }
    }

    fn reverse() {
        let len_ = this.length
        if len_ < 2 : return
        let last = len_ - 1
        let first = 0
        while len_ > 1 {
            this.swap(first, last)
            first++
            last--
            len_ -= 2
        }
    }

    ////////////////
    // Internals
    ////////////////

    fn copy() Array[T] {
        let arr = Array[T].new(this.length)
        each this => item {
            arr.push(item)
        }
        return arr
    }

    fn _each(index: uint) (uint, T) !end {
        let v = this.get(index) ! throw end
        return index, v
    }

    ////////////////
    // Gc
    ////////////////

    #if @is_gc_type(T)
        fn _gc_mark(color: gc:color_type) {
            let data = this.data
            let x = this.length
            while x-- > 0 {
                let item = @ptrv(data, ptr, x)
                if item != null {
                    gc:mark_item(item, color)
                }
            }
        }

        fn _gc_free_properties() {
            let data = this.data
            let x = this.length
            while x-- > 0 {
                let item = @ptrv(data, ptr, x)
                if item != null {
                    gc:free_item(item)
                }
            }
        }

        fn _gc_share() {
            let data = this.data
            let x = this.length
            while x-- > 0 {
                let item = @ptrv(data, ptr, x)
                if item != null {
                    gc:share_item(item)
                }
            }
        }
    #end

    fn _gc_free() {
        mem:free(this.data)
    }
}

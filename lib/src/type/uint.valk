
use mem
use io

global str_buf : ?ptr
global str_rev : ?ptr

integer uint unsigned * {
        fn to_base_to_ptr(base: uint, result: ptr) uint {

        let chars = "0123456789ABCDEF".data_ptr()

        if str_rev == null {
            str_rev = mem:alloc(24)
        }
        let rev = str_rev @as ptr
        let val = this
        let negative = false

        let i : uint = 0
        while val > 0 {
            @ptrv(rev, u8, i) = @ptrv(chars, u8, (val % base))
            i++
            val = val / base
        }
        // Set len
        if i == 0 {
            @ptrv(result, u8, 0) = '0'
            return 1
        }
        let len = i
        // Reverse
        let amount = i
        let offset : uint = 0
        if negative : offset = 1
        while i-- > 0 {
            @ptrv(result, u8, i + offset) = @ptrv(rev, u8, amount - i - 1)
        }

        return len
    }

    fn print(base: uint) {

        if str_buf == null : str_buf = mem:alloc(24)
        let buf = str_buf @as ptr
        let len = this.to_base_to_ptr(base, buf)

        io:write_from_ptr(1, buf, len)
    }
}

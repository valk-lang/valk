
use mem

trait FloatNumber {

    fn to_string() String $to {
        return this.to_str()
    }

    + fn to_str(decimals: uint (2)) String {
        let buf = @stack([u8 x 64])
        let offset : uint = 0

        let value = this

        if value < 0 {
            value = value * -1
            @ptrv(buf, u8, 0) = '-'
            offset++
        }

        //
        let intv = value.to(int) 
        let ilen = intv.to_base_to_ptr(10, buf + offset)
        offset += ilen
        if decimals > 0 {

            @ptrv(buf, u8, offset++) = '.'

            let fv : SELF = value - intv.to(SELF)
            let i : uint = 0
            while i++ < decimals : fv *= 10
            let fi = fv.to(uint)
            fv -= fi.to(SELF)
            if fv > 0.5 : fi++

            let flen = fi.to_base_to_ptr(10, buf + offset)
            offset += flen
            while flen++ < decimals : @ptrv(buf, u8, offset++) = '0'
        }
        return String.make_from_ptr(buf, offset)
    }

    fn equals_str(str: String) bool $eq {
        let v = str.to_float() ! return false
        return this == v
    }
}


use mem

type color_type (u32)

value color_state_unused (0)
value color_state_used (1)

value color_blank (0)
value color_blank2 (1)
value color_shared (2)
value color_const (3)
value color_custom (4)
// value color_max (10000)

global color_next : color_type (@undefined)
global color_state : ptr (@undefined)
global color_pool : ptr (@undefined)
global color_pool_size : uint (@undefined)
global color_pool_count : uint (@undefined)
global color_disable_after : bool (false)

struct Color {
    static fn init() {
        let size : uint = 1000
        color_next = color_custom
        color_state = mem:calloc(size)
        color_pool = mem:alloc(size * sizeof(color_type))
        color_pool_size = size
        color_pool_count = 0
    }
    static fn get() color_type {
        if color_pool_count > 0 {
            let i = --color_pool_count
            let c = @ptrv(color_pool, color_type, i)
            @ptrv(color_state, u8, c) = color_state_used
            return c
        }
        let c = color_next++
        if c == 0 {
            panic("MAX GC COLORS REACHED")
        }
        let size = color_pool_size
        if c == size {
            let new_size = size * 2
            color_pool = mem:resized_clone_and_free(color_pool, size * sizeof(color_type), new_size * sizeof(color_type))
            color_state = mem:resized_clone_and_free(color_state, size, new_size)
            mem:clear(color_state + size, size)
            color_pool_size = new_size
        }

        // if color_next == color_max : color_next = color_custom
        @ptrv(color_state, u8, c) = color_state_used
        return c
    }
    static fn give(color: color_type) {
        let i = color_pool_count++
        @ptrv(color_pool, color_type, i) = color
    }
}

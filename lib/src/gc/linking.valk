
fn link(on: ptr, to: ptr) {
    let on_color = @ptrv(on, u16, byte_color_rel)
    let to_color = @ptrv(to, u16, byte_color_rel)

    if on_color != to_color {
        if on_color == color_shared {
            if to_color != color_shared {
                // Mark shared
                // TODO
            }
        } else {
            // Add on-item to remark list
            let adr = remark_list.get(sizeof(ptr))
            @ptrv(adr, ptr) = on
        }
    }
}

fn unlink(from: ptr, item: ptr) {
    let from_color = @ptrv(from, u16, byte_color_rel)
    if from_color >= color_custom {
        let item_color = @ptrv(item, u16, byte_color_rel)
        if from_color == item_color {
            @ptrv(colors.state, u8, item_color) = color_state_unlinked

            let list = check_still_used
            let adr = list.get(sizeof(ptr) * 2)
            @ptrv(adr, ptr) = item
            @ptrv(adr, uint, 1) = item_color
        }
    }
}

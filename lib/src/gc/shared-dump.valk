
use mem

@shared shared_dump: Bump (Bump.new())

fn dump_shared(shared_list: Bump) {
    let bytes = shared_list.index
    if bytes == 0 : return
    mem_shared_lock.lock()
    let dump = shared_dump
    let adr = dump.get(bytes)
    mem:copy(shared_list.data, adr, bytes)
    mem_shared_lock.unlock()
}

fn check_shared_dump() {
    let list = shared_dump
    let data = list.data
    let adr = data
    let end = adr + list.index
    list.reset()

    let mark = shared_mark

    while adr < end {
        let item = @ptrv(adr, ptr)
        let data = (@offset(item, u8, -8)).@cast(GcData)
        adr += size_of(ptr)

        if data.age == mark {
            list.add_ptr(item)
            continue
        }

        // Clear shared item
        // Load data before clear
        let has_vtable = data.has_vtable == 1

        // Clear data
        @ptrv(data, u32) = 0

        let offset = data.block_offset
        if offset > 0 {
            let block = item - offset
            @ptrv(block, uint, 2)-- // Reduce block items-used
            atomic_op(mem_shared - @ptrv(block, uint, 4))

            if has_vtable {
                let vt = data.vtable
                // gc_free
                let ff = @ptrv(vt, ?fnRef(ptr)(), 1)
                if isset(ff) {
                    ff(item)
                }
            }
        }
    }
}

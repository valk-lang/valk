
use core

// shared co_counters : [10_000 x uint]
// @shared co_indexes : Array[u16] (Array[u16].new(32))
// shared co_mutex : core:Mutex[void] (core:Mutex[void].new())
// shared co_next : u16

// fn co_count_index_incr(i: u16) {
//     atomic_op(@ptrv(co_counters, uint, i) + 1)
// }
// fn co_count_index_decr(i: u16) uint {
//     return atomic_op(@ptrv(co_counters, uint, i) - 1) - 1
// }
// fn co_count_set_index_value(i: u16, v: uint) {
//     @ptrv(co_counters, uint, i) = v
// }

// fn co_count_get_index() u16 {
//     if co_indexes.length > 0 {
//         co_mutex.lock()
//         let i = co_indexes.pop_last() !? 0
//         co_mutex.unlock()
//         if i > 0 : return i
//     }
//     let i = atomic_op(co_next + 1)
//     return i + 1
// }

// fn co_count_give_index(i: u16) {
//     co_mutex.lock()
//     co_indexes.push(i)
//     co_mutex.unlock()
// }
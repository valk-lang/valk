
use thread
use core

shared shared_gc: GcShared (GcShared.init())
shared shared_mark: u8 (4)

class GcShared {
    lock: core:Mutex[void] (core:Mutex[void].new())
    local_gcs: Array[GcLocal] (Array[GcLocal].new())

    + static fn init() GcShared {
        let gc = GcShared {
        }
        return gc
    }

    fn add_gc(gc: GcLocal) {
        this.lock.lock()
        this.local_gcs.push(gc)
        this.lock.unlock()
    }
    fn remove_gc(gc: GcLocal) {
        this.lock.lock()
        this.local_gcs.remove_value(gc)
        this.lock.unlock()
    }

    + fn start_loop() {
        thread:Thread.start(GcShared.loop)
    }

    static fn loop() {
        let this = shared_gc
        while true {
            if shared_mark == 4 {
                shared_mark = 8
            } else {
                shared_mark = 4
            }
            this.lock.lock()
            each this.local_gcs => gc {
                gc.update_shared = true
            }
            this.lock.unlock()
            core:sleep_ms(1000)
        }
    }
}


@ignore_access

use core

// Core
@shared lock: core:MutexStruct[void] (@undefined)
@shared gc_list: Array[Gc] (@undefined)
// Marks
@shared mark: u8 (2)
// Shared - Counters
shared mem_shared: uint (0)
shared mem_shared_trigger: uint (mem_minimum_trigger)


fn collect_shared() {

    gc.unlock()
    lock.lock()

    if mark++ > 200 : mark = 2

    let mygc = gc
    let gcs = gc_list

    each gcs as gcx {
        gcx.lock()
    }
    each gcs as gcx {
        gc = gcx
        gcx.collect_shared = true
        gcx.collect()
    }
    each gcs as gcx {
        gc = gcx
        gcx.clear_shared()
    }
    gc = mygc

    if shared_trigger_reached : update_shared_trigger()

    each gcs as gcx {
        gcx.unlock()
    }

    lock.unlock()
    gc.lock()
}

fn update_shared_trigger() {
    let high = mem_shared / 100 * 120 + mem_minimum_trigger
    let low = mem_shared_trigger / 100 * 90
    if low > high : high = low
    mem_shared_trigger = high
}

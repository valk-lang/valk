
@ignore_access

use core

// Core
@shared lock: core:MutexStruct[void] (@undefined)
@shared gc_list: Array[Gc] (@undefined)
// Marks
@shared mark: u8 (2)
// Shared - Counters
shared mem_shared: uint (0)
shared mem_shared_trigger: uint (mem_minimum_trigger)
// Shared - Lists
@shared shared_items: Bump (@undefined)


fn collect_shared() {

    gc.unlock()
    lock.lock()

    if mark++ > 200 : mark = 2

    let gcs = gc_list

    each gcs as gc {
        gc.lock()
    }
    each gcs as gc {
        gc.collect_shared = true
        gc.collect()
    }

    if shared_trigger_reached : update_shared_trigger()

    each gcs as gc {
        gc.unlock()
    }

    lock.unlock()
    gc.lock()
}

fn update_shared_trigger() {
    let high = mem_shared / 100 * 120 + mem_minimum_trigger
    let low = mem_shared_trigger / 100 * 90
    if low > high : high = low
    mem_shared_trigger = high
}

fn clean_shared() {

    lock.lock()

    // TODO - loop list & check if owned or co-owned
    // if so, update age recursive

    // Loop list again and free if mark doesnt match age

    shared_id_last = shared_id
    lock.unlock()
}

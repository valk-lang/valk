
@ignore_access

use thread
use core

@shared shared_mark: u8 (2)

shared mem_shared : uint
shared mem_shared_running : bool (false)
@shared mem_shared_runner_gc : ?Gc (null)
shared mem_shared_trigger : uint (256 * 1024)
shared mem_shared_lock : core:Mutex[void] (core:Mutex[void].new())

value shared_state_idle (0)
value shared_state_mark (1)
value shared_state_clear (2)

@shared gc_list: Array[Gc] (Array[Gc].new())

fn add_gc(gc: Gc) {
    mem_shared_lock.lock()
    gc_list.push(gc)
    mem_shared_lock.unlock()
}
fn remove_gc(gc: Gc) {
    mem_shared_lock.lock()
    gc_list.remove_value(gc)
    mem_shared_lock.unlock()
}

fn mark_shared_globals() {
    #loop globals G T
    #if global_is_shared(G)
    #if is_gc_type(T)
    {
        let g = G
        if g.@cast(?ptr) != null {
            share(g)
        }
    }
    #end
    #end
    #end
}

fn wait_for_shared_gc() {
    if mem_shared_runner_gc != gc {
        gc.mutex.unlock()
        mem_shared_lock.lock()
        mem_shared_lock.unlock()
        gc.mutex.lock()
    }
}

fn collect_shared() {

    let lgc = gc
    let all_gcs = gc_list
    let before_trigger = mem_shared_trigger

    lgc.mutex.unlock()
    mem_shared_lock.lock()

    // Prevent double run
    if mem_shared_trigger != before_trigger {
        lgc.mutex.lock()
        mem_shared_lock.unlock()
        return
    }

    // Run
    mem_shared_running = true
    mem_shared_runner_gc = lgc

    // Change mark
    if shared_mark++ > 200 : shared_mark = 2

    each all_gcs as agc {
        agc.mutex.lock()
    }

    //
    mark_shared_globals()

    // Run all gc's
    each all_gcs as agc {
        gc = agc
        agc.shared_state = shared_state_mark
        agc.shared_update = true
        agc.collect()
    }

    each all_gcs as agc {
        gc = agc
        agc.shared_state = shared_state_clear
        agc.shared_update = true
        agc.collect()
        agc.mutex.unlock()
    }

    // Update trigger point
    let high = mem_shared / 100 * 130 + mem_minimum_trigger
    let high2 = mem_shared_trigger / 100 * 90
    if high2 > high : high = high2
    mem_shared_trigger = high

    // Unlock
    gc = lgc
    mem_shared_runner_gc = null
    mem_shared_running = false
    lgc.mutex.lock()
    mem_shared_lock.unlock()
}

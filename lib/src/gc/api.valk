
value trigger_reached (mem_new > mem_trigger)
value shared_trigger_reached (mem_shared > mem_shared_trigger)

+ fn collect() {
    gc.collect()
}

+ fn collect_if_threshold_reached() {
    if trigger_reached {
        gc.collect()
        if shared_trigger_reached {
            collect_shared()
        }
    }
}

+ fn collect_shared_if_threshold_reached() {
    if shared_trigger_reached {
        collect_shared()
    }
}

+ fn alloc(size: uint) GcPtr {
    if size == 0 : return null.@cast(GcPtr)
    let pool = get_pool_for_size(size)
    let item = pool.get()
    let data = (@offset(item, u8, -8)).@cast(GcData)
    data.propc = 0
    return item.@cast(GcPtr)
}

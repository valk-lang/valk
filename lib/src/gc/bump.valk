
use mem

struct Bump {
    data: ptr
    size: uint
    index: uint (0)

    static fn new() Bump {
        let size : uint = 1000
        return Bump {
            size: size
            data: mem:alloc(size)
        }
    }

    fn get(size: uint) ptr {
        let i = this.index
        let new_i = this.index + size
        while new_i > this.size {
            let size = this.size
            this.data = mem:resized_clone_and_free(this.data, size, size * 2)
            this.size = size * 2
        }
        this.index = new_i
        return this.data + i
    }

    fn minimum_size(size: uint) {
        if size > this.size {
            this.data = mem:resized_clone_and_free(this.data, this.size, size)
            this.size = size
        }
    }

    fn reset() {
        this.index = 0
    }

    fn free() {
        mem:free(this.data)
        mem:free(this)
    }
}

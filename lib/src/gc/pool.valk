
use core
use mem

global poolc: uint
global pools_bump: Bump (@undefined)
global pools: ptr

value POOL_DATA_OFFSET ((sizeof(ptr) * 6))

shared gc_tables: ptr (@undefined)
value GC_TABLE_SIZE (4)
value GC_TABLE_BYTES (GC_TABLE_SIZE * sizeof(ptr))

// Stack item 8 bytes prefix:
// { color: u16, mark: u8, propc: u8, has_vtable: u8, still_used: u8, block_offset: u16 }
// FUTURE: { color: u32, mark: u8, block_index: u8, vtable_index: u16 }
// FUTURE: marks: on-stack, still-used, shared1, shared2

// vtable: mark[T], free[T], share[T], _gc_mark, _gc_free, _gc_share

value byte_color (0)
value byte_block_index (5)

value byte_color_rel (-2)
value byte_mark_rel (-4)
value byte_block_index_rel (-3)
value byte_vtable_index_rel (-1)

value vt_mark (0)
value vt_free (1)
value vt_share (2)
// value vt_mark_hook (3)
value vt_free_hook (3)
// value vt_share_hook (5)

fn pools_init() {
    pools_bump = Bump.new()

    let i : uint = sizeof(ptr)
    let c : uint = 0
    while i <= 16 * sizeof(ptr) {
        let pool = Pool.init(i)
        @ptrv(pools_bump.data, Pool, c) = pool
        i += sizeof(ptr)
        c++
    }
    i = 16 * sizeof(ptr) * 2
    while i <= 4096 {
        let pool = Pool.init(i)
        @ptrv(pools_bump.data, Pool, c) = pool
        i *= 2
        c++
    }

    poolc = c
    pools = pools_bump.data
}

fn reset_pools() {
    let i : uint = 0
    let last = poolc
    while i < last {
        let pool = @ptrv(pools, Pool, i++)
        pool.reset()
    }
}

fn log_pools() {
    println("-----------------")
    let i : uint = 0
    let last = poolc
    while i < last {
        if i > 0 : print(",")
        let pool = @ptrv(pools, Pool, i++)
        let x : String = pool.blockc
        print(x)
    }
    print("\n")
}

struct Pool {
    blockc: uint
    first: ptr
    block: ptr
    index: uint (0)
    isize: uint (0)

    + static fn init(size: uint) Pool {

        let p = Pool {
            isize: size + 8
            first: null @as ptr
            block: null @as ptr
            blockc: 1
        }

        return p
    }

    static fn create_block(size: uint, isize: uint) ptr {
        let max: uint = 65400 / isize
        if max > 248 : max = 248
        if size > max : size = max
        let b = mem:alloc(size * isize + POOL_DATA_OFFSET)
        // Settings
        @ptrv(b, ?ptr, 0) = null // next block
        @ptrv(b, uint, 1) = size // count
        @ptrv(b, uint, 2) = 0 // items used
        @ptrv(b, uint, 3) = 0 // usage percent
        @ptrv(b, uint, 4) = isize // item size
        @ptrv(b, uint, 5) = 0 // block used
        // Set indexes
        let data = b + POOL_DATA_OFFSET
        let i : uint = 0
        while i < size {
            let offset = i * isize
            let item : ptr = data + offset
            @ptrv(item, u64) = 0
            @ptrv(item, u8, byte_block_index) = i @as u8
            i++
        }
        return b
    }

    static fn get_from_pool_index(index: uint, has_free_hook: bool) ptr {
        let pool = @ptrv(pools, Pool, index)
        return pool.get(has_free_hook)
    }

    fn get(has_free_hook: bool) ptr {

        let isize = this.isize
        if this.block == null {
            this.block = Pool.create_block(this.blockc * 2, isize)
            this.first = this.block
        }

        while true {
            let block = this.block
            let index = this.index
            if index == @ptrv(block, uint, 1) {
                this.set_next_block(block)
                continue
            }
            this.index++
            let data = block + POOL_DATA_OFFSET
            let item = data + index * isize

            if @ptrv(item, color_type, byte_color) != color_blank : continue

            // Increase mem usage
            mem_new += isize

            // Add item to box
            let result = item + 8

            if has_free_hook {
                @ptrv(blanks.get(sizeof(ptr)), ptr) = result
            }

            return result
        }
        // println("Failed to allocate memory")
        core:exit(1)
    }

    fn set_next_block(block: ptr) {
        while true {
            let next = @ptrv(block, ?ptr, 0)

            if isset(next) {
                if @ptrv(next, uint, 3) > 90 {
                    block = next
                    continue
                }

                this.set_block(next)
            } else {
                // Create new block
                let blockc = ++this.blockc
                let new = Pool.create_block(blockc * blockc, this.isize)
                // Set next
                @ptrv(block, ptr, 0) = new
                this.set_block(new)
            }
            break
        }

        // GC check
        run_if_threshold_reached()
    }

    fn set_block(block: ptr) {
        this.block = block
        this.index = 0
    }

    fn reset() {
        let block = this.first
        if block == null : return

        let current = this.block
        let isize = this.isize

        let reached_current = false
        let last : ?ptr = null
        let first_empty_block : ?ptr = null
        let last_empty_block : ?ptr = null

        while block != null {
            let b = block
            let next = @ptrv(b, ptr, 0)
            let total = @ptrv(b, uint, 1)
            let used = @ptrv(b, uint, 2)

            @ptrv(b, ?ptr, 0) = null // clear next

            //
            if used == 0 {
                // Empty blocks
                if reached_current == false {
                    @ptrv(b, uint, 3) = 0 // Set percent used
                    if isset(last_empty_block) {
                        @ptrv(last_empty_block, ptr, 0) = b
                        last_empty_block = b
                    } else {
                        first_empty_block = b
                        last_empty_block = b
                    }
                } else {
                    mem:free(b)
                    this.blockc--
                }
            } else {
                // Update usage percent
                @ptrv(b, uint, 3) = used * 100 / total
                //
                if isset(last) : @ptrv(last, ptr, 0) = b
                else : this.first = b
                last = b
            }
            if b == current : reached_current = true
            block = next
        }

        if isset(first_empty_block) {
            if isset(last)  {
                @ptrv(last, ptr, 0) = first_empty_block
            } else {
                this.first = first_empty_block
            }
        } else {
            if isset(last)  {
                @ptrv(last, ?ptr, 0) = null
            }
        }

        this.set_block(this.first)
    }
}

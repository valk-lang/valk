
use core
use mem

global poolc: uint
global pools: [128 x ptr]

~ global mem_usage_thread : uint
~ shared mem_usage_shared : uint
~ shared mem_usage_peak : uint

value POOL_DATA_OFFSET ((size_of(ptr) * 6.to(uint)))

value in_list_disconnected (1)
value in_list_reconnect (2)
value in_list_blanks (4)

fn pools_init() {
    let list = pools
    mem:clear(list, 128 * size_of(ptr))

    let i : uint = size_of(ptr)
    let c : uint = 0
    let until : uint = 16 * size_of(ptr)
    while i <= until {
        let pool = Pool.init(i)
        @ptrv(list, Pool, c) = pool
        i += size_of(ptr)
        c++
    }
    i = 16 * size_of(ptr) * 2
    while i <= 2147483648 {
        let pool = Pool.init(i)
        @ptrv(list, Pool, c) = pool
        i *= 2
        c++
    }

    poolc = c
}

fn get_pool_for_size(size: uint) Pool {
    let until : uint = 16 * size_of(ptr)
    if size <= until {
        let index = size / size_of(ptr)
        if index * size_of(ptr) == size : index--
        return get_pool(index, size)
    }
    let i : uint = 16
    let isize = until * 2
    while isize < size {
        i++
        isize *= 2
    }
    return get_pool(i, isize)
}

fn get_pool(i: uint, size: uint) Pool {
    let pool = @ptrv(pools, ?Pool, i)
    if isset(pool) : return pool
    pool = Pool.init(size)
    @ptrv(pools, Pool, i) = pool
    return pool
}

fn reset_pools() {
    let i : uint = 0
    let last = poolc
    while i < last {
        let pool = @ptrv(pools, Pool, i++)
        pool.reset()
    }
}

fn log_pools() {
    println("-----------------")
    let i : uint = 0
    let last = poolc
    while i < last {
        if i > 0 : print(",")
        let pool = @ptrv(pools, Pool, i++)
        let x : String = pool.blockc
        print(x)
    }
    print("\n")
}

struct Pool {
    blockc: uint
    first: ptr
    block: ptr
    index: uint (0)
    last: uint (0)
    isize: uint (0)

    + static fn init(size: uint) Pool {

        let p = Pool {
            isize: size + 8
            first: null.@cast(ptr)
            block: null.@cast(ptr)
            blockc: 1
        }

        return p
    }

    static fn create_block(size: uint, isize: uint) ptr {
        let max: uint = 65400 / isize
        if max > 248 : max = 248
        if size > max : size = max
        if size == 0 : size = 1
        let b = mem:alloc(size * isize + POOL_DATA_OFFSET)
        // Settings
        @ptrv(b, ?ptr, 0) = null // next block
        @ptrv(b, uint, 1) = size // count
        @ptrv(b, uint, 2) = 0 // items used
        @ptrv(b, uint, 3) = 0 // usage percent
        @ptrv(b, uint, 4) = isize // item size
        @ptrv(b, uint, 5) = -1 // Unused marks
        // Set indexes
        let data = b + POOL_DATA_OFFSET
        let base_offset = POOL_DATA_OFFSET + 8
        let i : uint = 0
        while i < size {
            let offset = i * isize
            let item : ptr = data + offset
            @ptrv(item, u64) = 0
            @ptrv(item, u16, 3) = (offset + base_offset).@cast(u16)
            i++
        }
        // Track memory usage
        let add = size * isize
        mem_usage_thread += add
        let before = atomic_op(mem_usage_shared + add)
        let usage = before + add
        if usage > mem_usage_peak : mem_usage_peak = usage
        //
        return b
    }

    fn get_vtable() ptr $hot {
        let item = this.get()
        let data = (@offset(item, u8, -8)).@cast(GcData)
        data.has_vtable = 1
        @ptrv(blanks.get(size_of(ptr)), ptr) = item
        return item
    }

    fn get() ptr $hot {

        let isize = this.isize
        if this.block == null {
            let block = Pool.create_block(this.blockc * 2, isize)
            this.first = block
            this.set_block(block)
        }

        let index = this.index
        let last = this.last
        while true {
            if index == last {
                this.set_next_block(this.block)
                index = 0
                last = this.last
                continue
            }

            let item = this.block + POOL_DATA_OFFSET + (index * isize)
            index = index + 1

            let data = item.@cast(GcData)
            if data.state != state_new : continue
            this.index = index

            // Increase mem usage
            mem_new += isize

            return item + 8
        }

        panic("Failed to allocate memory")
    }

    fn set_next_block(block: ptr) {
        while true {
            let next = @ptrv(block, ?ptr, 0)

            if isset(next) {
                if @ptrv(next, uint, 3) > 90 {
                    block = next
                    continue
                }

                this.set_block(next)
            } else {
                // Create new block
                let blockc = ++this.blockc
                let new = Pool.create_block(blockc * blockc, this.isize)
                // Set next
                @ptrv(block, ptr, 0) = new
                this.set_block(new)
            }
            break
        }

        // GC check
        run_if_threshold_reached()
    }

    fn set_block(block: ptr) {
        this.block = block
        this.index = 0
        this.last = @ptrv(block, uint, 1)
    }

    fn reset() {
        let block = this.first
        if block == null : return

        let current = this.block
        let isize = this.isize

        let reached_current = false
        let last : ?ptr = null
        let first_empty_block : ?ptr = null
        let last_empty_block : ?ptr = null

        while block != null {
            let b = block
            let next = @ptrv(b, ptr, 0)
            let total = @ptrv(b, uint, 1)
            let used = @ptrv(b, uint, 2)

            @ptrv(b, ?ptr, 0) = null // clear next

            //
            if used == 0 {
                // Empty blocks
                if reached_current == false {
                    @ptrv(b, uint, 3) = 0 // Set percent used
                    if isset(last_empty_block) {
                        @ptrv(last_empty_block, ptr, 0) = b
                        last_empty_block = b
                    } else {
                        first_empty_block = b
                        last_empty_block = b
                    }
                } else {
                    mem_usage_thread -= total * isize
                    atomic_op(mem_usage_shared - total * isize)
                    mem:free(b)
                    this.blockc--
                }
            } else {
                // Update usage percent
                @ptrv(b, uint, 3) = used * 100 / total
                // Track
                // mem_marked += used * isize
                //
                if isset(last) : @ptrv(last, ptr, 0) = b
                else : this.first = b
                last = b
            }
            if b == current : reached_current = true
            block = next
        }

        if isset(first_empty_block) {
            if isset(last)  {
                @ptrv(last, ptr, 0) = first_empty_block
            } else {
                this.first = first_empty_block
            }
        } else {
            if isset(last)  {
                @ptrv(last, ?ptr, 0) = null
            }
        }

        this.set_block(this.first)
    }
}


global mark_list : Lifo (@undefined)

fn mark_used(item: ptr) $hot {

    let ml = mark_list
    ml.add(item)

    while true {
        let item = ml.pop() ! break

        let data = (@offset(item, u8, -8)).@cast(GcData)

        let state = data.state
        data.state = state_used

        // Increase block counter
        if state == state_new {
            // New item
            let offset = data.block_offset
            if offset > 0 {
                let block = item - offset
                @ptrv(block, uint, 2)++ // Increase block items-used
                mem_marked += @ptrv(block, uint, 4)
            }
        }

        // Props
        let has_vtable = data.has_vtable == 1
        let propc = data.propc
        if propc > 0 {
            // Mark properties
            let reconnect = false
            let prop_base = item + size_of(ptr) * has_vtable.@cast(uint)
            while propc-- > 0 {
                let sub = @ptrv(prop_base, ?ptr, propc)
                if isset(sub) && (sub & 1 == 0) {
                    let sub_data = (@offset(sub, u8, -8)).@cast(GcData)
                    if sub_data.state < state_used {
                        // Connect
                        @ptrv(prop_base, ?ptr, propc) = sub | 1
                        ml.add(sub)
                    } else {
                        // If already connected or is shared
                        // Add to reconnect_list
                        reconnect = true
                    }
                }
            }
            if reconnect {
                let in_list = data.in_list
                if in_list & in_list_reconnect == 0 {
                    data.in_list = in_list | in_list_reconnect
                    let adr = reconnect_list.get(size_of(ptr))
                    @ptrv(adr, ptr) = item
                }
            }
        }

        // Call hook gc_action
        if has_vtable {
            let vt = data.vtable
            let func = @ptrv(vt, ?fnRef(ptr, fnRef(ptr, ptr)())(), 0)
            if isset(func) {
                func(item, property_mark)
            }
        }
    }
}

fn disconnect_rec(item: ptr) $hot {

    let ml = mark_list
    ml.add(item)

    while true {
        let item = ml.pop() ! break
        let data = (@offset(item, u8, -8)).@cast(GcData)

        let has_vtable = data.has_vtable == 1
        let propc = data.propc
        let offset = data.block_offset

        if offset > 0 {
            let block = item - offset
            @ptrv(block, uint, 2)-- // Reduce block items-used
            mem_marked -= @ptrv(block, uint, 4)
        }

        data.state = state_new

        // Props
        if propc > 0 {
            // Mark properties
            let prop_base = item + size_of(ptr) * has_vtable.@cast(uint)
            while propc-- > 0 {
                let sub = @ptrv(prop_base, ptr, propc)
                if sub & 1 == 1 {
                    let sub_item : ptr = sub & -2.to(uint)
                    @ptrv(prop_base, ?ptr, propc) = sub_item

                    let sub_data = (@offset(sub_item, u8, -8)).@cast(GcData)
                    if sub_data.state < state_shared_unused {
                        ml.add(sub_item)
                    } else {
                        sub_data.state--
                    }
                }
            }
        }

        // Call hook gc_action
        if has_vtable {
            let vt = data.vtable
            let func = @ptrv(vt, ?fnRef(ptr, fnRef(ptr, ptr)())(), 0)
            if isset(func) {
                func(item, property_disconnect)
            }

            let in_list = data.in_list
            if in_list & in_list_blanks == 0 {
                data.in_list = in_list | in_list_blanks

                let adr = blanks.get(size_of(ptr))
                @ptrv(adr, ptr) = item
            }
        }
    }

    return
}

fn free_blank(item: ptr) $hot {
    let data = (@offset(item, u8, -8)).@cast(GcData)
    if data.state != state_new : return
    data.has_vtable = 0
    let vt = data.vtable
    let func = @ptrv(vt, ?fnRef(ptr)(), 1)
    if isset(func) {
        func(item)
    }
}

fn share_null_check(item: ?ptr) {
    if !isset(item) : return
    share(item)
}

fn share(item: ptr) {

    let ml = mark_list
    ml.add(item)

    while true {
        let item = ml.pop() ! break

        let data = (@offset(item, u8, -8)).@cast(GcData)
        if data.age == shared_mark : continue

        let state = data.state
        data.age = shared_mark

        if state < state_shared_unused {
            let is_new = state == state_new
            data.state = state + 2 + (1 * is_new.@cast(u8))

            shared_items.add_ptr(item)

            // Increase block counter
            if is_new {
                // New item
                let offset = data.block_offset
                if offset > 0 {
                    let block = item - offset
                    @ptrv(block, uint, 2)++ // Increase block items-used
                    mem_marked += @ptrv(block, uint, 4)
                }
            }
        }

        // Props
        let has_vtable = data.has_vtable == 1
        let propc = data.propc
        if propc > 0 {
            // Mark properties
            let prop_base = item + size_of(ptr) * has_vtable.@cast(uint)
            while propc-- > 0 {
                let sub = @ptrv(prop_base, ?ptr, propc)
                if isset(sub) {
                    ml.add(sub & -2.to(uint))
                }
            }
        }

        // Call hook gc_action
        if has_vtable {
            let vt = data.vtable
            let func = @ptrv(vt, ?fnRef(ptr, fnRef(ptr, ptr)())(), 0)
            if isset(func) {
                func(item, property_share)
            }
        }
    }
}

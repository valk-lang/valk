
global mark_list : PtrRing (@undefined)

fn mark(item: ptr, color: color_type) $hot {

    let ml = mark_list
    ml.add(item)

    while true {
        let item = ml.pop() ! break

        let data = (@ptr_offset(item, -8)) @as GcData
        let item_color = data.color

        // Check if we need to mark this item
        if item_color == color : continue
        if @ptrv(color_state, u8, item_color) == color_state_used {
            color_disable_after = true
            if item_color == color_shared && local_gc.update_shared {
                share(item)
            }
            continue
        }

        // Increase block counter
        if item_color == color_blank {
            let offset = data.block_offset
            if offset > 0 {
                let block = item - offset
                @ptrv(block, uint, 2)++ // Increase block items-used
                mem_marked += @ptrv(block, uint, 4)
            }
        }

        // Set new color
        data.color = color

        // Props
        let mark_ = data.mark
        let has_vtable = (mark_ & mark_bit_has_vtable) != 0
        let propc = data.propc
        if propc > 0 {
            // Mark properties
            let prop_base = item + (has_vtable ? sizeof(ptr) : 0)
            while propc-- > 0 {
                let sub = @ptrv(prop_base, ?ptr, propc)
                if isset(sub) {
                    ml.add(sub)
                }
            }
        }

        // Call hook
        if has_vtable {
            let vt = data.vtable
            let func = @ptrv(vt, ?fn(ptr, color_type)(), 0)
            if isset(func) {
                func(item, color)
            }
        }
    }
}

fn free_blank(item: ptr) $hot {
    let data = (@ptr_offset(item, -8)) @as GcData
    if data.color != color_blank : return
    let vt = data.vtable
    let func = @ptrv(vt, ?fn(ptr)(), 2)
    if isset(func) {
        func(item)
    }
}

fn free(item: ptr) $hot {

    let ml = mark_list
    ml.add(item)

    while true {
        let item = ml.pop() ! break

        let data = (@ptr_offset(item, -8)) @as GcData
        let item_color = data.color

        if item_color == color_blank : return
        if @ptrv(color_state, u8, item_color) == color_state_used : return
    
        data.color = color_blank

        let offset = data.block_offset
        if offset > 0 {
            let block = item - offset
            @ptrv(block, uint, 2)-- // Reduce block items-used
            mem_marked -= @ptrv(block, uint, 4)
        }

        let mark_ = data.mark
        let propc = data.propc
        let has_vtable = (mark_ & mark_bit_has_vtable) != 0
        if propc > 0 {
            // Mark properties
            let prop_base = item + (has_vtable ? sizeof(ptr) : 0)
            while propc-- > 0 {
                let sub = @ptrv(prop_base, ?ptr, propc)
                if isset(sub) {
                    ml.add(sub)
                }
            }
        }

        if has_vtable {
            let vt = data.vtable

            // _gc_free_properties
            let f1 = @ptrv(vt, ?fn(ptr)(), 1)
            if isset(f1) {
                f1(item)
            }

            if offset > 0 {
                // _gc_free
                let f2 = @ptrv(vt, ?fn(ptr)(), 2)
                if isset(f2) {
                    f2(item)
                }
            }
        }
    }
}

fn share_null_check(item: ?ptr) {
    if !isset(item) : return
    share(item)
}

fn share(item: ptr) {

    let data = (@ptr_offset(item, -8)) @as GcData
    let item_color = data.color
    let mark_ = data.mark

    if item_color == color_shared {
        if mark_ & shared_mark != shared_mark {
            data.mark = (mark_ & 249) | shared_mark
        }
        return
    }

    data.color = color_shared
    data.mark = (mark_ & 249) | shared_mark

    if item_color == color_blank {
        let offset = data.block_offset
        if offset > 0 {
            let block = item - offset
            @ptrv(block, uint, 2)++ // Increase block items-used
            mem_marked += @ptrv(block, uint, 4)
        }
    }

    let has_vtable = (mark_ & mark_bit_has_vtable) != 0
    let propc = data.propc
    if propc > 0 {
        // Mark properties
        let prop_base = item + (has_vtable ? sizeof(ptr) : 0)
        while propc-- > 0 {
            let sub = @ptrv(prop_base, ?ptr, propc)
            if isset(sub) {
                share(sub)
            }
        }
    }

    if has_vtable {
        let vt = data.vtable
        let func = @ptrv(vt, ?fn(ptr)(), 3)
        if isset(func) {
            func(item)
        }
    }
}


use core

fn adjust_block(block: ptr, used: bool, gc: GcLocal) {
    if used {
        @ptrv(block, uint, 2)++
        gc.mem_marked += @ptrv(block, uint, 4)

        if gc.mem_marked > 1024 * 1024 * 20 {
            println("TOO")
            print("marked: ")
            gc.mem_marked.print(10)
            print(".")
            exit(1)
        }
    } else {
        @ptrv(block, uint, 2)--
        let b = gc.mem_marked
        gc.mem_marked -= @ptrv(block, uint, 4)
        if gc.mem_marked > b {
            println("BAD")
            exit(1)
        }
    }
}

fn increase_block(item: ptr, gc: GcLocal) $hot {
    let data = (@offset(item, u8, -8)).@cast(GcData)
    let offset = data.block_offset
    if offset > 0 {
        let block = item - offset
        adjust_block(block, true, gc)
    }
}

fn mark_used(item: ptr) $hot {

    let gc = local_gc
    let ml = gc.mark_list
    ml.add(item)

    while true {
        let item = ml.pop() ! break

        let data = (@offset(item, u8, -8)).@cast(GcData)

        let state = data.state
        data.state = state_used

        // Increase block counter
        if state == state_new {
            // New item
            let offset = data.block_offset
            if offset > 0 {
                let block = item - offset
                adjust_block(block, true, gc)
            }
        }

        // Props
        let has_vtable = data.has_vtable == 1
        let propc = data.propc
        if propc > 0 {
            // Mark properties
            let reconnect = false
            let prop_base = item + size_of(ptr) * has_vtable.@cast(uint)
            while propc-- > 0 {
                let sub = @ptrv(prop_base, ?ptr, propc)
                if isset(sub) && (sub & 1 == 0) {
                    let sub_data = (@offset(sub, u8, -8)).@cast(GcData)
                    if sub_data.state < state_used {
                        // Connect
                        @ptrv(prop_base, ?ptr, propc) = sub | 1
                        if sub_data.state == state_new : increase_block(sub, gc)
                        sub_data.state = state_used
                        // Mark sub properties
                        ml.add(sub)
                    } else {
                        // If already connected or is shared
                        // Add to reconnect_list
                        reconnect = true
                    }
                }
            }
            if reconnect {
                let in_list = data.in_list
                if in_list & in_list_reconnect == 0 {
                    data.in_list = in_list | in_list_reconnect
                    let adr = gc.reconnect_list.get(size_of(ptr))
                    @ptrv(adr, ptr) = item
                }
            }
        }

        // Call hook gc_action
        if has_vtable {
            let vt = data.vtable
            let func = @ptrv(vt, ?fnRef(ptr, fnRef(ptr, ptr)())(), 0)
            if isset(func) {
                func(item, property_mark)
            }
        }
    }
}

fn disconnect_rec(item: ptr) $hot {

    let gc = local_gc
    let ml = gc.mark_list
    ml.add(item)

    while true {
        let item = ml.pop() ! break
        let data = (@offset(item, u8, -8)).@cast(GcData)

        let has_vtable = data.has_vtable == 1
        let propc = data.propc
        let offset = data.block_offset

        if offset > 0 {
            let block = item - offset
            adjust_block(block, false, gc)
        }

        data.state = state_new

        // Props
        if propc > 0 {
            // Mark properties
            let prop_base = item + size_of(ptr) * has_vtable.@cast(uint)
            while propc-- > 0 {
                let sub = @ptrv(prop_base, ptr, propc)
                if sub & 1 == 1 {
                    let sub_item : ptr = sub & -2.to(uint)
                    @ptrv(prop_base, ?ptr, propc) = sub_item

                    let sub_data = (@offset(sub_item, u8, -8)).@cast(GcData)
                    if sub_data.state < state_shared_unused {
                        ml.add(sub_item)
                    } else {
                        sub_data.state--
                    }
                }
            }
        }

        // Call hook gc_action
        if has_vtable {
            let vt = data.vtable
            let func = @ptrv(vt, ?fnRef(ptr, fnRef(ptr, ptr)())(), 0)
            if isset(func) {
                func(item, property_disconnect)
            }

            let in_list = data.in_list
            if in_list & in_list_blanks == 0 {
                data.in_list = in_list | in_list_blanks

                let adr = gc.blanks.get(size_of(ptr))
                @ptrv(adr, ptr) = item
            }
        }
    }

    return
}

fn free_blank(item: ptr) $hot {
    let data = (@offset(item, u8, -8)).@cast(GcData)
    if data.state != state_new : return
    data.has_vtable = 0
    let vt = data.vtable
    let func = @ptrv(vt, ?fnRef(ptr)(), 1)
    if isset(func) {
        func(item)
    }
}

fn share_null_check(item: ?ptr) {
    if !isset(item) : return
    share(item)
}

fn share(item: ptr) {

    let gc = local_gc
    let ml = gc.mark_list
    let i = ml.index
    ml.add(item)

    while true {
        if ml.index == i : break
        let item = ml.pop() ! break

        let data = (@offset(item, u8, -8)).@cast(GcData)
        if data.age == shared_mark : continue

        let state = data.state

        data.age = shared_mark

        if state < state_shared_unused {
            let is_new = state == state_new
            data.state = state + 2 + (is_new.@cast(u8))

            let offset = data.block_offset
            let block = item - offset

            local_gc.shared_items.add_ptr(item)

            // Increase block counter
            if offset > 0 {
                atomic_op(mem_shared + @ptrv(block, uint, 4))
                if is_new {
                    @ptrv(block, uint, 2)++
                } else {
                    gc.mem_marked -= @ptrv(block, uint, 4)
        // let b = local_gc.mem_marked
        // gc.mem_marked -= @ptrv(block, uint, 4)
        // if gc.mem_marked > b {
        //     println("BAD:")
        //     @ptrv(block, uint, 4).print(10)
        //     print(" < isize\n")
        //     b.print(10)
        //     print(" < before\n")
        //     gc.mem_marked.print(10)
        //     print(" < after\n")
        //     exit(1)
        // }
                }
            }
        }

        // Props
        let has_vtable = data.has_vtable == 1
        let propc = data.propc
        if propc > 0 {
            // Mark properties
            let prop_base = item + size_of(ptr) * has_vtable.@cast(uint)
            while propc-- > 0 {
                let sub = @ptrv(prop_base, ?ptr, propc)
                if isset(sub) {
                    if sub & 1 == 1 {
                        sub = sub - 1
                        @ptrv(prop_base, ptr, propc) = sub
                        let data = (@offset(sub, u8, -8)).@cast(GcData)
                        data.state--
                    }
                    ml.add(sub)
                }
            }
        }

        // Call hook gc_action
        if has_vtable {
            let vt = data.vtable
            let func = @ptrv(vt, ?fnRef(ptr, fnRef(ptr, ptr)())(), 0)
            if isset(func) {
                func(item, property_share)
            }
        }
    }

    if mem_shared > mem_shared_trigger && !mem_shared_running && mem_shared_trigger > 0 {
        run_shared_gc()
    }
}

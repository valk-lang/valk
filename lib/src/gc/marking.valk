

fn mark(item: ptr, color: color_type) {

    let item_color = @ptrv(item, color_type, byte_color_rel)
    if item_color == color : return
    if @ptrv(color_state, u8, item_color) == color_state_used {
        if item_color >= color_custom {
            color_disable_after = true
        }
        return
    }

    // if item_color == color_blank {
    //     let offset = @ptrv(item, u16, -1) @as uint
    //     let block = item - offset - 8
    //     @ptrv(block, uint, 2)++ // Increase block items-used
    // }

    @ptrv(item, color_type, byte_color_rel) = color

    // 
    let has_vtable = (@ptrv(item, u8, byte_settings_rel) & 1) == 1
    let propc = @ptrv(item, u8, byte_propc_rel)
    if propc > 0 {
        // Mark properties
        let prop_base = item + (has_vtable ? sizeof(ptr) : 0)
        while propc-- > 0 {
            let sub = @ptrv(prop_base, ?ptr, propc)
            if isset(sub) {
                mark(sub, color)
            }
        }
    }

    if has_vtable {
        let vt = @ptrv(item, ptr, 0)
        let func = @ptrv(vt, ?fn(ptr, color_type)(), 0)
        if isset(func) {
            func(item, color)
        }
    }
}

global acount : uint (0)
global fcount : uint (0)

fn free_item(item: ptr) {
    let has_vtable = (@ptrv(item, u8, byte_settings_rel) & 1) == 1

    let item_color = @ptrv(item, color_type, byte_color_rel)

    let offset = @ptrv(item, u16, -1) @as uint
    let block = item - offset - 8
    mem_new -= @ptrv(block, uint, 4)

    // if item_color != color_blank {
        @ptrv(item, color_type, byte_color_rel) = color_blank
        @ptrv(block, uint, 2)-- // Reduce block items-used
    // }

    if has_vtable {
        let vt = @ptrv(item, ptr, 0)
        let func = @ptrv(vt, ?fn(ptr)(), 2)
        if isset(func) {
            func(item)
        }
    }
}

fn share(item: ptr) {

    if @ptrv(item, color_type, byte_color_rel) == color_shared : return
    @ptrv(item, color_type, byte_color_rel) = color_shared

    let has_vtable = (@ptrv(item, u8, byte_settings_rel) & 1) == 1
    let propc = @ptrv(item, u8, byte_propc_rel)
    if propc > 0 {
        // Mark properties
        let prop_base = item + (has_vtable ? sizeof(ptr) : 0)
        while propc-- > 0 {
            let sub = @ptrv(prop_base, ?ptr, propc)
            if isset(sub) {
                share(sub)
            }
        }
    }

    if has_vtable {
        let vt = @ptrv(item, ptr, 0)
        let func = @ptrv(vt, ?fn(ptr)(), 3)
        if isset(func) {
            func(item)
        }
    }
}


use core

fn adjust_block(block: ptr, used: bool) {
    if used {
        @ptrv(block, uint, 2)++
        atomic_op(mem_marked + @ptrv(block, uint, 4))
    } else {
        @ptrv(block, uint, 2)--
        atomic_op(mem_marked - @ptrv(block, uint, 4))
    }
}

fn increase_block(item: ptr) $hot {
    let data = (@offset(item, u8, -8)).@cast(GcData)
    let offset = data.block_offset
    if offset > 0 {
        let block = item - offset
        adjust_block(block, true)
    }
}

fn mark_used(item: ?ptr) $hot {

    let ml = mark_list
    if isset(item) : ml.add(item)

    while true {
        let item = ml.pop() ! break

        let data = (@offset(item, u8, -8)).@cast(GcData)
            // if data.is_still_co_owned() : panic("STILL COO (2)")

        let state = data.state
        data.state = state_used

        // Increase block counter
        if state == state_new {
            // New item
            let offset = data.block_offset
            if offset > 0 {
                let block = item - offset
                adjust_block(block, true)
            }
        }

        // Props
        let has_vtable = data.has_vtable()
        let propc = data.propc
        if propc > 0 {
            // Mark properties
            let prop_base = item + size_of(ptr) * has_vtable.@cast(uint)
            while propc-- > 0 {
                let sub = @ptrv(prop_base, ?GcItem, propc)
                if isset(sub) && (sub & 3 == 0) {
                    let sub_data = sub.data()
                    if sub_data.state < state_used {
                        // Own
                        @ptrv(prop_base, ?ptr, propc) = sub | 1
                        if sub_data.state == state_new : increase_block(sub)
                        sub_data.state = state_used
                        // Mark sub properties
                        ml.add(sub)
                    } else {
                        // Co-own
                        @ptrv(prop_base, ?ptr, propc) = sub | 2
                        sub_data.co_own()
                    }
                }
            }
        }

        // Call hook gc_action
        if has_vtable {
            let vt = data.vtable
            let func = @ptrv(vt, ?fnRef(ptr, fnRef(ptr, ptr)())(), 0)
            if isset(func) {
                func(item, property_mark)
            }
        }
    }
}

fn free_blank(item: ptr) $hot {
    let data = (@offset(item, u8, -8)).@cast(GcData)
    if data.state != state_new : return
    data.remove_has_vtable()
    let vt = data.vtable
    let func = @ptrv(vt, ?fnRef(ptr)(), 1)
    if isset(func) {
        func(item)
    }
}

fn share_null_check(item: ?ptr) {
}

fn dis_own_rec(item: ptr) {

    let ml = mark_list
    ml.add(item)

    while true {
        let item = (ml.pop() ! break).@cast(GcItem)
        let data = item.data()

        let offset = data.block_offset

        if offset > 0 {
            let block = item - offset
            adjust_block(block, false)
        }

        data.state = state_new
        if data.co_count > 0 {
            re_own_list.add_ptr(item)
        }

        // Props
        let has_vtable = data.has_vtable()
        let propc = data.propc
        if propc > 0 {
            // Mark properties
            let prop_base = item + size_of(ptr) * has_vtable.@cast(uint)
            while propc-- > 0 {
                let sub = @ptrv(prop_base, ?GcItem, propc)
                if isset(sub) {
                    // if sub & 3 == 3 : panic("IS3")
                    if sub & 1 == 1 {
                        sub = sub - 1
                        @ptrv(prop_base, ptr, propc) = sub
                        ml.add(sub)
                    } else if sub & 2 == 2 {
                        sub = sub - 2
                        @ptrv(prop_base, ptr, propc) = sub
                        sub.data().dis_co_own()
                    }
                }
            }
        }

        // Call hook gc_action
        if has_vtable {
            let vt = data.vtable
            let func = @ptrv(vt, ?fnRef(ptr, fnRef(ptr, ptr)())(), 0)
            if isset(func) {
                func(item, property_dis_own)
            }
            if !data.is_in_blanks() {
                data.set_in_blanks()
                thread.blanks.add_ptr(item)
            }
        }
    }
}



+ fn run() {
    local_gc.run()
}

+ fn run_if_threshold_reached() {
    if mem_new > mem_trigger || local_gc.shared_update {
        local_gc.run()
    }
}

+ fn run_if_threshold_almost_reached() {
    if mem_new > mem_suggestion || local_gc.shared_update {
        local_gc.run()
    }
}
// pub.pkg
fn shutdown() {
    local_gc.shutdown()
}


+ fn alloc(size: uint) GcPtr {
    let until : uint = 16 * size_of(ptr)
    if size <= until {
        let pool = get_pool(size / size_of(ptr) - 1, size)
    // println(size + " <> P: " + pool.isize)
        let item = pool.get()
        let data = (@offset(item, u8, -8)) @as GcData
        data.propc = 0
        return item @as GcPtr
    }
    let i : uint = 16
    let isize = until * 2
    while isize < size {
        i++
        isize *= 2
    }
    let pool = get_pool(i, isize)
    // println(size + " <> P: " + pool.isize)
    let item = pool.get()
    let data = (@offset(item, u8, -8)) @as GcData
    data.propc = 0
    return item @as GcPtr
}


use mem

value BOX_COUNT (5)
value BOX_DEFAULT (250)

global box_current: u8 (@undefined)
global box_insert: u8 (@undefined)
global boxes: ptr (@undefined)

fn boxes_init() {

    box_current = 0
    box_insert = 1

    let bb = mem:alloc(BOX_COUNT * sizeof(ptr))
    boxes = bb
    let i : uint = BOX_COUNT
    while i-- > 0 {
        @ptrv(bb, ptr, i) = Bump.new()
    }
}

fn box_insert_item(box: u8, item: ptr) {
    @ptrv(item, u8, byte_box) = box
    let b = @ptrv(boxes, Bump, box)
    b.add_ptr(item)
}

fn box_get(box: u8) Bump {
    return @ptrv(boxes, Bump, box)
}

fn log_boxes() {
    let bb = boxes
    let i : uint = 0
    let total : uint = 0
    while i < BOX_COUNT {
        print(">")
        let box = @ptrv(bb, Bump, i++)
        let itemc = box.index / sizeof(ptr)
        itemc.print(10)
        total += box.size
    }
    print(" | Total: ")
    print(total / (1024 * 1024))
    print("MB\n")
}

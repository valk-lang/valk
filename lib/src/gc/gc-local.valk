
use coro

global local_gc : GcLocal (@undefined)

global stack_main : Stack (@undefined)
global stack_active : Stack (@undefined)

global mem_new : uint
global mem_trigger : uint
global mem_suggestion : uint
global mem_marked : uint

value mem_minimum_trigger (8192)

global local_age: u8 (1)

fn update_usage() {
    // Calculate mem usage
    if mem_new > mem_trigger : gc()
}

+ fn gc() {
    local_gc.gc()
}

+ fn gc_suggestion() {
    if mem_new > mem_suggestion {
        local_gc.gc()
    }
}

struct GcLocal {
    globals: Bump (Bump.new())
    update_shared: bool (true)

    + static fn init() GcLocal {

        stack_main = Stack.new()
        stack_active = stack_main

        pools_init()

        mem_trigger = mem_minimum_trigger
        mem_suggestion = mem_minimum_trigger

        let gcl = GcLocal {
        }
        local_gc = gcl

        // TODO: Add gc to gc list for the shared gc

        return gcl
    }

    fn add_global(ref: ptr) {
        let adr = this.globals.get(sizeof(ptr))
        @ptrv(adr, ptr) = ref
    }

    fn gc() {
        // this.lock.lock()
        print("-")

        this.mark_on_stack(1)

        let max = mem_trigger / 100 * 90 // reduce 10%
        let current_usage = mem_marked + mem_minimum_trigger
        let max_marked = current_usage / 100 * 130 // increase 30%
        if max_marked > max : max = max_marked
        mem_trigger = max
        mem_suggestion = current_usage / 10 * 11
        mem_new = mem_marked

        reset_pools()

        if this.update_shared {
            // this.mark_shared()
            this.update_shared = false
        }

        // Mark shared
        // if shared_age != this.shared_age {
        //     let age = shared_age
        //     this.mark_stack_shared_age(age)
        //     this.shared_age = age
        // }

        // this.lock.unlock()
        // print(".")
    }

    fn mark_on_stack(val: u8) {

        // Globals
        let g_adr = this.globals.data
        let g_end_adr = g_adr + this.globals.index
        while g_adr < g_end_adr {
            let ref = @ptrv(g_adr, ptr)
            let item = @ptrv(ref, ptr)
            if item != null {
                // TODO
            }
            g_adr += sizeof(ptr)
        }

        // Stack
        let stack = stack_main
        let adr = stack.base
        let top = stack.adr
        while adr < top {
            let item = @ptrv(adr, ptr, 0)
            if item != null {
                // TODO
            }
            adr += sizeof(ptr)
        }

        each coro:g_coros => coro {
            if isset(coro) {
                let adr = coro.stack.base
                let top = coro.stack.adr
                while adr < top {
                    let item = @ptrv(adr, ptr)
                    if item != null {
                        // TODO
                    }
                    adr += sizeof(ptr)
                }
            }
        }
    }

    // fn mark_shared() {
    //     let age = share_age

    //     // Globals
    //     let g_adr = this.globals.data
    //     let g_end_adr = g_adr + this.globals.index
    //     while g_adr < g_end_adr {
    //         let ref = @ptrv(g_adr, ptr)
    //         let item = @ptrv(ref, ptr)
    //         if item != null {
    //             if @ptrv(item, u8, byte_shared_age_rel) != age {
    //                 let vti = @ptrv(item, u16, -1)
    //                 if vti > 0 {
    //                     let update = @ptrv(vtable, fn(ptr, u16)(), vti @as uint * VTABLE_COLS + VTABLE_COL_UPDATE_AGE)
    //                     update(item, age)
    //                 }
    //             }
    //         }
    //         g_adr += sizeof(ptr)
    //     }

    //     // Stack
    //     let stack = stack_main
    //     let adr = stack.base
    //     let top = stack.adr
    //     while adr < top {
    //         let item = @ptrv(adr, ptr, 0)
    //         if item != null {
    //             let vti = @ptrv(item, u16, -1)
    //             if vti > 0 {
    //                 let update = @ptrv(vtable, fn(ptr, u16)(), vti @as uint * VTABLE_COLS + VTABLE_COL_UPDATE_AGE)
    //                 update(item, age)
    //             }
    //         }
    //         adr += sizeof(ptr)
    //     }

    //     each coro:g_coros => coro {
    //         if isset(coro) {
    //             let adr = coro.stack.base
    //             let top = coro.stack.adr
    //             while adr < top {
    //                 let item = @ptrv(adr, ptr)
    //                 if item != null {
    //                     let vti = @ptrv(item, u16, -1)
    //                     if vti > 0 {
    //                         let update = @ptrv(vtable, fn(ptr, u16)(), vti @as uint * VTABLE_COLS + VTABLE_COL_UPDATE_AGE)
    //                         update(item, age)
    //                     }
    //                 }
    //                 adr += sizeof(ptr)
    //             }
    //         }
    //     }
    // }

    + fn shutdown() {
    }
}

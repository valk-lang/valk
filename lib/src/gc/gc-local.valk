
use coro

value mem_minimum_trigger (256 * 1024)

// Core
global gc : Gc (@undefined)
global check_shared : bool
// Local - Counters
global mem_marked: uint (0)
global mem_trigger: uint (mem_minimum_trigger)
global mem_new: uint (0)
// Local - lists
global globals: Bump (@undefined)
global updated_list: Bump (@undefined)
global blanks: Bump (@undefined)
global dis_owned_list: Bump (@undefined)
global re_own_list: Bump (@undefined)
global mark_list: Lifo (@undefined)

class Gc {
    check_shared_ptr: ptr[bool] (@ref(check_shared))
    //
    disable: bool (true)
    did_shutdown: bool (false)

    + static fn init() Gc {
        globals = Bump.new()
        updated_list = Bump.new()
        blanks = Bump.new()
        dis_owned_list = Bump.new()
        re_own_list = Bump.new()
        mark_list = Lifo.new()
        return Gc {}
    }

    fn collect() {

        if this.disable : return
        this.disable = true

        let must_check_shared = check_shared

        // 
        this.loop_stack_items(Gc.mark_on_stack)

        // Check if items have dissapeared from the stack
        this.loop_previous_stack_items()

        // Mark stack items
        this.loop_stack_items(Gc.mark_stack_item)

        //
        this.loop_dis_own()
        this.loop_re_own()

        // Reconnect to disconnected items
        this.loop_updates()

        this.check_blanks()

        // Reset pools
        reset_pools(pools, poolc)

        // Reset mem_new
        mem_new = mem_marked

        // Update trigger point
        let high = mem_marked / 100 * 120 + mem_minimum_trigger
        let low = mem_trigger / 100 * 90
        if low > high : high = low
        mem_trigger = high

        //
        if must_check_shared {
            check_shared = false
            let count = atomic_op(shared_run_count + 1)
            if (count + 1) == shared_run_total {
                // Im last - I need to clean the shared list
                clean_shared()
            }
        }

        //
        this.disable = false
    }

    static fn mark_on_stack(item: GcItem) {
        item.data().set_on_stack()
    }

    static fn mark_stack_item(item: ptr) {
        let data = (@offset(item, u8, -8)).@cast(GcData)
        if data.state < state_owned {
            mark_used(item)
            stack_items.add_ptr(item)
        }
        data.remove_on_stack()
    }

    fn loop_previous_stack_items() {

        let discs = dis_owned_list
        let list = stack_items
        let data = list.data
        let adr = data
        let end = adr + list.index
        list.reset()

        while adr < end {
            let item = @ptrv(adr, ptr)
            let data = (@offset(item, u8, -8)).@cast(GcData)
            adr += size_of(ptr)

            if data.is_on_stack() {
                let adr = list.get(size_of(ptr))
                @ptrv(adr, ptr) = item
            } else {
                let adr = discs.get(size_of(ptr))
                @ptrv(adr, ptr) = item

                data.state--
            }
        }
    }

    fn loop_dis_own() {

        let list = dis_owned_list
        let data = list.data
        let adr = data
        let end = adr + list.index
        list.reset()

        while adr < end {
            let item = @ptrv(adr, ptr)
            let data = (@offset(item, u8, -8)).@cast(GcData)
            adr += size_of(ptr)

            if data.state == state_no_owner {
                dis_own_rec(item)
            }
        }
    }

    fn loop_re_own() {

        let list = re_own_list
        let data = list.data
        let adr = data
        let end = adr + list.index
        list.reset()

        while adr < end {
            let item = @ptrv(adr, ptr)
            let data = (@offset(item, u8, -8)).@cast(GcData)
            adr += size_of(ptr)

            if data.state == state_new && data.co_count > 0 {
                mark_used(item)
                data.set_still_co_owned()
            }
        }
    }

    fn loop_updates() {

        let list = updated_list
        let data = list.data
        let adr = data
        let end = adr + list.index
        list.reset()

        let ml = mark_list

        while adr < end {
            let item = @ptrv(adr, GcItem)
            adr += size_of(ptr)

            let data = item.data()
            data.remove_in_updates()

            if data.state == state_owned {
                ml.add(item)
            }
        }

        mark_used(null)
    }

    fn check_blanks() {

        let list = blanks
        let data = list.data
        let adr = data
        let end = adr + list.index
        list.reset()

        while adr < end {
            let item = @ptrv(adr, GcItem)
            adr += size_of(ptr)

            let data = item.data()
            data.remove_in_blanks()
            if data.state != state_new : continue

            free_blank(item)
        }
    }

    //////////////////////////
    // Loop stack
    //////////////////////////

    fn loop_stack_items(func: fnRef(ptr)()) {

        // Globals
        let g_adr = globals.data
        let g_end_adr = g_adr + globals.index
        while g_adr < g_end_adr {
            let ref = @ptrv(g_adr, ptr)
            let item = @ptrv(ref, ?ptr)
            if isset(item) {
                func(item)
            }
            g_adr += size_of(ptr)
        }

        // Stack
        let adr = stack_root
        let top = stack_top
        while adr < top {
            let item = @ptrv(adr, ?ptr)
            if isset(item) {
                func(item)
            }
            adr += size_of(ptr)
        }

        // Backup
        adr = stack_backup
        let size = stack_backup_size
        top = adr + size
        while adr < top {
            let item = @ptrv(adr, ?ptr)
            if isset(item) {
                func(item)
            }
            adr += size_of(ptr)
        }

        let coros = coro:g_coros
        each coros as coro {
            if isset(coro) {
                let adr = coro.stack
                if isset(adr) {
                    let top = adr + coro.stack_size
                    while adr < top {
                        let item = @ptrv(adr, ?ptr)
                        if isset(item) {
                            func(item)
                        }
                        adr += size_of(ptr)
                    }
                }
            }
        }
    }

    //////////////////////////
    // Shutdown
    //////////////////////////

    // + fn shutdown() {
    //     this.did_shutdown = true
    //     this.collect()
    //     this.mutex.unlock()
    //     remove_gc(this)

    //     // Free blocks or store them in unused-block-list if they still contain items
    //     shutdown_lock.lock()
    //     loop_all_blocks(fn(block: Block)() {
    //         if block.used == 0 {
    //             mem:free(block)
    //         } else {
    //             add_unused_block(block)
    //         }
    //     })
    //     shutdown_lock.unlock()

    //     dump_shared(this.shared_items)

    //     //
    //     this.mutex.free()
    //     this.stack_items.free()
    //     this.mark_list.free()
    //     mem:free(this)

    //     // Free pools
    //     pools_free()
    // }
}

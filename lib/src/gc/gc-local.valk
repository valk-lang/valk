
use coro

global local_gc : GcLocal (@undefined)

global stack_main : Stack (@undefined)
global stack_active : Stack (@undefined)
global stack_items : Bump (@undefined)
global disable_colors : Bump (@undefined)

global mem_new : uint
global mem_trigger : uint
global mem_suggestion : uint
global mem_marked : uint

value mem_minimum_trigger (8192)

value FROZEN (255)

fn update_usage() {
    // Calculate mem usage
    if mem_new > mem_trigger : gc()
}

+ fn gc() {
    local_gc.gc()
}

+ fn gc_suggestion() {
    if mem_new > mem_suggestion {
        local_gc.gc()
    }
}

struct GcLocal {
    globals: Bump (Bump.new())
    update_shared: bool (true)
    stop: bool (false)
    disable: bool (false)

    + static fn init() GcLocal {

        stack_main = Stack.new()
        stack_active = stack_main

        stack_items = Bump.new()
        disable_colors = Bump.new()
        Color.init()

        // ColorBook.init()
        pools_init()
        boxes_init()

        mem_new = 0
        mem_trigger = mem_minimum_trigger
        mem_suggestion = mem_minimum_trigger

        let gcl = GcLocal {
        }
        local_gc = gcl

        // TODO: Add gc to gc list for the shared gc

        return gcl
    }

    fn add_global(ref: ptr) {
        let adr = this.globals.get(sizeof(ptr))
        @ptrv(adr, ptr) = ref
    }

    fn gc() {

        if this.disable : return
        this.disable = true

        // this.lock.lock()
        // print("-")

        // log_boxes();

        // Make sure share color is valid
        @ptrv(color_state, u8, color_shared) = color_state_used
        disable_colors.reset()

        this.check_previous_stack_items()
        this.mark_stacks()
        this.check_current_box()
        reset_pools()
        this.disable_colors()

        // Set next box
        box_current++
        if box_current == BOX_COUNT : box_current = 0
        box_insert = box_current + 1
        if box_insert == BOX_COUNT : box_insert = 0

        // Update gc trigger point
        mem_trigger = mem_new / 10 * 13 + mem_minimum_trigger
        // mem_new = mem_marked

        // Mark shared
        if this.update_shared {
            // this.mark_shared()
            this.update_shared = false
        }

        this.disable = false
        // this.lock.unlock()
        // print(".")
    }

    fn check_previous_stack_items() {
        this.mark_on_stack(1)

        let list = stack_items
        let data = list.data
        let adr = data
        let end = adr + list.index
        list.index = 0 // Clear list
        while adr < end {
            let item = @ptrv(adr, ptr)
            let color = @ptrv(adr, uint, 1) @as color_type
            adr += sizeof(ptr) * 2

            if @ptrv(item, u8, byte_mark_rel) == 0 {
                // Disable color
                @ptrv(color_state, u8, color) = color_state_unused
            } else {
                // Re-add to list
                if @ptrv(color_state, u8, color) == color_state_used {
                    @ptrv(data, ptr) = item
                    @ptrv(data, uint, 1) = color
                    data += sizeof(ptr) * 2
                }
            }
        }
        list.index = data - list.data

        this.mark_on_stack(0)
    }

    fn mark_on_stack(val: u8) {

        // Globals
        let g_adr = this.globals.data
        let g_end_adr = g_adr + this.globals.index
        while g_adr < g_end_adr {
            let ref = @ptrv(g_adr, ptr)
            let item = @ptrv(ref, ptr)
            if item != null {
                @ptrv(item, u8, byte_mark_rel) = val
            }
            g_adr += sizeof(ptr)
        }

        // Stack
        let stack = stack_main
        let adr = stack.base
        let top = stack.adr
        while adr < top {
            let item = @ptrv(adr, ptr, 0)
            if item != null {
                @ptrv(item, u8, byte_mark_rel) = val
            }
            adr += sizeof(ptr)
        }

        let coro_data = coro:g_coros.data
        let coro_count = coro:g_coros.length
        while coro_count-- > 0 {
            let coro = @ptrv(coro_data, ?ptr, coro_count)
            if isset(coro) {
                let adr = (coro @as coro:Coro).stack.base
                let top = (coro @as coro:Coro).stack.adr
                while adr < top {
                    let item = @ptrv(adr, ptr)
                    if item != null {
                        @ptrv(item, u8, byte_mark_rel) = val
                    }
                    adr += sizeof(ptr)
                }
            }
        }
    }

    fn mark_stacks() {

        // Globals
        let g_adr = this.globals.data
        let g_end_adr = g_adr + this.globals.index
        while g_adr < g_end_adr {
            let ref = @ptrv(g_adr, ptr)
            let item = @ptrv(ref, ptr)
            if item != null {
                this.mark_item(item)
            }
            g_adr += sizeof(ptr)
        }

        // Stack
        let stack = stack_main
        let adr = stack.base
        let top = stack.adr
        while adr < top {
            let item = @ptrv(adr, ptr, 0)
            if item != null {
                this.mark_item(item)
            }
            adr += sizeof(ptr)
        }

        let coro_data = coro:g_coros.data
        let coro_count = coro:g_coros.length
        while coro_count-- > 0 {
            let coro = @ptrv(coro_data, ?ptr, coro_count)
            if isset(coro) {
                let adr = (coro @as coro:Coro).stack.base
                let top = (coro @as coro:Coro).stack.adr
                while adr < top {
                    let item = @ptrv(adr, ptr)
                    if item != null {
                        this.mark_item(item)
                    }
                    adr += sizeof(ptr)
                }
            }
        }
    }

    fn mark_item(item: ptr) {
        let color = @ptrv(item, color_type, byte_color_rel)
        if @ptrv(color_state, u8, color) == color_state_unused {
            let c = Color.get()
            color_disable_after = false
            mark(item, c)
            if color_disable_after {
                let adr = disable_colors.get(sizeof(color_type))
                @ptrv(adr, color_type) = c
            } else {
                let li = stack_items.get(sizeof(ptr) * 2)
                @ptrv(li, ptr) = item
                @ptrv(li, uint, 1) = c
            }
        }
    }

    fn check_current_box() {
        let current = box_current
        let b = box_get(current)
        let bi = box_get(box_insert)
        let state = color_state

        let data = b.data
        let i : uint = 0

        let adr = data
        let end = adr + b.index
        b.index = 0 // Clear box

        while adr < end {
            let item = @ptrv(adr, ptr)
            adr += sizeof(ptr)

            // Check mark
            let color = @ptrv(item, color_type, byte_color_rel)
            if @ptrv(state, u8, color) == color_state_unused {
                // Free item
                free_item(item)
                continue
            }

            @ptrv(data, ptr, i++) = item
        }

        b.index = i * sizeof(ptr)
        b.reduce_size()
    }

    fn disable_colors() {
        let list = disable_colors
        let state = color_state

        let data = list.data
        let adr = data
        let end = adr + list.index
        while adr < end {
            let item = @ptrv(adr, ptr)
            adr += sizeof(color_type)
            let color = @ptrv(adr, color_type)
            @ptrv(color_state, u8, color) = color_state_unused
        }

        list.reset()
    }

    + fn shutdown() {
        // this.stop = true
        // this.gc()
        // print("\n###\n")
        // println(stack_items_new.size)
        // println(stack_items_old.size)
        // println(colors.size)
        // println(mem_marked)
        // print("###\n")
    }
}

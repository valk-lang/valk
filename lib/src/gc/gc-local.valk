
use coro
use core
use mem

~ global gc : Gc (@undefined)

global stack_root : [20_000 x ptr]
global stack_top : ptr (@undefined)
global stack_backup : [10_000 x ptr]
global stack_backup_size : uint

value mem_minimum_trigger (256 * 1024)

fn thread_init() {
    // mem:clear(stack_root, 20_000)
    stack_top = stack_root
    pools_init()
    Gc.init()
}

struct Gc {
    globals: Bump (Bump.new())
    //
    shared_state: u8 (shared_state_idle)
    shared_update: bool (false)
    mutex: core:MutexStruct[void]
    // Lists
    stack_items: Bump (Bump.new())
    updated_list: Bump (Bump.new())
    disconnect_list: Bump (Bump.new())
    blanks: Bump (Bump.new())
    shared_items: Bump (Bump.new())
    still_co_owned: Bump (Bump.new())
    //
    mark_list: Lifo (Lifo.new())
    // Counters
    mem_marked: uint (0)
    mem_trigger: uint (mem_minimum_trigger)
    mem_suggestion: uint (mem_minimum_trigger)
    mem_new: uint (0)
    // Stacks
    stack_root: ptr (stack_root)
    stack_top_ptr: ptr[1 x ptr] (@ref(stack_top))
    stack_backup: ptr (stack_backup)
    stack_backup_size_ptr: ptr[1 x ptr] (@ref(stack_backup_size))
    coros_ptr: ptr[Array[?coro:Coro]] (@ref(coro:g_coros))
    //
    disable: bool (true)
    did_shutdown: bool (false)

    + static fn init() Gc {

        let gcl = Gc {
            mutex: core:MutexStruct[void].new()
        }
        gc = gcl

        return gcl
    }

    fn add_global(ref: ptr) {
        let adr = this.globals.get(size_of(ptr))
        @ptrv(adr, ptr) = ref
    }

    fn push_to_shared() {
        add_gc(this)
    }

    fn collect() {

        if this.disable : return
        this.disable = true

        // 
        if !this.did_shutdown : this.loop_stack_items(Gc.mark_on_stack)

        // Check if items have dissapeared from the stack
        this.loop_previous_stack_items()

        // Mark stack items
        if !this.did_shutdown : this.loop_stack_items(Gc.mark_stack_item)

        // Loop disconnects and disconnect sub pipes
        this.loop_disconnects()

        // Reconnect to disconnected items
        if !this.did_shutdown : this.loop_updates()

        this.check_blanks()

        if !this.did_shutdown : this.loop_stack_items(Gc.mark_off_stack)

        // Handle shared items
        if this.shared_update {
            if this.shared_state == shared_state_mark {
                if !this.did_shutdown : this.mark_shared()
            } else {
                this.clear_shared()
            }
            this.shared_update = false
        }

        // Clear lists
        this.blanks.reset()
        this.disconnect_list.reset()

        // Reset pools
        if !mem_shared_running : reset_pools()
        // Reset mem_new
        this.mem_new = this.mem_marked

        // Update trigger point
        let high = this.mem_marked / 100 * 120 + mem_minimum_trigger
        let high_sug = this.mem_marked / 100 * 110 + mem_minimum_trigger
        let high2 = this.mem_trigger / 100 * 90
        if high2 > high : high = high2
        if high2 > high_sug : high_sug = high2
        this.mem_trigger = high
        this.mem_suggestion = high_sug

        //
        this.disable = false
    }

    static fn mark_on_stack(item: GcItem) {
        item.data().set_on_stack()
        // let data = (@offset(item, u8, -8)).@cast(GcData)
        // data.on_stack = 1
    }
    static fn mark_off_stack(item: GcItem) {
        item.data().remove_on_stack()
        // let data = (@offset(item, u8, -8)).@cast(GcData)
        // data.on_stack = 0
    }

    static fn mark_stack_item(item: ptr) {
        let data = (@offset(item, u8, -8)).@cast(GcData)
        if data.state < state_used {
            mark_used(item)

            let li = gc.stack_items.get(size_of(ptr))
            @ptrv(li, ptr) = item
        }
    }

    fn loop_previous_stack_items() {

        let discs = this.disconnect_list
        let list = this.stack_items
        let data = list.data
        let adr = data
        let end = adr + list.index
        list.reset()

        while adr < end {
            let item = @ptrv(adr, ptr)
            let data = (@offset(item, u8, -8)).@cast(GcData)
            adr += size_of(ptr)

            if data.is_on_stack() {
                let adr = list.get(size_of(ptr))
                @ptrv(adr, ptr) = item
            } else {
                let adr = discs.get(size_of(ptr))
                @ptrv(adr, ptr) = item

                data.state--
            }
        }
    }

    fn loop_disconnects() {

        let list = this.disconnect_list
        let data = list.data
        let adr = data
        let end = adr + list.index

        while adr < end {
            let item = @ptrv(adr, ptr)
            let data = (@offset(item, u8, -8)).@cast(GcData)
            adr += size_of(ptr)

            if data.state == state_unused {
                disconnect_rec(item)
            }
        }
    }

    fn loop_updates() {

        let list = this.updated_list
        let data = list.data
        let adr = data
        let end = adr + list.index
        let ml = this.mark_list

        while adr < end {
            let item = @ptrv(adr, ptr)
            let data = (@offset(item, u8, -8)).@cast(GcData)
            adr += size_of(ptr)

            data.remove_in_updates()

            if data.state == state_used {
                // mark_used(item)
                ml.add(item)
            }
        }
        mark_used(null)
    }

    fn check_blanks() {

        let list = this.blanks
        let data = list.data
        let adr = data
        let end = adr + list.index

        while adr < end {
            let item = @ptrv(adr, ptr)
            adr += size_of(ptr)

            let data = (@offset(item, u8, -8)).@cast(GcData)
            data.remove_in_blanks()
            if data.state != state_new : continue

            free_blank(item)
        }
    }

    //////////////////////////
    // Loop stack
    //////////////////////////

    fn loop_stack_items(func: fnRef(ptr)()) {

        // Globals
        let g_adr = this.globals.data
        let g_end_adr = g_adr + this.globals.index
        while g_adr < g_end_adr {
            let ref = @ptrv(g_adr, ptr)
            let item = @ptrv(ref, ?ptr)
            if isset(item) {
                func(item)
            }
            g_adr += size_of(ptr)
        }

        // Stack
        let adr = this.stack_root
        let top = this.stack_top_ptr[0]
        while adr < top {
            let item = @ptrv(adr, ?ptr)
            if isset(item) {
                func(item)
            }
            adr += size_of(ptr)
        }

        // Backup
        adr = this.stack_backup
        let size = this.stack_backup_size_ptr[0]
        top = adr + size
        while adr < top {
            let item = @ptrv(adr, ?ptr)
            if isset(item) {
                func(item)
            }
            adr += size_of(ptr)
        }

        let coros = @ptrv(this.coros_ptr, Array[?coro:Coro])
        each coros as coro {
            if isset(coro) {
                let adr = coro.stack
                if isset(adr) {
                    let top = adr + coro.stack_size
                    while adr < top {
                        let item = @ptrv(adr, ?ptr)
                        if isset(item) {
                            func(item)
                        }
                        adr += size_of(ptr)
                    }
                }
            }
        }
    }

    //////////////////////////
    // Shared
    //////////////////////////

    fn mark_shared() {
        // let list = this.reconnect_list
        // let data = list.data
        // let adr = data
        // let end = adr + list.index

        // while adr < end {
        //     let item = @ptrv(adr, ptr)
        //     let data = (@offset(item, u8, -8)).@cast(GcData)
        //     adr += size_of(ptr)

        //     // Props
        //     let has_vtable = data.has_vtable()
        //     let propc = data.propc
        //     if propc > 0 {
        //         // Mark properties
        //         let prop_base = item + size_of(ptr) * has_vtable.@cast(uint)
        //         while propc-- > 0 {
        //             let sub = @ptrv(prop_base, ?ptr, propc)
        //             if isset(sub) {
        //                 let base = sub & -2.to(uint)
        //                 let data = (@offset(base, u8, -8)).@cast(GcData)
        //                 if data.state == state_shared_unused {
        //                     share(base)
        //                 }
        //             }
        //         }
        //     }

        //     // Call hook _gc_share
        //     if has_vtable {
        //         let vt = data.vtable
        //         let func = @ptrv(vt, ?fnRef(ptr, fnRef(ptr, ptr)())(), 0)
        //         if isset(func) {
        //             func(item, property_share_update_age)
        //         }
        //     }
        // }

        // Mark stack items
        this.loop_stack_items(fn(item: ptr) {
            let data = (@offset(item, u8, -8)).@cast(GcData)
            if data.state == state_shared_unused {
                share(item)
            }
        })

        // Update age for shared items
        let list2 = this.shared_items
        let data2 = list2.data
        let adr2 = data2
        let end2 = adr2 + list2.index

        while adr2 < end2 {
            let item = @ptrv(adr2, ptr)
            let data = (@offset(item, u8, -8)).@cast(GcData)
            adr2 += size_of(ptr)

            if data.state == state_shared {
                share(item)
            }
        }
    }
    fn clear_shared() {

        let list = this.shared_items
        let data = list.data
        let adr = data
        let end = adr + list.index
        list.reset()

        let mark = shared_mark

        while adr < end {
            let item = @ptrv(adr, ptr)
            let data = (@offset(item, u8, -8)).@cast(GcData)
            adr += size_of(ptr)

            if data.age == mark {
                list.add_ptr(item)
                continue
            }

            // Clear shared item
            // Load data before clear
            let has_vtable = data.has_vtable()

            // Clear data
            @ptrv(data, u32) = 0

            let offset = data.block_offset
            if offset > 0 {
                let block = item - offset
                @ptrv(block, uint, 2)-- // Reduce block items-used
                atomic_op(mem_shared - @ptrv(block, uint, 4))

                if has_vtable {
                    let vt = data.vtable
                    // gc_free
                    let ff = @ptrv(vt, ?fnRef(ptr)(), 1)
                    if isset(ff) {
                        ff(item)
                    }
                }
            }
        }
    }

    //////////////////////////
    // Shutdown
    //////////////////////////

    + fn shutdown() {
        this.did_shutdown = true
        this.collect()
        this.mutex.unlock()
        remove_gc(this)

        // Free blocks or store them in unused-block-list if they still contain items
        shutdown_lock.lock()
        loop_all_blocks(fn(block: Block)() {
            if block.used == 0 {
                mem:free(block)
            } else {
                add_unused_block(block)
            }
        })
        shutdown_lock.unlock()

        dump_shared(this.shared_items)

        //
        this.mutex.free()
        this.stack_items.free()
        this.updated_list.free()
        this.disconnect_list.free()
        this.blanks.free()
        this.shared_items.free()
        this.mark_list.free()
        mem:free(this)

        // Free pools
        pools_free()
    }
}

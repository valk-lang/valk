
use coro
use core

~ global local_gc : GcLocal (@undefined)

global stack_main : Stack (@undefined)
global stack_active : Stack (@undefined)

global stack_items : Bump (@undefined)
global reconnect_list : Bump (@undefined)
global reconnect_list_prev : Bump (@undefined)
global disconnect_list : Bump (@undefined)
global blanks : Bump (@undefined)
global shared_items : Bump (@undefined)

global mem_new : uint
global mem_trigger : uint
global mem_suggestion : uint
global mem_marked : uint

value mem_minimum_trigger (524288)

fn thread_init() {
    stack_main = Stack.new()
    stack_active = stack_main
    pools_init()
}

class GcLocal {
    globals: Bump (Bump.new())
    //
    shared_state: u8 (shared_state_idle)
    shared_update: bool (false)
    //
    disable: bool (true)

    + static fn init() GcLocal {

        mark_list = Lifo.new()

        stack_items = Bump.new()
        reconnect_list = Bump.new()
        reconnect_list_prev = Bump.new()
        disconnect_list = Bump.new()
        blanks = Bump.new()
        shared_items = Bump.new()

        mem_new = 0
        mem_trigger = mem_minimum_trigger
        mem_suggestion = mem_minimum_trigger

        let gcl = GcLocal {
        }
        local_gc = gcl

        return gcl
    }

    fn add_global(ref: ptr) {
        let adr = this.globals.get(size_of(ptr))
        @ptrv(adr, ptr) = ref
    }

    fn push_to_shared() {
        shared_gc.add_gc(this)
    }

    fn run() {

        if this.disable : return
        this.disable = true

        // print("-")

        let mem_marked_before = mem_marked
        let bytes_new = mem_new - mem_marked_before

        // 
        this.loop_stack_items(GcLocal.mark_on_stack)

        // Check if items have dissapeared from the stack
        this.loop_previous_stack_items()

        // Mark stack items
        this.loop_stack_items(GcLocal.mark_stack_item)

        // Loop disconnects and disconnect sub pipes
        this.loop_disconnects()

        // Swap reconnect lists
        let list = reconnect_list_prev
        reconnect_list_prev = reconnect_list
        reconnect_list = list

        // Reconnect to disconnected items
        this.loop_reconnects()

        this.check_blanks()

        this.loop_stack_items(GcLocal.mark_off_stack)

        // Handle shared items
        if this.shared_update {
            if this.shared_state == shared_state_mark {
                this.mark_shared()
            } else {
                this.clear_shared()
            }

            this.shared_update = false
        }

        // Clear lists
        blanks.reset()
        reconnect_list_prev.reset()
        disconnect_list.reset()

        //
        let multiplier : uint = 0
        if mem_marked > mem_marked_before {
            let bytes_kept = mem_marked - mem_marked_before
            multiplier = bytes_kept * 100 / (bytes_new + 1)
        }

        // Update gc trigger point
        mem_trigger = mem_marked / 100 * (120 + (25 * multiplier / 100)) + mem_minimum_trigger
        mem_suggestion = mem_marked / 100 * 115 + mem_minimum_trigger
        mem_new = mem_marked

        // Reset pools
        if multiplier < 95 : reset_pools()

        this.disable = false
    }

    static fn mark_on_stack(item: ptr) {
        let data = (@offset(item, u8, -8)) @as GcData
        data.on_stack = 1
    }
    static fn mark_off_stack(item: ptr) {
        let data = (@offset(item, u8, -8)) @as GcData
        data.on_stack = 0
    }

    static fn mark_stack_item(item: ptr) {
        let data = (@offset(item, u8, -8)) @as GcData
        if data.state < state_used {
            mark_used(item)

            let li = stack_items.get(size_of(ptr))
            @ptrv(li, ptr) = item
        }
    }

    fn loop_previous_stack_items() {

        let discs = disconnect_list
        let list = stack_items
        let data = list.data
        let adr = data
        let end = adr + list.index
        list.reset()

        while adr < end {
            let item = @ptrv(adr, ptr)
            let data = (@offset(item, u8, -8)) @as GcData
            adr += size_of(ptr)

            if data.on_stack == 0 {
                let adr = discs.get(size_of(ptr))
                @ptrv(adr, ptr) = item

                data.state--
            } else {
                let adr = list.get(size_of(ptr))
                @ptrv(adr, ptr) = item
            }
        }
    }

    fn loop_disconnects() {

        let list = disconnect_list
        let data = list.data
        let adr = data
        let end = adr + list.index

        while adr < end {
            let item = @ptrv(adr, ptr)
            let data = (@offset(item, u8, -8)) @as GcData
            adr += size_of(ptr)

            if data.state == state_unused {
                disconnect_rec(item)
            }
        }
    }

    fn loop_reconnects() {

        let list = reconnect_list_prev
        let data = list.data
        let adr = data
        let end = adr + list.index

        while adr < end {
            let item = @ptrv(adr, ptr)
            let data = (@offset(item, u8, -8)) @as GcData
            adr += size_of(ptr)

            data.in_list = data.in_list & (255 - in_list_reconnect)

            if data.state == state_used {
                mark_used(item)
            }
        }
    }

    fn check_blanks() {

        let list = blanks
        let data = list.data
        let adr = data
        let end = adr + list.index

        while adr < end {
            let item = @ptrv(adr, ptr)
            adr += size_of(ptr)

            let data = (@offset(item, u8, -8)) @as GcData
            data.in_list = data.in_list & (255 - in_list_blanks)
            if data.state != state_new : continue

            free_blank(item)
        }
    }

    //////////////////////////
    // Loop stack
    //////////////////////////

    fn loop_stack_items(func: fnRef(ptr)()) {

        // Globals
        let g_adr = this.globals.data
        let g_end_adr = g_adr + this.globals.index
        while g_adr < g_end_adr {
            let ref = @ptrv(g_adr, ptr)
            let item = @ptrv(ref, ?ptr)
            if isset(item) {
                func(item)
            }
            g_adr += size_of(ptr)
        }

        // Stack
        let stack = stack_main
        let adr = stack.base
        let top = stack.adr
        while adr < top {
            let item = @ptrv(adr, ?ptr)
            if isset(item) {
                func(item)
            }
            adr += size_of(ptr)
        }

        each coro:g_coros => coro {
            if isset(coro) {
                let adr = coro.stack.base
                let top = coro.stack.adr
                while adr < top {
                    let item = @ptrv(adr, ?ptr)
                    if isset(item) {
                        func(item)
                    }
                    adr += size_of(ptr)
                }
            }
        }
    }

    //////////////////////////
    // Shared
    //////////////////////////

    fn mark_shared() {
        let list = reconnect_list
        let data = list.data
        let adr = data
        let end = adr + list.index

        while adr < end {
            let item = @ptrv(adr, ptr)
            let data = (@offset(item, u8, -8)) @as GcData
            adr += size_of(ptr)

            // Props
            let has_vtable = data.has_vtable == 1
            let propc = data.propc
            if propc > 0 {
                // Mark properties
                let prop_base = item + size_of(ptr) * has_vtable @as uint
                while propc-- > 0 {
                    let sub = @ptrv(prop_base, ?ptr, propc)
                    if isset(sub) {
                        let base = sub & -2.to(uint)
                        let data = (@offset(base, u8, -8)) @as GcData
                        if data.state == state_shared_unused {
                            share(base)
                        }
                    }
                }
            }

            // Call hook _gc_share
            if has_vtable {
                let vt = data.vtable
                let func = @ptrv(vt, ?fnRef(ptr, fnRef(ptr, ptr)())(), 0)
                if isset(func) {
                    func(item, property_share_update_age)
                }
            }
        }

        // Mark stack items
        this.loop_stack_items(fn(item: ptr) {
            let data = (@offset(item, u8, -8)) @as GcData
            if data.state == state_shared_unused {
                share(item)
            }
        })

        // Update age for shared items
        let list2 = shared_items
        let data2 = list2.data
        let adr2 = data2
        let end2 = adr2 + list2.index

        while adr2 < end2 {
            let item = @ptrv(adr2, ptr)
            let data = (@offset(item, u8, -8)) @as GcData
            adr2 += size_of(ptr)

            if data.state == state_shared {
                share(item)
            }
        }
    }
    fn clear_shared() {

        let list = shared_items
        let data = list.data
        let adr = data
        let end = adr + list.index
        list.reset()

        while adr < end {
            let item = @ptrv(adr, ptr)
            let data = (@offset(item, u8, -8)) @as GcData
            adr += size_of(ptr)

            if data.age == shared_mark {
                list.add_ptr(item)
                continue
            }

            // Clear shared item
            // Load data before clear
            let has_vtable = data.has_vtable == 1

            // Clear data
            @ptrv(data, u32) = 0

            let offset = data.block_offset
            if offset > 0 {
                let block = item - offset
                @ptrv(block, uint, 2)-- // Reduce block items-used
                mem_marked -= @ptrv(block, uint, 4)

                if has_vtable {
                    let vt = data.vtable
                    // gc_free
                    let ff = @ptrv(vt, ?fnRef(ptr)(), 1)
                    if isset(ff) {
                        ff(item)
                    }
                }
            }
        }
    }

    //////////////////////////
    // Shutdown
    //////////////////////////

    + fn shutdown() {
        this.run()
        shared_gc.remove_gc(this)
        // TODO: pass blocks with shared memory to shared gc
    }
}

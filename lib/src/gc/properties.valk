
fn changed(on: ptr) {
    @ptrv(color_state, u8, @ptrv(on, color_type, byte_color_rel)) = color_state_unused
}

fn removed(from: ptr, item: ptr) {
    if item == null : return
    let from_color = @ptrv(from, color_type, byte_color_rel)
    if from_color == color_blank : return
    let item_color = @ptrv(item, color_type, byte_color_rel)
    if item_color == from_color {
        add_still_used(item)
    }
}

fn add_still_used(item: ptr) {
    if @ptrv(item, u8, byte_still_used_rel) == 0 {
        @ptrv(item, u8, byte_still_used_rel) = 1
        @ptrv(still_used.get(sizeof(ptr)), ptr) = item
    }
}


fn changed(on: ptr) {
    let color = @ptrv(on, color_type, byte_color_rel)
    @ptrv(color_state, u8, color) = color_state_unused
}

fn attach(on: ptr, item: ?ptr) {
    if !isset(item) : return
    // let on_color = @ptrv(on, color_type, byte_color_rel)
    // if on_color == color_shared {
    //     share(item)
    // }

    let on_color = @ptrv(on, color_type, byte_color_rel)
    if on_color == color_shared {
        let vti = @ptrv(item, u16, byte_vtable_index_rel)
        let func = @ptrv(gc_tables, fn(ptr)(), vti * GC_TABLE_SIZE + vt_share)
        func(item)
    }
}

fn removed(from: ptr, item: ?ptr) {
    if !isset(item) : return
    let from_color = @ptrv(from, color_type, byte_color_rel)
    if from_color == color_blank : return
    let item_color = @ptrv(item, color_type, byte_color_rel)
    if item_color == from_color {
        add_still_used(item)
    }
}

fn add_still_used(item: ptr) {
    let mark = @ptrv(item, u8, byte_mark_rel)
    if mark & 2 == 0 {
        @ptrv(item, u8, byte_mark_rel) = mark | 2
        @ptrv(still_used.get(sizeof(ptr)), ptr) = item
    }
}


fn property_update(on_object: ptr, property_ref: ptr, new_value: ?ptr) {
    let data = (@offset(on_object, u8, -8)).@cast(GcData)
    let state = data.state
    if state > state_new {
        let old = @ptrv(property_ref, ptr)
        if old & 1 == 1 {
            let old_item : ptr = old - 1
            let data = (@offset(old_item, u8, -8)).@cast(GcData)
            data.state = state_no_owner
            dis_owned_list.add_ptr(old_item)
        } else if old & 2 == 2 {
            let old_item : ptr = old - 2
            let data = (@offset(old_item, u8, -8)).@cast(GcData)
            data.dis_co_own()
            if data.is_still_co_owned() {
                data.remove_still_co_owned()
                data.state = state_no_owner
                dis_owned_list.add_ptr(old_item)
            }
        }

        // New value
        if isset(new_value) {
            if state == state_owned {
                if !data.is_in_updates() {
                    data.set_in_updates()
                    let adr = updated_list.get(size_of(ptr))
                    @ptrv(adr, ptr) = on_object
                }
            }
        }
    }
    @ptrv(property_ref, ?ptr) = new_value
}

fn property_set(on_object: ptr, property_ref: ptr, value: ?ptr) {
    if isset(value) {
        let data = (@offset(on_object, u8, -8)).@cast(GcData)
        let state = data.state
        if state == state_owned {
            if !data.is_in_updates() {
                data.set_in_updates()
                let adr = updated_list.get(size_of(ptr))
                @ptrv(adr, ptr) = on_object
            }
        }
    }
    @ptrv(property_ref, ?ptr) = value
}

fn property_get(property_ref: ptr) ptr {
    return @ptrv(property_ref, ?ptr) & -4.to(uint)
}

fn property_remove(on_object: ptr, property_ref: ptr) {
    let data = (@offset(on_object, u8, -8)).@cast(GcData)
    let value = @ptrv(property_ref, ptr)
    if value & 1 == 1 {
        let item : ptr = value - 1
        let data = (@offset(item, u8, -8)).@cast(GcData)
        data.state = state_no_owner
        dis_owned_list.add_ptr(item)
    } else if value & 2 == 2 {
        let item : ptr = value - 2
        let data = (@offset(item, u8, -8)).@cast(GcData)
        data.dis_co_own()
        if data.is_still_co_owned() {
            data.remove_still_co_owned()
            data.state = state_no_owner
            dis_owned_list.add_ptr(item)
        }
    }
}

fn property_mark(on_object: GcItem, property_ref: ptr) {
    let value = @ptrv(property_ref, ?GcItem)
    if isset(value) && (value & 3 == 0) {
        let value_data = value.data()
        if value_data.state < state_owned {
            @ptrv(property_ref, ptr) = value | 1
            mark_used(value)
        } else {
            // Co own
            @ptrv(property_ref, ptr) = value | 2
            value_data.co_own()
        }
    }
}

fn property_dis_own(on_object: ptr, property_ref: ptr) {
    let sub = @ptrv(property_ref, GcItem)
    if sub & 1 == 1 {
        // Remove ownership
        sub = sub -1
        @ptrv(property_ref, GcItem) = sub
        dis_own_rec(sub)
    } else if sub & 2 == 2 {
        sub = sub - 2
        @ptrv(property_ref, GcItem) = sub
        sub.data().dis_co_own()
    }
}



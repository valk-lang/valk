
fn property_set(on_item: ptr, item: ?ptr) {
    // if !isset(item) : return
    // let current = box_current
    // let item_box = @ptrv(item, u8, byte_box_rel)
    // let on_box = @ptrv(on_item, u8, byte_box_rel)

    // if on_box == item_box : return

    // if (on_box - current > item_box - current) {
    //     set_box(item, on_box)
    // }
}

fn property_set_init(item: ?ptr) {
    // if !isset(item) : return
    // if @ptrv(item, u8, byte_box_rel) == box_current {
    //     set_box(item, box_insert)
    // }
}

fn set_box(item: ptr, to_box: u8) {
    // Only set box if to_box is higher than item_box

    let item_box = @ptrv(item, u8, byte_box_rel)
    if item_box == to_box : return

    let current = box_current
    if (item_box - current > to_box - current) : return

    @ptrv(item, u8, byte_box_rel) = to_box

    // 
    let has_vtable = (@ptrv(item, u8, byte_settings_rel) & 1) == 1
    let propc = @ptrv(item, u8, byte_propc_rel)
    if propc > 0 {
        // Mark properties
        let prop_base = item + (has_vtable ? sizeof(ptr) : 0)
        while propc-- > 0 {
            let sub = @ptrv(prop_base, ?ptr, propc)
            if isset(sub) {
                set_box(sub, to_box)
            }
        }
    }

    if has_vtable {
        let vt = @ptrv(item, ptr, 0)
        let func = @ptrv(vt, ?fn(ptr, u8)(), 1)
        if isset(func) {
            func(item, to_box)
        }
    }
}

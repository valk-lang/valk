
fn property_update(on_object: ptr, property_ref: ptr, new_value: ?ptr) {
    let data = (@ptr_offset(on_object, -8)) @as GcData
    let old = @ptrv(property_ref, ptr)
    if old & 1 == 1 {
        let old_item : ptr = old - 1
        let data = (@ptr_offset(old_item, -8)) @as GcData
        data.used = 2

        let adr = disconnect_list.get(sizeof(ptr))
        @ptrv(adr, ptr) = old_item
    }
    if data.used == 1 {
        if isset(new_value) {
            let adr = reconnect_list.get(sizeof(ptr))
            @ptrv(adr, ptr) = on_object
        }
    }
    @ptrv(property_ref, ?ptr) = new_value
}

fn property_set(on_object: ptr, property_ref: ptr, value: ?ptr) {
    let data = (@ptr_offset(on_object, -8)) @as GcData
    if data.used == 1 && isset(value) {
        let adr = reconnect_list.get(sizeof(ptr))
        @ptrv(adr, ptr) = on_object
    }
    @ptrv(property_ref, ?ptr) = value
}
fn property_remove(on_object: ptr, property_ref: ptr) {
    let data = (@ptr_offset(on_object, -8)) @as GcData
    let old = @ptrv(property_ref, ptr)
    if old & 1 == 1 {
        let old_item : ptr = old - 1
        let data = (@ptr_offset(old_item, -8)) @as GcData
        data.used = 2

        let adr = disconnect_list.get(sizeof(ptr))
        @ptrv(adr, ptr) = old_item
    }
}


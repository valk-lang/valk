
fn property_set(on_item: ptr, value: ?ptr) {
    if !isset(value) : return
    let on_color = @ptrv(on_item, color_type, byte_color_rel)
    if on_color > color_blank {
        let value_color = @ptrv(value, color_type, byte_color_rel)
        if value_color != on_color {
            if on_color == color_shared {
                share(value)
            } else {
                add_to_remark_list(on_item)
            }
        }
    }
}

fn property_update(on_item: ptr, old_value: ?ptr, new_value: ?ptr) {
    if old_value != new_value {
        property_unset(on_item, old_value)
        property_set(on_item, new_value)
    }
}

fn property_unset(on_item: ptr, value: ?ptr) {
    if !isset(value) : return
    let on_color = @ptrv(on_item, color_type, byte_color_rel)
    if on_color >= color_custom {
        let old_color = @ptrv(value, color_type, byte_color_rel)
        if on_color == old_color {
            // Disable color
            @ptrv(colors.state, u8, old_color) = color_state_unused
            // Add to still used check list
            let settings = @ptrv(value, u8, byte_settings_rel)
            if settings & 8 == 0 {
                check_still_used.add_ptr(value)
                @ptrv(value, u8, byte_settings_rel) = settings | 8
            }
        }
    }
}

// fn link(on: ptr, to: ptr) {
//     let on_color = @ptrv(on, u16, byte_color_rel)
//     let to_color = @ptrv(to, u16, byte_color_rel)

//     if on_color != to_color {
//         if on_color == color_shared {
//             if to_color != color_shared {
//                 share_object(to)
//             }
//         } else {
//             // Add on-item to remark list
//             let adr = remark_list_new.get(sizeof(ptr))
//             @ptrv(adr, ptr) = on
//         }
//     }
// }

// fn unlink(from: ptr, item: ptr) {
//     let from_color = @ptrv(from, u16, byte_color_rel)
//     // print(">")
//     // print(from_color)
//     if from_color >= color_custom {
//         let item_color = @ptrv(item, u16, byte_color_rel)
//     // print("|")
//     // print(item_color)
//         if from_color == item_color {
//             @ptrv(colors.state, u8, item_color) = color_state_unlinked

//             let list = check_still_used
//             let adr = list.get(sizeof(ptr) * 2)
//             @ptrv(adr, ptr) = item
//             @ptrv(adr, uint, 1) = item_color
//         }
//     }
// }

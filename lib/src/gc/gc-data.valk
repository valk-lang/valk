
value state_new (0) 
value state_unused (1) 
value state_used (2) 
value state_shared_unused (3) 
value state_shared (4) 

value flag_in_disconnected (1)
value flag_in_reconnect (2)
value flag_in_blanks (4)
value flag_on_stack (8)
value flag_has_vtable (16)
value flag_custom_co_count (32)

struct GcData {
    state: u8
    flags: u8
    // on_stack: u8
    // has_vtable: u8
    // in_list: u8
    co_count: u16
    age: u8
    propc: u8
    block_offset: u16
    vtable: ptr

    // Flags
    fn is_on_stack() bool { return this.flags & flag_on_stack != 0 }
    fn set_on_stack() { this.flags = this.flags | flag_on_stack }
    fn remove_on_stack() { this.flags = this.flags & (255 - flag_on_stack) }
    //
    fn has_vtable() bool { return this.flags & flag_has_vtable != 0 }
    fn set_has_vtable() { this.flags = this.flags | flag_has_vtable }
    fn remove_has_vtable() { this.flags = this.flags & (255 - flag_has_vtable) }
    //
    fn is_in_disconnect() bool { return this.flags & flag_in_disconnected != 0 }
    fn set_in_disconnect() { this.flags = this.flags | flag_in_disconnected }
    fn remove_in_disconnect() { this.flags = this.flags & (255 - flag_in_disconnected) }
    //
    fn is_in_recon() bool { return this.flags & flag_in_reconnect != 0 }
    fn set_in_recon() { this.flags = this.flags | flag_in_reconnect }
    fn remove_in_recon() { this.flags = this.flags & (255 - flag_in_reconnect) }
    //
    fn is_in_blanks() bool { return this.flags & flag_in_blanks != 0 }
    fn set_in_blanks() { this.flags = this.flags | flag_in_blanks }
    fn remove_in_blanks() { this.flags = this.flags & (255 - flag_in_blanks) }
}

pointer GcItem {
    // Data
    fn data() GcData { return @offset(this, u8, -8).@cast(GcData) }

    // Ownership
    fn co_own() {
    }
}

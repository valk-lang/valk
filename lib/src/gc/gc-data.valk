
value state_new (0) 
value state_unused (1) 
value state_used (2) 
value state_shared_unused (3) 
value state_shared (4) 

value flag_in_disconnected (1)
value flag_in_reconnect (2)
value flag_in_blanks (4)
value flag_on_stack (8)
value flag_has_vtable (16)
value flag_custom_co_count (32)
value flag_still_co_owned (64)

struct GcData {
    state: u8
    flags: u8
    co_count: u16
    age: u8
    propc: u8
    block_offset: u16
    vtable: ptr
    //
    fn item() GcItem { return @offset(this, u8, 8).@cast(GcItem) }

    // Flags
    fn is_on_stack() bool { return this.flags & flag_on_stack != 0 }
    fn set_on_stack() { this.flags = this.flags | flag_on_stack }
    fn remove_on_stack() { this.flags = this.flags & (255 - flag_on_stack) }
    //
    fn has_vtable() bool { return this.flags & flag_has_vtable != 0 }
    fn set_has_vtable() { this.flags = this.flags | flag_has_vtable }
    fn remove_has_vtable() { this.flags = this.flags & (255 - flag_has_vtable) }
    //
    fn is_custom_co_count() bool { return this.flags & flag_custom_co_count != 0 }
    fn set_custom_co_count() { this.flags = this.flags | flag_custom_co_count }
    fn remove_custom_co_count() { this.flags = this.flags & (255 - flag_custom_co_count) }
    //
    fn is_still_co_owned() bool { return this.flags & flag_still_co_owned != 0 }
    fn set_still_co_owned() { this.flags = this.flags | flag_still_co_owned }
    fn remove_still_co_owned() { this.flags = this.flags & (255 - flag_still_co_owned) }
    //
    fn is_in_disconnect() bool { return this.flags & flag_in_disconnected != 0 }
    fn set_in_disconnect() { this.flags = this.flags | flag_in_disconnected }
    fn remove_in_disconnect() { this.flags = this.flags & (255 - flag_in_disconnected) }
    //
    fn is_in_recon() bool { return this.flags & flag_in_reconnect != 0 }
    fn set_in_recon() { this.flags = this.flags | flag_in_reconnect }
    fn remove_in_recon() { this.flags = this.flags & (255 - flag_in_reconnect) }
    //
    fn is_in_blanks() bool { return this.flags & flag_in_blanks != 0 }
    fn set_in_blanks() { this.flags = this.flags | flag_in_blanks }
    fn remove_in_blanks() { this.flags = this.flags & (255 - flag_in_blanks) }

    //
    fn co_own() {
        if this.is_custom_co_count() {
            let i = this.co_count
            co_count_index_incr(i)
        } else {
            let v = atomic_op(this.co_count + 1)
            if v > 65000 {
                let i = co_count_get_index()
                this.set_custom_co_count()
                this.co_count = i
            }
        }
    }

    fn dis_co_own() {
        if this.is_custom_co_count() {
            let i = this.co_count
            co_count_index_decr(i)
        } else {
            let v = atomic_op(this.co_count - 1)
        }
        if this.is_still_co_owned() {
            this.remove_still_co_owned()
            let adr = gc.disconnect_list.get(size_of(ptr))
            @ptrv(adr, ptr) = this.item()
        }
    }
}

pointer GcItem {
    // Data
    fn data() GcData { return @offset(this, u8, -8).@cast(GcData) }
}

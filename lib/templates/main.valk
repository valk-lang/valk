
@ignore_imut

use valk:gc
use valk:coro
use valk:core

fn __valk_main__(argc: i32, argv: ptr) i32 $entrance {
    // Init
    gc:thread_init()
    gc:GcLocal.init()
    
    //
    @allocas

    // Args
    let args = Array[String].new(8);
    let i = 0
    while i < argc {
        let arg = @ptrv(argv, cstring, i++)
        args.push(arg)
    }

    core:cli_args = args

    // Set global default values
    let gc = gc:local_gc

    #loop globals G T
    G = @global_default_value(G)
    #if is_gc_type(T)
    gc.add_global(@ref(G))
    #end
    #end

    // Add to shared gc
    gc.push_to_shared()

    // Run
    #if IS_TEST
        let main_coro = (co valk_run_all_tests()) @as coro:Coro
    #else
        let main_coro = (co main()) @as coro:Coro
    #end

    coro:Coro.loop(main_coro)

    gc:shutdown()
    return 0
}

#if IS_TEST
fn valk_run_all_tests() {
    let results = core:TestResults{}
    let tests = Array[coro:Coro].new(64)

    #loop tests as test_func
    tests.push((co test_func(results)) @as coro:Coro)
    #end

    each tests => test {
        coro:await_coro(test)
    }

    results.print()

    if !results.passed() {
        exit(1)
    }
}
#end

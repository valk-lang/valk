
use valk:utils
use valk:json

class Lsp {
    buf: utils:ByteBuffer
    index: uint (0)
    stage: uint (0)
    headers: Map[String] (map[String]{})
    data: json:Value (json:null_value())

    fn reset() {
        this.headers.clear()
        this.buf.clear()
        this.index = 0
        this.stage = 0
    }

    fn parse() {

        if this.stage == 0 {
            this.parse_headers() ! {
                log("Invalid headers")
                this.reset()
                return
            }
        }
        if this.stage == 1 {
            this.parse_content() ! {
                log("Invalid content")
                this.reset()
                return
            }
        }

            // let msg = buf.to(String).trim("\n")

            // let data = json:decode(msg) ! {
            //     log("Invalid JSON-RPC input: " + msg)
            //     continue
            // }

        this.stage = 0
    }

    fn parse_headers() !more !invalid {
        let buf = this.buf
        let data = buf.data
        let pos = this.index

        while true {
            let index = buf.index_of_byte('\r', pos) ! throw more
            if index == pos {
                // End of headers
                pos += 2
                break
            }

            // Read header
            let index2 = buf.index_of_byte(':', pos) ! throw invalid
            let nextch = buf.get(index + 1) ! throw more
            if index + 1 >= buf.length : throw more
            if (buf.get(index + 1) !? 0) != '\n' : throw invalid

            let key = buf.part(pos, index2 - pos).trim(" ").trim("\t")
            let value = buf.part(index2 + 1, index - index2 - 1).trim(" ").trim("\t")
            pos = index + 2
            this.index = pos

            this.headers.set(key.lower(), value)
        }

        this.stage = 1
        this.buf.clear_until(pos)
        this.index = 0
    }

    fn parse_content() !more !invalid {
        let len = (this.headers.get("content-length") !? "0").to_uint() ! throw invalid
        if this.buf.length < len : throw invalid 
        let content = this.buf.part(0, len)
        this.buf.clear_until(len)

        let data = json:decode(content) ! {
            log("Invalid JSON-RPC input: " + content)
            throw invalid
        }

        this.data = data
    }
}


use valk:json

extend Lsp {
    fn init(params: json:Value) {
        let resp = json:new_object()
        let caps = json:new_object()
        resp.set("capabilities", caps)

        let sync = json:new_object()
        caps.set("textDocumentSync", sync)

        sync.set("openClose", json:new_bool(true))
        sync.set("change", json:new_int(1))
        sync.set("save", json:new_int(1))

        caps.set("documentFormattingProvider", json:new_bool(false))
        caps.set("definitionProvider", json:new_bool(true))

        // Completion
        let comp = json:new_object()
        caps.set("completionProvider", comp)
        // Completion - triggers
        let chars = json:new_array()
        comp.set("triggerCharacters", chars)
        chars.add(json:new_string("."))
        chars.add(json:new_string(":"))

        // Sig help
        let sighelp = json:new_object()
        caps.set("signatureHelpProvider", sighelp)
        chars = json:new_array()
        sighelp.set("triggerCharacters", chars)
        chars.add(json:new_string("("))
        chars.add(json:new_string(","))
        chars = json:new_array()
        sighelp.set("retriggerCharacters", chars)
        chars.add(json:new_string(" "))

        // Diagnostics
        // let dia = json:new_object()
        // caps.set("diagnosticProvider", dia)
        // dia.set("interFileDependencies", json:new_bool(true))
        // dia.set("workspaceDiagnostics", json:new_bool(false))

        this.success(resp)
    }
}
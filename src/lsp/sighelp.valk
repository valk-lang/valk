
use build
use valk:json

extend Lsp {
    fn sighelp() {
        let data = this.data
        let params = data.get("params")
        let doc = params.get("textDocument")
        let pos = params.get("position")
        let uri = doc.get("uri").string()
        if uri.is_empty() : return
        uri = uri.ltrim("file://")
        this.file = uri
        this.line = pos.get("line").int().to(uint) + 1
        this.col = pos.get("character").int().to(uint) + 1
        this.build()
    }

    fn check_sig_help_func(active: uint, types: Array[build:Type], inf_type: ?build:Type, args: ?Array[build:Arg], func_info: build:FuncInfo) {

        let rett_types = func_info.rett_types
        let errors = func_info.errors

        if !this.is_sig_help : return
        let all_types = types.copy()
        let names = Array[String]{}
        if isset(args) {
            each args as arg {
                names.append(arg.name)
            }
        }
        if isset(inf_type) && all_types.length == names.length {
            all_types.append(inf_type)
            names.append("...")
        }
        let parts = Array[String]{}
        each all_types as type, i {
            let part = ""
            let name = names.get(i) !? null
            if isset(name) : part = name + ": "
            part += type
            parts.push(part)
        }
        let full = "fn(" + parts.join(", ") + ")"
        if rett_types.length > 0 {
            full += " "
            if rett_types.length > 1 : full += "("
            each rett_types as rett, i {
                if i > 0 : full += ", "
                full += rett
            }
            if rett_types.length > 1 : full += ")"
        }

        if func_info.can_error {
            each errors as code, name {
                full += " !" + name
            }
        }

        this.send_sig_help(full, parts, active)
    }

    fn send_sig_help(full: String, parts: Array[String], active: uint) {
        let res = json:new_object()
        let sigs = json:new_array()
        res.set("signatures", sigs)
        res.set("activeSignature", json:new_int(0))
        res.set("activeParameter", json:new_uint(active))

        let sig = json:new_object()
        let params = json:new_array()
        sigs.add(sig)

        sig.set("label", json:new_string(full))
        sig.set("parameters", params)
        sig.set("activeParameter", json:new_uint(active))

        each parts as part {
            let item = json:new_object()
            params.add(item)
            item.set("label", part)
        }

        this.success(res)
    }
}

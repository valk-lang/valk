
use valk:json
use build

fn convert_to_markdown(b: build:Build, doc: json:Value) String {

    let str = "\n# Documentation\n\n"

    let namespaces = doc.get("namespaces").map()

    str += "Namespaces: "
    let count = 0
    each namespaces as ns, ns_name, i {
        if count > 0 : str += " | "

        let classes = ns.get("classes").map()
        let funcs = ns.get("functions").map()
        let globals = ns.get("globals").map()
        if funcs.length == 0 && classes.length == 0 && globals.length == 0 : continue

        str += "[%ns_name](#%ns_name)"
        count++
    }

    str += "\n\n---\n\n"

    each namespaces as ns, ns_name {

        let classes = ns.get("classes").map()
        let funcs = ns.get("functions").map()
        let globals = ns.get("globals").map()
        if funcs.length == 0 && classes.length == 0 && globals.length == 0 : continue

        let ns_str = "# " + ns_name + "\n\n"

        if funcs.length > 0 {
            let funcs_str = "## Functions for '" + ns_name + "'\n\n```js\n"
            each funcs as func, name {
                let func_str = md_func(ns_name, name, func)
                funcs_str += func_str
            }
            funcs_str += "```\n\n"
            ns_str += funcs_str
        }
        if classes.length > 0 {
            let classes_str = ""
            each classes as class, name {
                let class_str = md_class(ns_name, name, class)
                classes_str += class_str
            }
            ns_str += "## Classes for '" + ns_name + "'\n\n" + classes_str
        }
        if globals.length > 0 {
            let sub = "## Globals for '" + ns_name + "'\n\n```js\n"
            each globals as g, name {
                let token = g.get("shared").bool() ? "shared" : "global"
                sub += g.get("act").string() + " " + token + " " + ns_name + ":" + name + " : " + g.get("type").string() + "\n"
            }
            ns_str += sub + "```\n\n"
        }

        str += ns_str
    }

    return str
}

fn md_class(ns_name: String, name: String, class: json:Value) String {
    // let str = "### " + ns_name + ":" + name + "\n\n"
    let str = ""
    str += "```js\n"
    str += class.get("act").string() + " " + ns_name + ":" + name + " {\n"
    let props = class.get("properties").map()
    each props as prop, prop_name {
        str += "    " +  prop.get("act").string() + " " + prop_name + ": " + prop.get("type").string() + "\n"
    }

    let funcs = class.get("functions").map()
    if funcs.length > 0 {
        each funcs as func, name {
            let func_str = md_func("", name, func)
            str += "    " + func_str
        }
    }

    str += "}\n```\n\n"
    return str
}

fn md_func(ns_name: String, name: String, func: json:Value) String {
    let str = func.get("act").string() + " "
    if !ns_name.is_empty() : str += ns_name + ":"
    str += name + "("
    let args = func.get("arguments").array()

    each args as arg, i {
        if i > 0 : str += ", "
        str += arg.get("name").string() + ": " + arg.get("type").string()
        if arg.has("default-value") {
            str += " (" + arg.get("default-value").string() + ")"
        }
    }

    str += ") "
    str += func.get("return-type").string()
    str += "\n"

    return str
}
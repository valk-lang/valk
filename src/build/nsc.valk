
use valk:fs
use helper

class Nsc {
    pkc: Pkc
    build: Build
    name: String
    dir: String
    scope: Scope
    default_unit: Unit

    static fn new(pkc: Pkc, name: String, dir: String, default_unit: Unit) Nsc {

        return Nsc {
            pkc: pkc
            build: pkc.build
            name: name
            dir: dir
            scope: Scope.new(sc_nsc, null)
            default_unit: default_unit
        }
    }

    fn load_files(u: Unit) {
        let dir = this.dir
        let b = this.pkc.build
        if b.verbose > 2 : b.log("# Loading files from: " + dir)
        let files = fs:files_in(dir)
        each files as file {
            if file.ends_with(".valk") {
                this.load_fc(file, u)
            }
        }
    }

    fn load_fc(path: String, u: Unit) Fc {
        let b = this.pkc.build
        let fcs = b.fc_by_path
        if fcs.has(path) {
            b.error("Valk file loaded twice: " + path)
        }
        // Load file
        if b.verbose > 2 : b.log("> Loading file: " + path)
        let fc = Fc.init(this, this, path, u)
        fcs.set(path, fc)
        return fc
    }
    fn load_header_fc(path: String) Fc {
        let b = this.pkc.build
        let fcs = b.fc_by_path
        if fcs.has(path) {
            let fc = fcs.get(path) ! b.error("load_fc bug")
            return fc
        }
        // Load header
        if b.verbose > 2 : b.log("> Loading header: " + path)
        let fc = Fc.init(b.nsc_main(), this, path, this.default_unit)
        fcs.set(path, fc)
        return fc
    }
    fn load_valk_lib_fc(name: String, u: Unit) Fc {
        let path = helper:add(helper:add(helper:valk_lib_dir(), "templates"), name)
        return this.load_fc(path, u)
    }

    fn export_name(name: String) String {
        let pn = this.pkc.name
        let ns = this.name
        if pn == "main" : pn = "" else: pn += "__"
        if ns == "main" : ns = "" else: ns += "__"
        return pn + ns + name
    }
    fn display_name(name: String) String {
        let pn = this.pkc.name
        let ns = this.name
        if pn == "main" : pn = "" else: pn += ":"
        if ns == "main" : ns = "" else: ns += ":"
        return pn + ns + name
    }
}

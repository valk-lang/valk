
use valk:fs
use helper

struct Nsc {
    pkc: Pkc
    build: Build
    name: String
    dir: String
    scope: Scope
    unit: Unit

    static fn new(pkc: Pkc, name: String, dir: String) Nsc {

        let b = pkc.build
        let base = b.cache_dir + "/" + name + "_" + helper:ctxhash(dir) 
        let path_o = base + ".o"
        let path_ir = base + ".ir"
        let path_json = base + ".json"

        let u = Unit {
            build: pkc.build
            path_o: path_o
            path_ir: path_ir
            path_json: path_json
        }

        return Nsc {
            pkc: pkc
            build: pkc.build
            name: name
            dir: dir
            scope: Scope.new(null)
            unit: u
        }
    }

    fn load_files() {
        let dir = this.dir
        let b = this.pkc.build
        if b.verbose > 2 : b.log("# Loading files from: " + dir)
        let files = fs:files_in(dir)
        each files as file {
            if file.ends_with(".valk") {
                this.load_fc(file)
            }
        }
    }

    fn load_fc(path: String) Fc {
        let b = this.pkc.build
        let fcs = b.fc_by_path
        if fcs.has(path) {
            b.error("Valk file loaded twice: " + path)
        }
        // Load file
        if b.verbose > 2 : b.log("> Loading file: " + path)
        let fc = Fc.init(this, path)
        b.fc_by_path.set(path, fc)
        return fc
    }

    fn export_name(name: String) String {
        return this.pkc.name + "__" + this.name + "__" + name
    }
    fn display_name(name: String) String {
        return this.pkc.name + ":" + this.name + ":" + name
    }
}


use helper

fn read_generic_names(p: Parser) Array[String] {
    let names = array[String]{}
    while true {
        let name = p.read_word(true, false)
        if names.contains(name) : p.error("Duplicate name for generic type")
        names.push(name)
        p.expect2(",", "]", true, false)
        if p.word_is("]") : break
    }
    return names
}

fn get_generated_unit(b: Build, units: Array[Unit]) Unit {
    if units.length == 1 {
        let first = units.get(0) ? null
        if isset(first) : return first
    }
    generic_sort_units(units)
    let str = ""
    each units as u {
        str += u.path_o
    }
    let hash = helper:ctxhash(str)
    let u = Unit.new(b, "shared_namespace_" + hash, hash)
    return u
}

fn generic_sort_units(units: Array[Unit]) {
    let len_ = units.length
    if len_ < 2 { return }

    let v = true
    let i : uint = 0
    let len = len_ - 1
    while i < len && v {
        v = false
        let j : uint = 0
        let until = len - i
        while j < until {
            let item = units.get(j) ! { break }
            let next = units.get(j + 1) ! { break }
            if item > next {
                units.swap(j, j + 1)
                v = true
            }
            j++
        }
        i++
    }
}

fn read_func_generic(p: Parser, scope: Scope, func: Func) Func {
    let names = func.generic_names
    if !isset(names) : p.error("Missing function generic names (bug).")
    let generics = func.generics
    if !isset(generics) : p.error("Missing function generic list (bug).")
    p.expect("[", false, false)
    let units = array[Unit]{}
    units.push(func.unit)
    let types = array[Type]{}
    let last_i = names.length - 1
    each names as k, v {
        let type = read_type(p, scope, false)
        p.expect(k == last_i ? "]" : ",", true, true)
        types.push(type)
        let type_class = type.class 
        if isset(type_class) {
            units.push(type_class.unit, true)
        }
    }

    return get_func_generic(p.build, func, types)
}

fn get_func_generic(b: Build, func: Func, types: Array[Type]) Func {

    let names = func.generic_names
    if !isset(names) : b.error("Missing function generic names (bug)")
    let generics = func.generics
    if !isset(generics) : b.error("Missing function generic list (bug)")

    let str = "[" 
    each types as i, type {
        if i > 0 : str += ", "
        str += type
    }
    str += "]"
    let hash = helper:ctxhash(str)
    let gf = generics.get(hash) ? null
    if isset(gf) : return gf

    let u = func.build.generated_unit()

    let ename = func.export_name + "__" + hash
    let dname = func.display_name + str

    let gfunc = u.new_func(func.fc, func.act, ename, dname, null, func.chunk_args)
    gfunc.is_exit = func.is_exit
    gfunc.is_static = func.is_static
    gfunc.chunk_args = func.chunk_args
    gfunc.chunk_body = func.chunk_body

    generics.set(hash, gfunc)

    let gtypes = Map[Type].new()
    gfunc.generic_types = gtypes

    each names as k, name {
        let type = types.get(k) ! b.error("Missing function generic types (bug)")
        gtypes.set(name, type)
        // gfunc.scope.set_idf_b(b, name, Idf.for_type(type))
    }

    parse_func_args(gfunc)

    return gfunc
}

fn read_class_generic(p: Parser, scope: Scope, class: Class) Class {
    let names = class.generic_names
    if !isset(names) : p.error("Missing class generic names (bug)")
    let generics = class.generics
    if !isset(generics) : p.error("Missing class generic list (bug)")
    p.expect("[", false, false)
    let units = array[Unit]{}
    units.push(class.unit)
    let str = "["
    let types = array[Type]{}
    let last_i = names.length - 1
    each names as k, v {
        if k > 0 : str += ", "
        let type = read_type(p, scope, false)
        p.expect(k == last_i ? "]" : ",", true, true)
        types.push(type)
        let type_class = type.class 
        if isset(type_class) {
            units.push(type_class.unit, true)
        }
        str += type
    }
    str += "]"
    let hash = helper:ctxhash(str)
    let gf = generics.get(hash) ? null
    if isset(gf) : return gf

    let u = class.build.generated_unit()

    let name = class.name + "__" + hash
    let ename = class.export_name + "__" + hash
    let dname = class.display_name + str

    let gclass = u.new_class(class.fc, class.act, name, ename, dname, class.type, null, class.chunk)
    gclass.chunk = class.chunk

    generics.set(hash, gclass)

    each names as k, name {
        let type = types.get(k) ! break
        gclass.scope.set_idf(p, name, Idf.for_type(type))
    }

    //
    class_parse_props(gclass)

    each gclass.funcs as name, func {
        parse_func_args(func)
    }

    if class.build.class_sizes_known {
        gclass.determine_size() ! p.error("Cannot determine class size of: " + gclass.get_type())
    }

    return gclass
}
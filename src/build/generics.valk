
use helper
use valk:utils

class GenericName {
    name: String
    is_type: bool (true)
    is_prop: bool (false)
}

fn read_generic_names(p: Parser) Map[GenericName] {
    let names = Map[GenericName]{}
    while true {
        let name = p.read_word(true, false)
        if names.has(name) : p.error("Duplicate name for generic type")
        let gn = GenericName { name: name }
        names.set(name, gn)

        p.tok(true, false)
        if p.word_is(":") {

            while true {
                p.tok(true, false)
                if p.word_is("PROP_TYPE") {
                    gn.is_prop = true

                } else if p.word_is(",") || p.word_is("]") {
                    break
                } else {
                    p.error("Unexpected token: " + p.word())
                }
            }

        }

        if p.word_is(",") {
            continue
        } else if p.word_is("]") {
            break
        } else {
            p.error("Unexpected token: " + p.word())
        }
    }
    return names
}

fn get_generated_unit(b: Build, units: Array[Unit]) Unit {
    if units.length == 1 {
        let first = units.get(0) !? null
        if isset(first) : return first
    }
    generic_sort_units(units)
    let str = ""
    each units as u {
        str += u.path_o
    }
    let hash = helper:ctxhash(str)
    let u = Unit.new(b, "shared_namespace_" + hash, hash)
    return u
}

fn generic_sort_units(units: Array[Unit]) {
    let len_ = units.length
    if len_ < 2 { return }

    let v = true
    let i : uint = 0
    let len = len_ - 1
    while i < len && v {
        v = false
        let j : uint = 0
        let until = len - i
        while j < until {
            let item = units.get(j) ! { break }
            let next = units.get(j + 1) ! { break }
            if item > next {
                units.swap(j, j + 1)
                v = true
            }
            j++
        }
        i++
    }
}

fn read_func_generic(p: Parser, scope: Scope, func: Func) Func {
    let names = func.generic_names
    if !isset(names) : p.error("Missing function generic names (bug).")
    let generics = func.generics
    if !isset(generics) : p.error("Missing function generic list (bug).")
    p.expect("[", false, false)
    let units = Array[Unit]{}
    units.push(func.unit)
    let types = Array[Type]{}
    let last_i = names.length - 1
    let k : uint = 0
    each names as gname, name {
        let type = read_type(p, scope, false)
        p.expect(k++ == last_i ? "]" : ",", true, true)
        types.push(type)
        let type_class = type.class 
        if isset(type_class) {
            units.push(type_class.unit, true)
        }
    }

    return get_func_generic(func, types)
}

fn get_func_generic(func: Func, types: Array[Type], generic_arg_names: ?Array[String] (null)) Func {

    let b = func.build

    let generics = func.generics ?? <{
        let gs = Map[Func]{}
        func.generics = gs
        return gs
    }

    let buf = utils:ByteBuffer.new()
    let str = generic_types_to_str(types, buf, true)
    let hash = helper:ctxhash(str)
    let gf = generics.get(hash) !? null
    if isset(gf) : return gf

    // New Func
    let display = generic_types_to_str(types, buf, false)

    // let u = b.generated_unit()
    let u = func.unit
    // let u = get_generated_unit(func.build, units)

    let gfunc = u.new_func(func.fc, func.parse_fc, func.act, func.export_name + "__" + hash, null, func.chunk_args)
    gfunc.def_chunk = func.def_chunk
    gfunc.display_name = func.display_name + display
    gfunc.is_exit = func.is_exit
    gfunc.is_static = func.is_static
    gfunc.chunk_args = func.chunk_args
    gfunc.chunk_body = func.chunk_body
    gfunc.class = func.class
    gfunc.arg_scope.parent = func.arg_scope.parent
    gfunc.generic_names = func.generic_names
    gfunc.gen_docs = false
    gfunc.generic_args_defined = isset(generic_arg_names)

    generics.set(hash, gfunc)

    let gtypes = gfunc.generic_types

    let k : uint = 0;
    let names = func.generic_names
    if isset(names) {
        each names as gname, name {
            let type = types.get(k++) ! b.error("Missing generic type (bug#1)")
            gtypes.set(name, type)
            gfunc.arg_scope.set_idf_build(b, name, Idf.for_type(type))
        }
    }

    if isset(generic_arg_names) {
        each generic_arg_names as name {
            let type = types.get(k++) ! b.error("Missing generic type (bug#2)")
            gtypes.set(name, type)
            gfunc.arg_scope.set_idf_build(b, name, Idf.for_type(type))
        }
    }

    let class = gfunc.class
    if isset(class) {
        gfunc.arg_scope.set_idf_build(b, "SELF", Idf.for_type(class.get_type()))
    }

    parse_func_args(gfunc)

    return gfunc
}

fn get_generic_arg_func(p: Parser, base: Func, values: Array[Value]) Func {
    let b = base.build
    let gtypes = Array[Type]{}
    let gnames = Array[String]{}

    each base.generic_types as bt {
        gtypes.push(bt)
    }

    each base.args as arg, i {
        if !arg.is_generic : continue
        let v = values.get(i) ! p.error("Missing function call arguments")
        gtypes.push(v.rett)
        gnames.push(arg.generic_name)
    }
    let func = get_func_generic(base, gtypes, gnames)
    return func
}

fn read_class_generic(p: Parser, scope: Scope, class: Class) Class {
    let names = class.generic_names
    if !isset(names) : p.error("Missing class generic names. (bug)")
    let generics = class.generics
    if !isset(generics) : p.error("Missing class generic list (bug)")

    // Get generics from suggest type
    if !p.next_word_is("[", false, false, false) {
        let pp : ?Parser = p
        while isset(pp) {
            let suggest = p.suggest_type
            if isset(suggest) {
                let sclass = suggest.class
                if isset(sclass) {
                    if sclass.generic_from == class : return sclass
                }
            }
            pp = pp.parent
        }
    }

    p.expect("[", false, false)

    let str = "["
    let types = Array[Type]{}
    let last_i = names.length - 1
    let k : uint = 0
    each names as gname, name {
        if k > 0 {
            str += ", "
        }

        let type = read_type(p, scope, false)
        p.expect(k == last_i ? "]" : ",", true, true)

        if gname.is_prop && (class.is_imut || class.is_async) {
            type = type.get_imut_or_async()
        }

        types.push(type)
        k++
    }
    
    return get_class_generic(p.build, class, types)
}

fn get_class_generic(b: Build, class: Class, types: Array[Type]) Class {

    let generics = class.generics
    if !isset(generics) : b.error("Missing class generic list (bug)")

    let buf = utils:ByteBuffer.new()
    let str = generic_types_to_str(types, buf, true)
    let hash = helper:ctxhash(str)
    let gf = generics.get(hash) !? null
    if isset(gf) : return gf

    // New Class
    let display = generic_types_to_str(types, buf, false)

    // let u = class.build.generated_unit()
    let u = class.unit

    let gclass = u.new_class(class.fc, class.act, class.name + "__" + hash, class.type, null, class.chunk)
    gclass.def_chunk = class.def_chunk
    gclass.chunk = class.chunk
    gclass.display_name = class.display_name + display
    gclass.generic_from = class
    gclass.is_imut = class.is_imut
    gclass.is_async = class.is_async
    gclass.generic_types = types
    gclass.generic_names = class.generic_names
    gclass.extends = class.extends
    gclass.is_mode = class.is_mode
    gclass.mode_for_chunk = class.mode_for_chunk
    gclass.gen_docs = false

    generics.set(hash, gclass)

    //
    class_set_generic_types(gclass)
    if gclass.is_mode : class_read_modes_for(gclass)
    class_parse_props(gclass)

    each gclass.funcs as func, name {
        parse_func_args(func)
    }
    each gclass.groups as group, name {
        each group.funcs as func, name {
            parse_func_args(func)
        }
    }

    if class.build.class_sizes_known {
        gclass.determine_size() ! b.error("Cannot determine class size of: " + gclass.get_type())
    }

    return gclass
}

fn generic_types_to_str(types: Array[Type], buf: utils:ByteBuffer, full: bool) String {
    buf.clear()
    buf.append_str("[")
    each types as type, i {
        if i > 0 {
            buf.append_str(", ")
        }
        buf.append_str(type.to_str(full))
    }
    buf.append_str("]")
    return buf.to(String)
}

struct Test {
    name: String
    func: Func
    entry_decl: ?Decl (null)
}

fn test_init_scope(func: Func) {
    let scope = func.scope
    let b = func.build
    let test = func.test
    if !isset(test) : b.error("Missing 'test' object (bug)")

    // Create test entry
    let entry_class = b.valk_class("core", "TestEntry")
    let chunk = func.chunk_body
    let test_file = "?"
    let test_line : uint = 0
    if isset(chunk) {
        test_line = chunk.line
        let fc = chunk.fc
        if isset(fc) {
            test_file = fc.path
        }
    }

    let init_values = Array[Value].new()
    init_values.push(vgen_string(b, test.name))
    init_values.push(vgen_string(b, test_file))
    init_values.push(vgen_int(test_line @as int, b.valk_type("type", "uint")))

    let init_func = b.valk_class_func("core", "TestEntry", "init")
    let init = vgen_func_call(b, scope, vgen_func_ptr(init_func), init_values)
    // init = init.extract_func_call_value() ! b.error("Missing function call value for test (bug)")

    let entry_decl = Decl.new(entry_class.get_type(), false)
    scope.add_decl(entry_decl)
    test.entry_decl = entry_decl
    
    scope.ast.push(Token {
        type: tk_declare
        decl: entry_decl
        value1: init
    })
}

fn test_defer(func: Func, scope: Scope) {
    let b = func.build
    let test = func.test
    if !isset(test) : b.error("Missing function test object (bug)")
    let entry_decl = test.entry_decl
    if !isset(entry_decl) : b.error("Missing test entry decl object (bug)")

    // TestResults arg
    let arg = func.args.get(0) ! b.error("Missing test first argument (bug)")

    // Add entry
    let add_values = Array[Value].new()
    add_values.push(vgen_decl(arg.decl))
    add_values.push(vgen_decl(entry_decl))

    let add_func = b.valk_class_func("core", "TestResults", "submit_entry")
    let add = vgen_func_call(b, scope, vgen_func_ptr(add_func), add_values)

    scope.ast.push(Token {
        type: tk_statement
        value1: add
    })
}

fn parse_assert(p: Parser, scope: Scope) Value {
    let b = p.build
    let func = p.func
    if !isset(func) : p.error("You cannot use 'assert' outside a function or test")

    p.expect("(", false, false)

    // Read assert
    let chunk = p.chunk
    let i_start = p.i
    let assert_value = read_value(p, scope)
    if !assert_value.rett.is_bool() : p.error("The assert value must be of type 'bool' instead of '" + assert_value.rett + "'")
    let i_end = p.i
    let code = chunk.content.byte_sub_str(i_start, i_end - i_start)

    p.expect(")", true, true)

    //
    let test = func.test

    let assert_func = func.is_test ?
    b.valk_class_func("core", "TestEntry", "assert_test")
    : b.valk_class_func("core", "TestEntry", "assert_panic")

    let values = Array[Value].new()
    if func.is_test {
        if !isset(test) : p.error("Missing test object (bug)")
        let entry_decl = test.entry_decl
        if !isset(entry_decl) : p.error("Missing test entry decl object (bug)")
        values.push(vgen_decl(entry_decl))
    }
    values.push(assert_value)
    values.push(vgen_string(b, code))
    values.push(vgen_string(b, p.get_file() ? "?"))
    values.push(vgen_int(p.line @as int, b.valk_type("type", "uint")))

    let call = vgen_func_call(b, scope, vgen_func_ptr(assert_func), values)

    return call
}

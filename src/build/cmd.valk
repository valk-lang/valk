
use helper
use valk:core
use valk:fs
use valk:time
use valk:gc
use doc

fn run(args: Array[String]) {

    let valid_flags = array[String]{
        "--help", "-h", "-o", "--target", "--def", "--test", "-t", "--filter", "--run", "-r", "--clean", "-c", "-v", "-vv", "-vvv", "-L", "-l", "--static", "--prefer-valk-libs", "--no-warn", "-nw", "--no-opt", "--docs"
    }

    let is_docs = args.contains("--docs")
    if is_docs {
        valid_flags.append_many(array[String]{ "--markdown", "--no-private" })
    }

    let has_value = array[String]{ "-o", "--target", "--def", "-L", "-l", "--filter" }
    let cli = helper:parse_cli_args(args, valid_flags, has_value)

    if cli.invalid.length > 0 {
        build_error("Unknown build argument: " + cli.invalid.get(0) !? "?")
    }

    let dir: ?String = null
    let files = array[String]{}
    each cli.inputs as arg {
        if arg.ends_with(".valk") {
            files.push(arg)
            continue
        }
        if !fs:is_dir(arg) {
            build_error("Invalid project directory: " + arg)
        }
        if isset(dir) {
            build_error("You can only pass 1 project directory in your cli arguments\nDir1: " + dir + "\nDir2: " + arg)
        }
        dir = arg
    }

    if cli.flags.contains("-h") || cli.flags.contains("--help") : help(0)

    if files.length == 0 && !is_docs {
        println("You did not mention any *.valk files in your build command\nNothing to compile")
        help(1)
    }
    if !isset(dir) && is_docs {
        println("Missing project directory in your cli arguments")
        help(1)
    }

    let conf_dir = ""
    if isset(dir) : conf_dir = dir
    else : files.get(0) -> ff : conf_dir = fs:dir_of(ff)
    if conf_dir.is_empty() : conf_dir = fs:cwd()
    conf_dir = helper:resolve(conf_dir)

    let is_test = cli.flags.contains("--test") || cli.flags.contains("-t")
    let run = cli.flags.contains("--run") || cli.flags.contains("-r")
    let optimize = cli.flags.contains("--no-opt") ? false : true

    let target = get_target(cli)
    let verbose = 0
    if cli.flags.contains("-v") : verbose = 1
    if cli.flags.contains("-vv") : verbose = 2
    if cli.flags.contains("-vvv") : verbose = 3

    let hash = conf_dir
    hash += "||"
    hash += #STR(VERSION)
    hash += target.os
    hash += target.arch
    hash += optimize ? "1" : "0"
    hash += is_test ? "1" : "0"
    hash += "|" + cli.get_first_values_for("--def", false) !? ""

    each files as file {
        hash += "|" + file
    }

    hash = helper:ctxhash(hash)

    let home = fs:home_dir() ! build_error("Cannot find user home directory, so we cannot create the cache directory")
    let cache_dir = helper:add(home, ".valk")
    if !fs:is_dir(cache_dir) : fs:mkdir(cache_dir) ! build_error("Failed to create cache directory: " + cache_dir)
    cache_dir = helper:add(cache_dir, "cache")
    if !fs:is_dir(cache_dir) : fs:mkdir(cache_dir) ! build_error("Failed to create cache directory: " + cache_dir)
    cache_dir = helper:add(cache_dir, hash)
    if !fs:is_dir(cache_dir) : fs:mkdir(cache_dir) ! build_error("Failed to create cache directory: " + cache_dir)

    if verbose > 0 : helper:msg("üì¶", "Cache directory: " + cache_dir)

    let path_out = cli.get_first_values_for("-o") !? helper:add(cache_dir, "out")
    if target.os == "win" && !path_out.ends_with(".exe") : path_out += ".exe"

    let b = Build {
        mode: is_docs ? b_doc : b_exe
        target: target
        verbose: verbose
        cache_dir: cache_dir
        path_out: path_out
        cli: cli
        is_test: is_test
        is_clean_build: cli.flags.contains("--clean") || cli.flags.contains("-c")
        is_static: cli.flags.contains("--static")
        no_warn: cli.flags.contains("--no-warn") || cli.flags.contains("-nw")
        optimize: optimize
    }

    b.set_cm_defs(cli)

    let start = time:microtime()

    // Setup main package & namespace
    let pkc_main = Pkc.new(b, "main")
    pkc_main.set_dir(conf_dir, false)
    pkc_main.pkc_by_name.set("main", pkc_main)
    pkc_main.use_libs = libs_prefer

    let default_unit = Unit.new(b, "main", helper:ctxhash(conf_dir))
    let nsc_main = Nsc.new(pkc_main, "main", conf_dir, default_unit)
    pkc_main.namespaces.set("main", nsc_main)
    b.nsc_main_ = nsc_main

    // Load valk package
    let vlk = pkc_main.load_sub_pkc("valk");
    b.pkc_valk_ = vlk
    vlk.use_libs = cli.flags.contains("--prefer-valk-libs") ? libs_prefer : libs_use

    //
    b.get_vtable_index("gc_action")
    b.get_vtable_index("gc_free")

    // Load valk package core namespaces
    vlk.nsc("core")
    vlk.nsc("gc")
    vlk.nsc("io")
    vlk.nsc("type")
    vlk.nsc("mem")

    // Load default fc's
    let generated_unit = Unit.new(b, "valk_generated", "code")
    b.generated_unit_ = generated_unit
    nsc_main.load_valk_lib_fc("main.valk", generated_unit)

    // Load cli files
    each files as file {
        let fc = nsc_main.load_fc(file, nsc_main.default_unit)
    }

    // Doc gen : load all namespaces
    if b.mode == b_doc : pkc_main.load_all_namespaces()

    // Run
    stage_fc_pipeline(b)

    // Doc gen : run
    if b.mode == b_doc {
        doc:doc_gen(b)
        return
    }

    // Info
    if verbose > 0 {
        let mem = gc:mem_usage_peak.to(float)
        helper:msg("üìù", "LOC: " + b.LOC)
        helper:msg("üìà", "Compiler memory usage: " + (mem / 1024 / 1024) + " mb")
    }
    let duration : float = time:microtime() - start

    if run {
        let cmd = path_out
        each cli.run_args as arg {
            cmd += " " + arg
        }
        let code, out = core:exec(cmd, true)
        exit(code)
    } else {
        helper:msg("‚úÖ", "Compiled in " + duration / 1000000 + "s")
    }
}

fn build_error(msg: String) $exit {
    println("# Build error")
    println("-----------------------------")
    println(msg)
    println("-----------------------------")
    exit(1)
}

fn help(exit_code: i32) $exit {
    print("\n")
    println("Usage: valk build {.valk-file(s)} [{config-dir}] -o {outpath}");
    println("       valk build {.valk-file(s)} [{config-dir}] --run");
    print("\n")

    println("Options:")
    print("\n")
    println("  -o                  Set outpath");
    println("  --run -r            Run program after compiling");
    // println("  --watch -w          Watch files & rebuild when code changes");
    println("  --test -t           Build tests");
    println("  --clean -c          Ignore cache");
    // println("  --debug -d          generate debug info");
    println("  --no-opt            Build without optimizations");
    print("\n");

    println("  --def               Define compile condition variables");
    println("                      Format: VAR1=VAL,VAR2=VAL");
    println("  --target            Compile for a specific os/arch");
    println("                      linux-x64, macos-x64, macos-arm64, win-x64");
    println("  --no-warn -nw       Disable warning messages");
    print("\n");

    println("  --prefer-valk-libs  Prefer valk libraries over OS libraries");
    print("\n");

    println("  -v -vv -vvv         Show compile info");
    println("  --help -h           Build command usage info");
    print("\n");

    exit(exit_code)
}

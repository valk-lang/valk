
fn stage_props(b: Build) {

    if b.verbose > 2 : b.log("> Stage 2.2: Read class properties")

    each b.units as unit {
        each unit.classes as class {
            class_parse_props(class)
        }
    }

    stage_class_sizes(b)
}


fn class_parse_props(class: Class) {
    let p = Parser.new(class.chunk, null)

    let words = array[String]{}
    while true {
        let t = p.tok(true, true)

        if t == tok_end {
            p.error_eof()
        }
        if p.sign_is("}") {
            break
        }

        words.clear()

        let act = act_private_nsc

        while t == tok_word {
            let word = p.word()
            if words.length == 0 && p.char(0) == '.' {
                t = p.tok(false, false)
                t = p.tok(false, false)
                word = word + "." + p.word()
            }
            words.push(word)
            if words.length == 6 : p.error("Invalid class property/function definition syntax")
            t = p.tok(true, false)
        }
        if words.length == 0 : p.error_token()

        let name = words.pop() ! p.error("Missing name (bug)")

        // Property
        if p.sign_is(":") {
            if words.length > 1 : p.error("Invalid class property definition syntax")
            if words.length == 1 {
                let word = words.get(0) ! p.error("Missing access type (bug)")
                act = string_to_act(word) ! p.error("Invalid access type: '" + word + "'")
            }
            class_parse_prop(p, class, act, name)
            continue
        }

        // Function
        let w = words.pop() ! p.error("Invalid property/function definition")
        if w != "fn" : p.error("Invalid property/function definition")

        let is_static = false
        let is_exit = false

        let next = words.pop() ? null
        if isset(next) {
            if next == "exit" {
                is_exit = true
                next = words.pop() ? null
            }
        }
        if isset(next) {
            if next == "static" {
                is_static = true
                next = words.pop() ? null
            }
        }
        if isset(next) {
            act = string_to_act(next) ! p.error("Unexpected token: '" + next + "'")
            next = words.pop() ? null
        }
        if isset(next) {
            p.error("Unexpected token: '" + next + "'")
        }
    }
}

fn class_parse_prop(p: Parser, class: Class, act: int, name: String) Prop {
    let type = read_type(p, class.scope)
    return Prop {
        name: name
        type: type
    }
}

fn string_to_act(word: String) int !invalid {
    if word == "pub" : return act_public
    if word == "private" : return act_private_fc
    if word == "readonly" : return act_readonly_fc
    throw invalid
}

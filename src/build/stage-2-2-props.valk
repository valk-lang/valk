
fn stage_props(b: Build) {

    if b.verbose > 2 : b.log("> Stage 2.2: Read class properties")

    each b.modes as class {
        class_read_modes_for(class)
    }

    // Generate example generics for docs
    if b.mode == b_doc {
        // Classes
        each b.classes as class {
            if !class.is_generic_base : continue
            let gnames = class.generic_names
            if !isset(gnames) : continue
            let gtypes = Array[Type]{}
            each gnames as gname {
                gtypes.push(Type{ type: ty_any, custom_name: gname.name, build: b })
            }
            let gclass = get_class_generic(b, class, gtypes)
            gclass.gen_docs = true
            gclass.name = class.name
        }
        // Functions
        each b.functions as func {
            if !func.is_generic_base : continue
            let gnames = func.generic_names
            if !isset(gnames) : continue
            let gtypes = Array[Type]{}
            each gnames as gname {
                gtypes.push(Type{ type: ty_any, custom_name: gname.name, build: b })
            }
            let gfunc = get_func_generic(func, gtypes)
            gfunc.gen_docs = true
            gfunc.name = func.name
        }
    }


    //
    each b.units as unit {
        each unit.classes as class {
            class_parse_props(class)
        }
    }

    stage_class_sizes(b)
}

fn class_read_modes_for(class: Class) {
    if class.is_generic_base : return
    let chunk = class.mode_for_chunk
    let b = class.build
    if !isset(chunk) : b.error("Missing class mode chunk (bug)")
    let p = Parser.new(chunk, null)
    let for_type = read_type(p, class.scope)
    let for = for_type.class
    if !isset(for) : b.error("You cannot create a 'mode' for the type: " + for_type)
    class.type = for.type
    class.is_signed = for.is_signed
    class.packed = for.packed
    class.is_imut = for.is_imut
    class.is_async = for.is_async
    class.mode_for_class = for
}

fn class_set_generic_types(class: Class) {
    let types = class.generic_types
    if !isset(types) : return
    // Set generic names
    let b = class.build
    let names = class.generic_names
    if !isset(names) : b.error("Missing class generic names (bug), class: " + class.display_name)

    let k : uint = 0
    each names as gname, name {
        let type = types.get(k++) ! break
        class.scope.set_idf_build(b, name, Idf.for_type(type))
    }
}

fn class_parse_props(class: Class) {

    if class.is_generic_base : return
    if class.parsed_props : return
    class.parsed_props = true

    let b = class.build
    let chunk = class.chunk
    let gtypes = class.generic_types
    if !isset(chunk) : return

    let p = Parser.new(chunk, null)
    class_parse_props_chunk(p, class.scope, class, false)

    each class.extends as ex {
        if b.verbose > 2 : b.log("Parse extend for: " + ex.class.display_name)

        let scope = ex.scope.sub_scope(sc_default)
        if isset(gtypes) {
            // Set generic names
            let names = ex.generic_names
            if !isset(names) : b.error("Missing extend generic names (bug)")

            let k : uint = 0
            each names as gname, name {
                let type = gtypes.get(k++) ! break
                scope.set_idf_build(b, name, Idf.for_type(type))
            }
        }

        p.set_chunk(ex.body)
        class_parse_props_chunk(p, scope, class, true)
    }
}

fn class_parse_props_chunk(p: Parser, scope: Scope, class: Class, is_extend: bool) {

    let self = Idf.for_class(class)
    scope.identifiers.set("SELF", self)

    let group : ?Group = null

    while true {
        let t = p.tok(true, true)
        p.backup()

        if t == tok_end {
            p.error_eof()
        }
        if p.sign_is("}") {
            if isset(group) {
                group = null
                continue
            }
            break
        }
        if p.word_is("#") && p.on_newline {
            parse_compile_macro(p, scope)
            continue;
        }

        if p.word_is("use") {
            if isset(group) {
                p.error("You cannot use traits inside a 'group'")
            }

            t = p.tok(true, false)
            if t == tok_word {
                let id = Id.read_full(p, p.word())
                let idf = scope.find_or_err(p, id)
                if idf.for != idf_trait : p.error("Invalid trait identifier: " + id)
                let trait = idf.trait
                if !isset(trait) : p.error("Missing trait (bug)")

                let sp = p.new_sub_parser(trait.chunk)
                let sub = trait.fc.scope.sub_scope(sc_default)
                // Read generics
                let gnames = trait.generic_names
                if isset(gnames) {
                    p.expect("[", false, false)
                    each gnames as gName, name, i {
                        if i > 0 : p.expect(",", true, false)
                        let type = read_type(p, scope, false)
                        sub.set_idf(p, name, Idf.for_type(type))
                    }
                    p.expect("]", true, false)
                }

                class_parse_props_chunk(sp, sub, class, is_extend)
                continue
            } else {
                p.restore()
            }
        }

        let act = act_default
        if t == tok_sign {
            if p.word_is("+") || p.word_is("~") || p.word_is("-") {
                act = read_full_act(p)
                t = p.tok(true, false)
                p.backup()
            }
        }

        if t != tok_word : p.error("Unexpected token: " + p.word())

        let name = p.word()
        t = p.tok(true, false)

        if p.word_is(":") {
            if isset(group) {
                p.error("You cannot define properties inside a 'group'")
            }
            if class.no_new_props && is_extend {
                p.error("This class does not allow new properties by using 'extend'")
            }
            class_parse_prop(p, scope, class, act, name)
            continue
        }

        let w1 = name
        name = p.word()

        if !isset(group) {
            if w1 == "group" {
                if class.names.contains(name) : p.error("Group name is already used for something else in this class: " + name)
                p.expect("{", true, true)
                let g = Group {
                    name: name
                    act: act
                    class: class
                }
                class.groups.set(name, g)
                class.names.push(name)
                group = g
                continue
            }
        }

        t = p.tok(true, false)

        let is_static = false
        let is_mut = false

        if w1 == "static" {
            is_static = true
            w1 = name
            name = p.word()
            t = p.tok(true, false)
        }
        if w1 == "mut" && name == "fn" {
            is_mut = true
            w1 = name
            name = p.word()
            t = p.tok(true, false)
        }

        let sign = p.word()

        if w1 == "get" {
            if sign != ":" : p.error("Expected ':' after the 'get' name")
            class_parse_func(p, scope, class, group, act, is_static, is_mut, name, sign)
            continue
        }
        if w1 == "fn" {
            if sign != "[" && sign != "(" : p.error("Expected '[' or '(' after the function name")
            class_parse_func(p, scope, class, group, act, is_static, is_mut, name, sign)
            continue
        }

        p.restore()

        if w1 == "macro" {
            class_parse_macro(p, scope, class, group, act)
            continue
        }

        p.error("Unexpected token: '" + w1 + "'")
    }
}

fn class_parse_prop(p: Parser, scope: Scope, class: Class, act: int, name: String) {

    if class.is_mode: p.error("You cannot define new properties on a 'mode'")

    let type = read_type(p, scope)

    if type.is_gc() && class.type == ct_struct {
        p.error("You cannot use class-type in a struct property")
    }

    if class.is_imut {
        type = type.get_imut_or_async()
    }
    if class.is_async {
        if !type.is_imut_or_async() {
            p.error("All property types inside an @async class/struct must have an immutable or async type")
        }
    }

    if class.names.contains(name) : p.error("Property name is already used for something else in this class: " + name)
    class.names.push(name)

    let prop = Prop {
        name: name
        type: type
        class: class
        act: act
    }
    class.props.set_unique(name, prop)
    // Default value
    let t = p.tok(true, true, false)
    if p.word_is("(") {
        p.tok(true, true)
        prop.chunk = p.clone_chunk()
        p.skip_body(")")
        t = p.tok(true, true, false)
    }

    while t == tok_flag {
        p.tok(true, true)
        if p.word_is("$lazy") {
            if prop.type.nullable : p.error("$lazy can only be applied to non-nullable type. Property type is: " + prop.type)
            if !prop.type.is_structural_type() : p.error("$lazy can only be applied to class/struct types. Property type is: " + prop.type)
            prop.is_lazy = true
        } else {
            p.error("Unknown property flag: " + p.word())
        }

        t = p.tok(true, true, false)
    }
}

fn class_parse_func(p: Parser, scope: Scope, class: Class, group: ?Group, act: int, is_static: bool, is_mut: bool, name: String, sign: String) {

    let generic_names : ?Map[GenericName] = null
    if sign == "[" {
        generic_names = read_generic_names(p)
        p.expect("(", true, false)
    }

    if isset(group) {
        if group.names.contains(name) : p.error("Function name is already used for something else in this class group: " + name)
        group.names.push(name)
    } else {
        if class.names.contains(name) : p.error("Function name is already used for something else in this class: " + name)
        class.names.push(name)
    }

    let chunk_args = p.clone_chunk()
    let dname = class.display_name + "." + name
    let func_name = class.name + "__" + name
    if isset(group) {
        func_name = class.name + "__" + group.name + "__" + name
        dname = class.display_name + "." + group.name + "." + name
    }
    let f = class.unit.new_func(class.fc, act, func_name, generic_names, chunk_args)
    f.display_name = dname
    f.name = name
    f.class = class
    f.group = group
    f.arg_scope.parent = scope
    f.is_getter = sign == ":"
    f.parse_args(p)
    f.is_static = is_static

    if isset(group) {
        group.funcs.set(name, f)
    } else {
        class.funcs.set(name, f)
    }

    if f.is_static : return

    if class.is_imut && is_mut {
        f.skip_ast = true
    }
}

fn class_parse_macro(p: Parser, scope: Scope, class: Class, group: ?Group, act: int) {

    let m = Macro {
        name: ""
        display_name: ""
        scope: class.scope.sub_scope(sc_default)
        is_class_macro: true
    }

    parse_macro_base(p, m)

    let parts = m.pattern.parts
    if !isset(parts) : p.error("You cannot define empty macros")
    let p1 = parts.get(0) ! p.error("You cannot define empty macros")
    if p1.type != pat_token : p.error("The first macro item must expect a token")
    let token = p1.token

    let macros = class.macros ?? <{
        let m = Map[Macro]{}
        class.macros = m
        return m
    }

    if macros.has(token) : p.error("You have 2 class macros that start with the same token")
    macros.set(token, m)
}

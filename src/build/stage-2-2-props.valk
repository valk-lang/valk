
fn stage_props(b: Build) {

    if b.verbose > 2 : b.log("> Stage 2.2: Read class properties")

    each b.units as unit {
        each unit.classes as class {
            class_parse_props(class)
        }
    }

    stage_class_sizes(b)
}

fn class_parse_props(class: Class) {

    if class.parsed_props : return
    class.parsed_props = true

    let chunk = class.chunk
    if !isset(chunk) : return

    let p = Parser.new(chunk, null)

    class_parse_props_chunk(p, class.scope, class)
}

fn class_parse_props_chunk(p: Parser, scope: Scope, class: Class) {

    let self = Idf.for_class(class)
    scope.identifiers.set("SELF", self)

    while true {
        p.backup()
        let t = p.tok(true, true)

        if t == tok_end {
            p.error_eof()
        }
        if p.sign_is("}") {
            break
        }
        if p.word_is("#") && p.on_newline {
            parse_compile_macro(p, class.scope)
            continue;
        }

        if p.word_is("use") {
            t = p.tok(true, false)
            if t == tok_word {
                let id = Id.read_full(p, p.word())
                let idf = scope.find_or_err(p, id)
                if idf.for != idf_trait : p.error("Invalid trait identifier: " + id)
                let trait = idf.trait
                if !isset(trait) : p.error("Missing trait (bug)")
                let sp = p.new_sub_parser(trait.chunk)
                let sub = trait.fc.scope.sub_scope(sc_default)
                class_parse_props_chunk(sp, sub, class)
                continue
            } else {
                p.restore()
                t = p.tok(true, true)
            }
        }

        let act = act_default
        if t == tok_sign {
            if p.word_is("+") || p.word_is("~") || p.word_is("-") {
                act = read_full_act(p)
                t = p.tok(true, false)
            }
        }

        if t != tok_word : p.error("Unexpected token: " + p.word())

        let name = p.word()
        t = p.tok(true, false)

        if p.word_is(":") {
            class_parse_prop(p, scope, class, act, name)
            continue
        }

        let w1 = name
        name = p.word()
        t = p.tok(true, false)

        let is_static = false
        let is_mut = false

        if w1 == "static" {
            is_static = true
            w1 = name
            name = p.word()
            t = p.tok(true, false)
        }
        if w1 == "mut" && name == "fn" {
            is_mut = true
            w1 = name
            name = p.word()
            t = p.tok(true, false)
        }

        let sign = p.word()

        if w1 == "get" {
            if sign != ":" : p.error("Expected ':' after the 'get' name")
            class_parse_func(p, scope, class, act, is_static, is_mut, name, sign)
            continue
        }
        if w1 == "fn" {
            if sign != "[" && sign != "(" : p.error("Expected '[' or '(' after the function name")
            class_parse_func(p, scope, class, act, is_static, is_mut, name, sign)
            continue
        }

        p.error("Unexpected token: '" + w1 + "'")
    }
}

fn class_parse_prop(p: Parser, scope: Scope, class: Class, act: int, name: String) {
    let type = read_type(p, scope)

    if type.is_gc() && class.type == ct_struct {
        p.error("You cannot use class-type in a struct property")
    }

    if class.is_imut {
        type = type.get_imut_or_async()
    }
    if class.is_async {
        if !type.is_imut_or_async() {
            p.error("All property types inside an @async class/struct must have an immutable or async type")
        }
    }

    let prop = Prop {
        name: name
        type: type
        class: class
        act: act
    }
    if class.funcs.has(name) : p.error("Property name is already used for a function: " + name)
    class.props.set_unique(name, prop) ! p.error("Duplicate property name: " + name)
    // Default value
    p.tok(true, true, false)
    if p.word_is("(") {
        p.tok(true, true)
        prop.chunk = p.clone_chunk()
        p.skip_body(")")
    }
}

fn class_parse_func(p: Parser, scope: Scope, class: Class, act: int, is_static: bool, is_mut: bool, name: String, sign: String) {

    let generic_names : ?Map[GenericName] = null
    if sign == "[" {
        generic_names = read_generic_names(p)
        p.expect("(", true, false)
    }

    let chunk_args = p.clone_chunk()
    let f = class.unit.new_func(class.fc, act, class.name + "__" + name, generic_names, chunk_args)
    f.name = name
    f.class = class
    f.scope.parent = scope
    f.is_getter = sign == ":"
    f.parse_args(p)
    f.is_static = is_static
    if class.props.has(name) : p.error("Function name is already used for a property: " + name)
    class.funcs.set_unique(name, f) ! p.error("Duplicate function name: " + name)
    if f.is_static : return

    if class.is_imut && is_mut {
        f.skip_ast = true
    }
}

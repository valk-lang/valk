
fn stage_props(b: Build) {

    if b.verbose > 2 : b.log("> Stage 2.2: Read class properties")

    each b.units as unit {
        each unit.classes as class {
            class_parse_props(class)
        }
    }

    stage_class_sizes(b)
}

fn class_generate_vtable_global(class: Class) {
    let name = class.name + "_pool"
    let b = class.build
    let unit = class.unit
    let fc = class.fc
    let g = unit.new_global(fc, act_public, name, null, null)
    g.type = b.valk_type("gc", "Pool")
    class.pool = g
}

fn class_parse_props(class: Class) {

    if class.parsed_props : return
    class.parsed_props = true

    if class.type == ct_class {
        class_generate_vtable_global(class)
    }

    let p = Parser.new(class.chunk, null)

    class_parse_props_chunk(p, class.scope, class)
}

fn class_parse_props_chunk(p: Parser, scope: Scope, class: Class) {

    let self = Idf.for_class(class)
    scope.identifiers.set("SELF", self)

    let words = array[String]{}
    while true {
        p.backup()
        let t = p.tok(true, true)

        if t == tok_end {
            p.error_eof()
        }
        if p.sign_is("}") {
            break
        }
        if p.word_is("#") && p.on_newline {
            parse_compile_macro(p, class.scope)
            continue;
        }

        if p.word_is("use") {
            t = p.tok(true, false)
            if t == tok_word {
                let id = Id.read_full(p, p.word())
                let idf = scope.find_or_err(p, id)
                if idf.for != idf_trait : p.error("Invalid trait identifier: " + id)
                let trait = idf.trait
                if !isset(trait) : p.error("Missing trait (bug)")
                let sp = p.new_sub_parser(trait.chunk)
                let sub = trait.fc.scope.sub_scope(sc_default)
                class_parse_props_chunk(sp, sub, class)
                continue
            } else {
                p.restore()
                t = p.tok(true, true)
            }
        }

        words.clear()

        let act = act_private_nsc

        while t == tok_word {
            let word = p.word()
            if words.length == 0 && p.char(0) == '.' {
                t = p.tok(false, false)
                t = p.tok(false, false)
                word = word + "." + p.word()
            }
            words.push(word)
            if words.length == 6 : p.error("Invalid class property/function definition syntax")
            t = p.tok(true, false)
        }
        if words.length == 0 : p.error_token()

        let name = words.pop_last() ! p.error("Missing name (bug)")

        // Property
        if p.sign_is(":") {
            if words.length > 1 : p.error("Invalid class property definition syntax")
            if words.length == 1 {
                let word = words.get(0) ! p.error("Missing access type (bug)")
                act = string_to_act(word) ! p.error("Invalid access type: '" + word + "'")
            }
            class_parse_prop(p, scope, class, act, name)
            continue
        }

        // Function
        let sign = p.word()
        let w = words.pop_last() ! p.error("Invalid property/function definition")
        if w != "fn" : p.error("Invalid property/function definition")

        let is_static = false
        let is_exit = false

        let next = words.pop_last() ? null
        if isset(next) {
            if next == "exit" {
                is_exit = true
                next = words.pop_last() ? null
            }
        }
        if isset(next) {
            if next == "static" {
                is_static = true
                next = words.pop_last() ? null
            }
        }
        if isset(next) {
            act = string_to_act(next) ! p.error("Unexpected token: '" + next + "'")
            next = words.pop_last() ? null
        }
        if isset(next) {
            p.error("Unexpected token: '" + next + "'")
        }

        if sign != "[" && sign != "(" : p.error("Expected '[' or '(' after the function name")

        class_parse_func(p, scope, class, act, is_static, is_exit, name, sign)
    }
}

fn class_parse_prop(p: Parser, scope: Scope, class: Class, act: int, name: String) {
    let type = read_type(p, scope)
    let prop = Prop {
        name: name
        type: type
        class: class
        act: act
        index: class.props.length()
    }
    if class.funcs.has(name) : p.error("Property name is already used for a function: " + name)
    class.props.set_unique(name, prop) ! p.error("Duplicate property name: " + name)
    // Default value
    p.tok(true, true, false)
    if p.word_is("(") {
        p.tok(true, true)
        prop.chunk = p.clone_chunk()
        p.skip_body(")")
    }
}

fn class_parse_func(p: Parser, scope: Scope, class: Class, act: int, is_static: bool, is_exit: bool, name: String, sign: String) {

    let generic_names : ?Array[String] = null
    if sign == "[" {
        generic_names = read_generic_names(p)
        p.expect("(", true, false)
    }

    let chunk_args = p.clone_chunk()
    let fc = class.fc
    let f = fc.unit.new_func(fc, act, class.name + "__" + name, generic_names, chunk_args)
    f.scope.parent = scope
    f.parse_args(p)
    f.is_exit = is_exit
    f.is_static = is_static
    if class.props.has(name) : p.error("Function name is already used for a property: " + name)
    class.funcs.set_unique(name, f) ! p.error("Duplicate function name: " + name)
    if f.is_static : return
    // This
    let arg = Arg{
        name: "this"
        type: class.get_type()
        decl: Decl.new(class.get_type(), true)
    }
    f.arg_self = arg
    f.scope.set_idf(p, "this", Idf.for_decl(arg.decl))
}

fn string_to_act(word: String) int !invalid {
    if word == "pub" : return act_public
    if word == "private" : return act_private_fc
    if word == "readonly" : return act_readonly_fc
    throw invalid
}

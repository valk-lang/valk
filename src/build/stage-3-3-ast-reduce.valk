
fn stage_ast_reduce(b: Build) {

    if b.verbose > 2 : b.log("> Stage 3: Reduce ASTs")

    // Mark used or not
    let main = b.generated_main_func
    if isset(main) : main.mark_used()

    // Mark vtable as used
    each b.classes as class {
        let f1 = class.funcs.get("gc_action") !? null
        let f2 = class.funcs.get("gc_free") !? null
        if isset(f1) : f1.mark_used()
        if isset(f2) : f2.mark_used()
    }

    // Reduce usage of gc stack
    each b.functions as func {
        if !func.info_used : continue 
        if !func.ast_has_gc_decls : continue
        if func.info_calls_unknown_code || func.info_creates_objects : continue

        let body = func.chunk_body
        if !isset(body) : continue

        func.disable_gc_stack = true

        parse_func_ast(func)
        func_ir(func)
        func.wipe_ast()
    }
}

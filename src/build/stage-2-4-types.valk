
use helper

fn stage_types(b: Build) {

    if b.verbose > 2 : b.log("> Stage 2.4: Read types for functions & globals")

    each b.units as unit {
        each unit.functions as func {
            parse_func_args(func)
        }
    }

    each b.globals as g {
        parse_global_type(g)
    }

    each b.enums as e {
        parse_enum_type(e)
    }

    each b.classes as class {
        class.validate_internals()
    }

    stage_ast(b)
}

fn parse_func_args(func: Func) {

    if func.parsed_args || func.is_generic_base : return
    func.parsed_args = true

    // This
    let class = func.class
    if isset(class) && !func.is_static {
        let rett = class.get_type()
        let group = func.group
        if isset(group) {
            rett = rett.clone()
            rett.group = group
        }
        func.add_arg("this", rett)
    }

    let chunk_args = func.chunk_args
    if !isset(chunk_args) {
        if func.is_test {
            let name = "test_results"
            let type = func.build.valk_type("core", "TestResults")
            func.add_arg(name, type)
        }
        return
    }

    let p = Parser.new(chunk_args, null)
    p.func_ = func

    if !func.is_getter {
        while true {
            let t = p.tok(true, true)

            if p.sign_is(")") {
                break
            }
            if t == tok_at_word {
                if p.word_is("@infinite") {
                    func.infinite_args = true
                    p.expect(")", true, true)
                    break
                }
            }
            if t != tok_word {
                p.error("Invalid argument name: " + p.word())
            }
            // Name
            let name = p.word()
            p.expect(":", true, true)
            // Type
            let type = read_type(p, func.scope, true)
            let arg = func.add_arg(name, type)

            if func.imut_mode && !type.is_imut_or_async() {
                p.error("Type must be immutable or async compatible")
            }

            // Default value
            t = p.tok(true, true, false)
            if p.sign_is("(") {
                p.tok(true, true)
                arg.chunk_value = p.clone_chunk()
                p.skip_body(")")
            }
            // Next
            t = p.tok(true, true)
            if p.sign_is(",") : continue
            if p.sign_is(")") : break
            p.error_token()
        }
    }

    // Return type
    let t = p.tok(true, true, false)
    if !p.sign_is("{") && !p.sign_is("!") && !p.sign_is(";") && t != tok_flag {
        // Must be on same line
        let scope = func.scope
        let rett = read_type(p, scope, true, true)
        func.rett = rett
        let types = rett.unroll()
        each types as type {
            func.add_rett(type)
        }
    }

    t = p.tok(true, true)
    while p.sign_is("!") {
        t = p.tok(false, false)
        if t != tok_word : p.error("Invalid error name syntax: " + p.word())
        let name = p.word()
        let val = helper:ctxhash_u32(name)
        if func.errors.has(name) : p.error("Duplicate error name: " + name)
        if func.errors.has_value(val) : p.error("It seems that 2 different error names are resolving to the same hash, try picking a different error name: " + name)
        func.errors.set(name, val)
        func.can_error = true
        t = p.tok(true, true)
    }

    while t == tok_flag {
        let name = p.word()
        if p.word_is("$entrance") {
            func.is_entrance = true
        } else if p.word_is("$exit") {
            func.is_exit = true
        } else if p.word_is("$hot") {
            func.is_hot = true
        } else if p.word_is("$inline") {
            func.inline = true
        } else if isset(class) && p.word_is("$offset") {
            let current = class.offset
            if isset(current) : p.error("Multiple functions marked with $offset for the same type")
            class.offset = func
        } else if isset(class) && p.word_is("$offset_assign") {
            let current = class.offset_assign
            if isset(current) : p.error("Multiple functions marked with $offset_assign for the same type")
            class.offset_assign = func
        } else if isset(class) && p.word_is("$to") {
            validate_hook_func(p, func, "$to", 0)
            class.to_hooks.push(func)
        } else if isset(class) && p.word_is("$eq") {
            validate_hook_func(p, func, "$eq", 1)
            class.eq_hooks.push(func)
        } else if isset(class) && p.word_is("$lt") {
            validate_hook_func(p, func, "$lt", 1)
            class.lt_hooks.push(func)
        } else if isset(class) && p.word_is("$gt") {
            validate_hook_func(p, func, "$gt", 1)
            class.gt_hooks.push(func)
        } else if isset(class) && p.word_is("$lte") {
            validate_hook_func(p, func, "$lte", 1)
            class.lte_hooks.push(func)
        } else if isset(class) && p.word_is("$gte") {
            validate_hook_func(p, func, "$gte", 1)
            class.gte_hooks.push(func)
        } else if isset(class) && p.word_is("$add") {
            validate_hook_func(p, func, "$add", 1)
            class.add_hooks.push(func)
        } else if p.word_is("@nobuffers") {
            func.no_buffers = true
        } else {
            p.error("Unknown flag: " + p.word())
        }
        t = p.tok(true, true)
    }

    let b = p.build
    let main = b.main_func
    if isset(main) {
        if func == main {
            let args = func.args
            if args.length > 1 : p.error("The 'main' function has too many arguments (max: 1)")
            let arg = args.get(0) !? null
            let type = b.array_of_string_type()
            if isset(arg) {
                if !type.compat(arg.type) : p.error("The first argument of 'main' must be of type: " + type + ", instead of: " + arg.type)
            } else {
                func.add_arg("cli_args", type)
            }
        }
    }

    // Store if hook
    // if isset(class) && !func.can_error {
    //     let arg1 = func.args.get(0) !? null
    //     if isset(arg1) {
    //         if arg1.type.class == class {
    //             let name = func.name
    //             let rett1 = func.rett_types.get(0) !? null
    //             if isset(rett1) && func.rett_types.length == 1 {
    //                 if func.args.length == 2 && rett1.is_bool() {
    //                     // eq_, ...
    //                     if name.starts_with("lt_") {
    //                         class.lt_hooks.push(func)
    //                     } else if name.starts_with("gt_") {
    //                         class.gt_hooks.push(func)
    //                     } else if name.starts_with("lte_") {
    //                         class.lte_hooks.push(func)
    //                     } else if name.starts_with("gte_") {
    //                         class.gte_hooks.push(func)
    //                     }
    //                 }
    //             }
    //         }
    //     }
    // }
}

fn validate_hook_func(p: Parser, func: Func, flag_name: String, argc: uint) {
    if func.is_static : p.error("Functions marked with " + flag_name + " cannot be static")
    if func.args.length != (argc + 1) : p.error("Functions marked with " + flag_name + " must have " + argc + " argument(s)")
    if func.rett_types.length == 0 : p.error("Functions marked with " + flag_name + " must return a value")
    if func.rett_types.length > 1 : p.error("Functions marked with " + flag_name + " must return only 1 value")
    if argc == 1 && func.can_error : p.error("Functions marked with " + flag_name + " should never throw an error")
}


fn parse_global_type(g: Global) {
    let chunk = g.chunk_type
    let fc = g.fc
    if !isset(chunk) || !isset(fc) : return
    let p = Parser.new(chunk, null)
    let type = read_type(p, fc.scope, true)
    g.type = type

    if g.shared && !g.allow_unsafe && !type.is_imut_compatible() {
        p.error("Shared global variables must be immutable when having a structural type (struct/class type). Put 'imut' infront of the type to make it immutable.")
    }
}


fn parse_enum_type(e: Enum) {
    let b = e.build
    let chunk = e.chunk_type
    let fc = e.fc
    if !isset(fc) : return

    let type = b.valk_type("type", "int")
    if isset(chunk) {
        let p = Parser.new(chunk, null)
        type = read_type(p, fc.scope, true)
        let te = type.enum
        if isset(te) : p.error("You cannot use an enum type as the type for another enum")
    }
    e.type = type

    // Validate values
    let ints = Array[int].new()
    let values = e.values
    each values as chunk, name {
        if isset(chunk) {
            let p = Parser.new(chunk, null)
            p.set_suggest(type)
            let v = read_value(p, fc.scope)
            type.compat_check(v.rett, p)
            p.pop_suggest()

            if v.type == v_int {
                if ints.contains(v.int) {
                    p.error("Duplicate integer value: " + v.int)
                }
                ints.push(v.int)
            }
        } else if type.type != ty_int {
            let item_chunk = e.item_chunks.get(name) ! b.error("Missing enum value")
            let p = Parser.new(item_chunk, null)
            p.error("Missing enum value")
        }
    }

    let i : int = 0
    let int_values = e.values_int
    each values as chunk, name {
        if !isset(chunk) {
            while ints.contains(i) {
                i++
            }

            int_values.set(name, i)
            i++
        }
    }
}

fn read_ast(p: Parser, scope: Scope, single: bool) {

    let b = p.build
    let first = true

    while true {
        if single && !first : break

        p.backup()
        let t = p.tok(true, true)

        if t == tok_sign {
            if p.word_is("}") {
                break
            }
            if p.word_is(";") {
                continue
            }
            if p.word_is("#") && p.on_newline {
                parse_compile_macro(p)
                continue;
            }
        }
        if t == tok_word {
            if p.word_is("let") {
                ast_let(p, scope)
                continue
            }
        }

        // Not a token -> Read value instead
        p.restore()
        let left = read_value(p, scope)
    }
}

fn ast_let(p: Parser, scope: Scope) {
    let names = array[String]{}
    let t = p.tok(true, false, false)
    if p.sign_is("(") {
        p.tok(true, false)
        // Multi
        while true {
            let name = p.read_word(true, true)
            if names.contains(name) : p.error("Duplicate name: " + name)
            names.push(name)
            p.expect2(",", ")", true, true)
            if p.word_is(")") : break
        }
    } else if t == tok_word {
        let name = p.read_word(true, true)
        names.push(name)
    } else {
        p.error_token()
    }

    p.expect("=", true, true)

    let v = read_value(p, scope)
}

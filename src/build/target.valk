
use helper

struct Target {
    os: String
    arch: String
    target: String
    ptr_size: int
}

fn get_target(cli: helper:CLIArgs) Target {
    let os = default_os()
    let arch = default_arch()
    let target = cli.values.get("--target") ? (os + "-" + arch)

    let valid = array[String]{ "win-x64", "linux-x64", "linux-arm64", "macos-x64", "macos-arm64" }
    if !valid.contains(target) {
        let supported = ""
        each valid as i,t {
            if i > 0 : supported += ", "
            supported += t
        }
        build_error("Invalid target: " + target + "\nSupported: " + supported)
    }

    let ptr_size = 8

    return Target {
        os: os
        arch: arch
        target: target
        ptr_size: ptr_size
    }
}

fn default_os() String {
    #if OS == win
    return "win"
    #elif OS == linux
    return "linux"
    #elif OS == macos
    return "macos"
    #end
    return "unknown"
}
fn default_arch() String {
    #if ARCH == x64
    return "x64"
    #elif ARCH == arm64
    return "arm64"
    #end
    return "unknown"
}

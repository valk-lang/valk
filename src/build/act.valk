
value act_default (act_private | (act_public << 3)  | (act_public << 6))
value act_public_all (act_public | (act_public << 3)  | (act_public << 6))

fn read_full_act(p: Parser) int {

    let act_all = convert_parser_act_sign(p)
    let act_pkg = act_public
    let act_ns = act_public

    p.tok(false, false, false)
    if p.word_is("[") {
        p.tok(false, false)
        p.tok(false, false)
        while !p.word_is("]") {
            if p.word_is("ns") {
                p.tok(false, false)
                act_ns = convert_parser_act_sign(p)
            } else if p.word_is("pkg") {
                p.tok(false, false)
                act_pkg = convert_parser_act_sign(p)
            } else {
                p.error("Expected 'ns', 'pkg' or ']'. Found: '" + p.word() + "'")
            }

            p.tok(false, false)
        }
        if act_ns < act_all : p.error("Namespace access level cannot be less strict than the default access level")
        if act_pkg < act_all : p.error("Package access level cannot be less strict than the default access level")
        if act_pkg > act_ns : p.error("Package access level cannot be less strict than the namespace access level")
    }

    return act_all | (act_ns << 3)  | (act_pkg << 6)
}

fn convert_parser_act_sign(p: Parser) int {
    if p.word_is("+") {
        return act_public
    } else if p.word_is("~") {
        return act_readonly
    } else if p.word_is("-") {
        return act_private
    }
    p.error("Expected '+' (public), '~' (read-only) or '-' (private). Found: '" + p.word() + "'")
}

// fn act_to_str(act: int) {
//     let act_all = act & 7
//     let act_pkg = (act >> 3) & 7
//     let act_ns = (act >> 6) & 7
//     let s_all = "-"
//     if s_all == act_readonly : s_all = "~"
//     if s_all == act_public : s_all = "+"
//     let s_pkg = ""
//     if act_pkg >
//     let s_ns = ""
//     let str = s_all
// }
fn act_to_str_all(act: int) String {
    let act_all = act & 7
    let s_all = "-"
    if act_all == act_readonly : s_all = "~"
    if act_all == act_public : s_all = "+"
    return s_all
}
fn act_is_private(act: int) bool {
    return act & 7 == act_private
}

fn check_act(p: Parser, act: int, defined_in: ?Fc, is_assign: bool, idf_for: String) {
    if !isset(defined_in) : return
    if defined_in.is_header : return
    let in_fc = p.chunk.fc
    if in_fc.ignore_act : return

    let act_all = act & 7
    let act_pkg = (act >> 3) & 7
    let act_ns = (act >> 6) & 7

    // Get relavent access type
    let act_check = act_public
    if in_fc != defined_in {
        act_check = act_ns
        if in_fc.nsc != defined_in.nsc {
            act_check = act_pkg
            if in_fc.nsc.pkc != defined_in.nsc.pkc {
                act_check = act_all
            }
        }
    } 

    // Check access
    if act_check == act_public : return
    if act_check == act_readonly {
        if !is_assign : return
        p.error("Cannot modify this " + idf_for + " because it's defined as read-only")
    }
    p.error("Cannot access this " + idf_for + " because it's defined as private")
}

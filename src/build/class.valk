
struct Class {
    unit: Unit
    build: Build
    fc: ?Fc
    act: int
    name: String
    export_name: String
    display_name: String
    chunk: ?Chunk
    type: int
    _type: ?Type (null)
    scope: Scope
    //
    size: uint (0)
    props: Map[Prop] (map[Prop]{})
    funcs: Map[Func] (map[Func]{})
    // Hooks
    eq_hooks: Array[Func] (array[Func]{})
    lt_hooks: Array[Func] (array[Func]{})
    lte_hooks: Array[Func] (array[Func]{})
    gt_hooks: Array[Func] (array[Func]{})
    gte_hooks: Array[Func] (array[Func]{})
    to_hooks: Array[Func] (array[Func]{})
    add_hooks: Array[Func] (array[Func]{})
    offset: ?Func (null)
    offset_assign: ?Func (null)
    //
    pool_index: uint (0)
    gc_prop_count: uint (0)
    vtable: Map[Func] (map[Func]{})
    //
    generic_names: ?Map[GenericName] (null)
    generics: ?Map[Class] (null)
    generic_from: ?Class (null)
    imut_class: ?Class (null)
    mut_class: ?Class (null)
    //
    is_signed: bool (false)
    size_known: bool (false)
    is_generic_base: bool (false)
    parsed_props: bool (false)
    packed: bool (false)
    uses_vtable: bool (false)
    is_imut: bool (false)
    is_async: bool (false)

    fn get_type() Type {
        let t = this._type
        if !isset(t) {
            // Create type
            let b = this.build
            let ct = this.type
            let tt = ty_class
            if ct == ct_class : tt = ty_class
            else if ct == ct_struct : tt = ty_struct
            else if ct == ct_int : tt = ty_int
            else if ct == ct_float : tt = ty_float
            else if ct == ct_pointer : tt = ty_ptr
            else if ct == ct_bool : tt = ty_bool
            else : b.error("Unknown type in function Class.get_type() (compiler bug)")
            let is_pointer = ct == ct_class || ct == ct_struct || ct == ct_pointer
            let n = Type {
                type: tt
                build: b
                class: this
                is_signed: this.is_signed
                is_pointer: is_pointer
                is_imut: this.is_imut
            }
            this._type = n
            return n
        }
        return t
    }

    fn determine_size() !unable {
        let ct = this.type
        if this.size > 0 {
            this.size_known = true
            return 
        }

        let b = this.build
        let props = this.props
        let props_new = map[Prop]{}

        // Check if vtable needs to be added
        if this.funcs.has("gc_action") || this.funcs.has("gc_free") {
            this.uses_vtable = true

            let f1 = this.funcs.get("gc_action") ? null
            if isset(f1) : this.vtable.set("gc_action", f1)
            let f2 = this.funcs.get("gc_free") ? null
            if isset(f2) : this.vtable.set("gc_free", f2)
        }
        if this.uses_vtable {
            let name = "_VTABLE"
            let prop = Prop {
                name: name
                type: type_ptr(b)
                class: this
                act: act_default
            }
            if this.funcs.has(name) : b.error("Property name is already used for a function: " + name)
            props_new.set(name, prop)
        }

        // Resort properties
        let gc_prop_count : uint = 0
        each props as name, prop {
            if prop.type.is_gc() {
                props_new.set(name, prop)
                gc_prop_count++
            }
        }
        each props as name, prop {
            if !prop.type.is_gc() {
                props_new.set(name, prop)
            }
        }
        props = props_new
        this.props = props
        this.gc_prop_count = gc_prop_count

        // Calculate size
        let ptr_size = b.ptr_size
        let size : uint = 0
        each props as name, prop {
            let prop_size = prop.type.size()
            if prop_size == 0 : throw unable
            let mod = prop.type.largest_property_offset()

            if !this.packed {
                size += size % mod
            }
            size += prop_size
        }

        // Round off
        if size % ptr_size != 0 {
            size += ptr_size - (size % ptr_size)
        }

        if b.verbose > 2 : b.log("> Determine class size: " + this.display_name + " | size: " + size)

        this.size = size
        this.size_known = true

        // Determine pool index
        if size <= 16 * ptr_size {
            // let i : uint = size == 0 ? 0 : (size / ptr_size - 1)
            let i : uint = size / ptr_size - 1
            this.pool_index = i
        } else {
            let cmp = 16 * ptr_size * 2
            let i : uint = 16
            while size > cmp {
                cmp *= 2
                i++
            }
            this.pool_index = i
        }

        this.determine_prop_offsets(b)
    }

    fn determine_prop_offsets(b: Build) {
        let offset : uint = 0
        let props = this.props

        each props as name, prop {
            let ps = prop.type.size()
            let mod = prop.type.largest_property_offset()

            let skip : uint = this.packed ? 0 : (offset % mod)
            prop.offset = (offset + skip) @as int
            offset += skip + ps
        }
    }

    fn is_structural() bool {
        return this.type == ct_struct || this.type == ct_class
    }

    fn vtable_export_name() String {
        return this.export_name + "_VTABLE"
    }

    fn validate_internals() {
        let b = this.build
        let offset = this.offset
        let offset_assign = this.offset_assign
        if isset(offset) {
            if offset.args.length == 0 : b.error("The $offset function '" + offset.display_name + "' must have atleast 1 argument")
            let retts = offset.rett_types
            if retts.length != 1 : b.error("The $offset function '" + offset.display_name + "' can only have 1 return type")
            let rett = retts.get(0) ? type_void(b)
            if rett.is_void() : b.error("The $offset function '" + offset.display_name + "' cannot have a 'void' return type")
        }
        if isset(offset_assign) {
            if offset_assign.args.length <= 1 : b.error("The $offset_assign function '" + offset_assign.display_name + "' must have atleast 2 argument")
        }
    }

    fn get_to_hook(type: Type) Func !not_found {
        let hooks = this.to_hooks
        each hooks as func {
            if type.compat(func.rett) : return func
        }
        throw not_found
    }
    fn get_add_hook(type: Type) Func !not_found {
        let hooks = this.add_hooks
        each hooks as func {
            let arg = func.args.get(0) ! continue
            if arg.type.compat(type) : return func
        }
        let tclass = type.class
        if isset(tclass) {
            each hooks as func {
                let arg = func.args.get(0) ! continue
                let hook = tclass.get_to_hook(arg.type) ! continue
                return func
            }
        }
        throw not_found
    }
}

struct Prop {
    name: String
    type: Type
    class: Class
    act: int
    offset: int (0)
    chunk: ?Chunk (null)
}

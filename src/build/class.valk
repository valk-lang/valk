
struct Class {
    unit: Unit
    build: Build
    fc: Fc
    act: int
    name: String
    export_name: String
    display_name: String
    chunk: Chunk
    type: int
    _type: ?Type (null)
    scope: Scope
    //
    size: uint (0)
    props: Map[Prop] (map[Prop]{})
    funcs: Map[Func] (map[Func]{})
    pool_index: uint (0)
    gc_prop_count: uint (0)
    vtable: Map[Func] (map[Func]{})
    //
    generic_names: ?Array[String] (null)
    generics: ?Map[Class] (null)
    //
    is_signed: bool (false)
    size_known: bool (false)
    is_generic_base: bool (false)
    parsed_props: bool (false)
    packed: bool (false)
    uses_vtable: bool (false)

    fn get_type() Type {
        let t = this._type
        if !isset(t) {
            // Create type
            let b = this.build
            let ct = this.type
            let tt = ty_class
            if ct == ct_class : tt = ty_class
            else if ct == ct_struct : tt = ty_struct
            else if ct == ct_int : tt = ty_int
            else if ct == ct_float : tt = ty_float
            else if ct == ct_pointer : tt = ty_ptr
            else if ct == ct_bool : tt = ty_bool
            else : b.error("Unknown type in function Class.get_type() (compiler bug)")
            let is_pointer = ct == ct_class || ct == ct_struct || ct == ct_pointer
            let n = Type {
                type: tt
                build: b
                class: this
                is_signed: this.is_signed
                is_pointer: is_pointer
            }
            this._type = n
            return n
        }
        return t
    }

    fn determine_size() !unable {
        let ct = this.type
        if this.size > 0 {
            this.size_known = true
            return 
        }

        let b = this.build
        let props = this.props
        let props_new = map[Prop]{}

        // Check if vtable needs to be added
        if this.funcs.has("_gc_mark") || this.funcs.has("_gc_free_properties") || this.funcs.has("_gc_free") || this.funcs.has("_gc_share") {
            this.uses_vtable = true

            let f1 = this.funcs.get("_gc_mark") ? null
            if isset(f1) : this.vtable.set("_gc_mark", f1)
            let f2 = this.funcs.get("_gc_free_properties") ? null
            if isset(f2) : this.vtable.set("_gc_free_properties", f2)
            let f3 = this.funcs.get("_gc_free") ? null
            if isset(f3) : this.vtable.set("_gc_free", f3)
            let f4 = this.funcs.get("_gc_share") ? null
            if isset(f4) : this.vtable.set("_gc_share", f4)
        }
        if this.uses_vtable {
            let name = "_VTABLE"
            let prop = Prop {
                name: name
                type: type_ptr(b)
                class: this
                act: act_private_fc
            }
            if this.funcs.has(name) : b.error("Property name is already used for a function: " + name)
            props_new.set(name, prop)
        }

        // Resort properties
        let gc_prop_count : uint = 0
        each props as name, prop {
            if prop.type.is_gc() {
                props_new.set(name, prop)
                gc_prop_count++
            }
        }
        each props as name, prop {
            if !prop.type.is_gc() {
                props_new.set(name, prop)
            }
        }
        props = props_new
        this.props = props
        this.gc_prop_count = gc_prop_count

        // Calculate size
        let size : uint = 0
        each props as name, prop {
            let prop_size = prop.type.size()
            if prop_size == 0 : throw unable
            if !this.packed : size += size % prop_size
            size += prop_size
        }

        // Round off
        let ptr_size = this.build.ptr_size
        if size % ptr_size != 0 {
            size += ptr_size - (size % ptr_size)
        }

        if b.verbose > 2 : b.log("> Determine class size: " + this.display_name + " | size: " + size)

        this.size = size
        this.size_known = true

        // Determine pool index
        if size <= 16 * ptr_size {
            // let i : uint = size == 0 ? 0 : (size / ptr_size - 1)
            let i : uint = size / ptr_size - 1
            this.pool_index = i
        } else {
            let cmp = 16 * ptr_size * 2
            let i : uint = 16
            while size > cmp {
                cmp *= 2
                i++
            }
            this.pool_index = i
        }
    }

    fn determine_prop_offsets() {
        let offset : int = 0
        let props = this.props
        each props as name, prop {
            let ps = prop.type.size() @as int
            let skip = this.packed ? 0 : (offset % ps)
            prop.offset = offset + skip
            offset += skip + ps
        }
    }

    fn is_structural() bool {
        return this.type == ct_struct || this.type == ct_class
    }

    fn vtable_export_name() String {
        return this.export_name + "_VTABLE"
    }
}

struct Prop {
    name: String
    type: Type
    class: Class
    act: int
    offset: int (0)
    chunk: ?Chunk (null)
}

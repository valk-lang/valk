
struct Class {
    unit: Unit
    build: Build
    fc: Fc
    act: int
    name: String
    export_name: String
    display_name: String
    chunk: Chunk
    type: int
    _type: ?Type (null)
    scope: Scope
    //
    size: uint (0)
    props: Map[Prop] (map[Prop]{})
    funcs: Map[Func] (map[Func]{})
    pool_index: uint (0)
    vtable: Map[Func] (map[Func]{})
    //
    generic_names: ?Array[String] (null)
    generics: ?Map[Class] (null)
    //
    vtable_index_g: ?Global (null)
    gctable_index: uint (0)
    //
    is_signed: bool (false)
    size_known: bool (false)
    is_generic_base: bool (false)
    parsed_props: bool (false)
    packed: bool (false)

    fn get_type() Type {
        let t = this._type
        if !isset(t) {
            // Create type
            let b = this.build
            let ct = this.type
            let tt = ty_class
            if ct == ct_class : tt = ty_class
            else if ct == ct_struct : tt = ty_struct
            else if ct == ct_int : tt = ty_int
            else if ct == ct_float : tt = ty_float
            else if ct == ct_pointer : tt = ty_ptr
            else if ct == ct_bool : tt = ty_bool
            else : b.error("Unknown type in function Class.get_type() (compiler bug)")
            let is_pointer = ct == ct_class || ct == ct_struct || ct == ct_pointer
            let n = Type {
                type: tt
                build: b
                class: this
                is_signed: this.is_signed
                is_pointer: is_pointer
            }
            this._type = n
            return n
        }
        return t
    }

    fn determine_size() !unable {
        let ct = this.type
        if this.size > 0 {
            this.size_known = true
            return 
        }

        let b = this.build
        let props = this.props

        // Calculate size
        let size : uint = 0
        each props as name, prop {
            let prop_size = prop.type.size()
            if prop_size == 0 : throw unable
            if !this.packed : size += size % prop_size
            size += prop_size
        }

        // Round off
        let ptr_size = this.build.ptr_size
        if size % ptr_size != 0 {
            size += ptr_size - (size % ptr_size)
        }

        if b.verbose > 2 : b.log("> Determine class size: " + this.display_name + " | size: " + size)

        this.size = size
        this.size_known = true

        //
        this.determine_prop_offsets()
        this.determine_gc_index()
        this.determine_pool_index()
    }

    fn determine_prop_offsets() {
        let offset : int = 0
        let props = this.props
        each props as name, prop {
            let ps = prop.type.size() @as int
            let skip = this.packed ? 0 : (offset % ps)
            prop.offset = offset + skip
            offset += skip + ps
        }
    }

    fn determine_pool_index() {
        let size = this.size
        let ptr_size = this.build.ptr_size

        if size <= 16 * ptr_size {
            // let i : uint = size == 0 ? 0 : (size / ptr_size - 1)
            let i : uint = size / ptr_size - 1
            this.pool_index = i
        } else {
            let cmp = 16 * ptr_size * 2
            let i : uint = 16
            while size > cmp {
                cmp *= 2
                i++
            }
            this.pool_index = i
        }
    }

    fn determine_gc_index() {
        if this.type != ct_class : return
        let b = this.build

        let nr = b.gctable_count++
        this.gctable_index = nr

        // Check if vtable needs to be added
        let name = this.name + "__VTABLE_INDEX"
        let ename = this.export_name + "__VTABLE_INDEX"
        let dname = this.display_name + "__VTABLE_INDEX"
        let u = b.generated_unit()
        let g = u.new_global(null, act_public, name, ename, dname, null, null)
        g.default_value = vgen_int(nr @as int, b.valk_type("type", "u16"))
        g.type = b.valk_type("type", "u16")
        g.is_const = true
        g.shared = true
        this.vtable_index_g = g

        // Gc table
        let gtypes = Array[Type].new()
        gtypes.push(this.get_type())

        b.gctable_values.push(vgen_func_ptr(get_func_generic(b, b.valk_func("gc", "mark"), gtypes)));
        b.gctable_values.push(vgen_func_ptr(get_func_generic(b, b.valk_func("gc", "free"), gtypes)));
        b.gctable_values.push(vgen_func_ptr(get_func_generic(b, b.valk_func("gc", "share"), gtypes)));

        let ptrt = type_ptr(b)

        // let func = this.funcs.get("_gc_mark") ? null
        // b.gctable_values.push(isset(func) ? vgen_func_ptr(func) : vgen_null(ptrt));
        // func = this.funcs.get("_gc_free_properties") ? null
        // b.gctable_values.push(isset(func) ? vgen_func_ptr(func) : vgen_null(ptrt));
        let func = this.funcs.get("_gc_free") ? null
        b.gctable_values.push(isset(func) ? vgen_func_ptr(func) : vgen_null(ptrt));
        // func = this.funcs.get("_gc_share") ? null
        // b.gctable_values.push(isset(func) ? vgen_func_ptr(func) : vgen_null(ptrt));
    }

    fn is_structural() bool {
        return this.type == ct_struct || this.type == ct_class
    }

    fn vtable_export_name() String {
        return this.export_name + "_VTABLE"
    }
}

struct Prop {
    name: String
    type: Type
    class: Class
    act: int
    offset: int (0)
    chunk: ?Chunk (null)
}

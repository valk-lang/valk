
struct Class {
    unit: Unit
    build: Build
    fc: Fc
    act: int
    export_name: String
    display_name: String
    chunk: Chunk
    type: int
    _type: ?Type (null)
    scope: Scope
    //
    size: uint (0)
    props: Map[Prop] (map[Prop]{})
    funcs: Map[Func] (map[Func]{})
    //
    is_signed: bool (false)
    size_known: bool (false)

    fn get_type() Type {
        let t = this._type
        if !isset(t) {
            // Create type
            let b = this.build
            let ct = this.type
            let tt = ty_class
            if ct == ct_class : tt = ty_class
            else if ct == ct_struct : tt = ty_struct
            else if ct == ct_int : tt = ty_int
            else if ct == ct_float : tt = ty_float
            else if ct == ct_pointer : tt = ty_ptr
            else if ct == ct_bool : tt = ty_bool
            else : b.error("Unknown type in function Class.get_type() (compiler bug)")
            let is_pointer = ct == ct_class || ct == ct_struct || ct == ct_pointer
            let n = Type {
                type: tt
                build: b
                class: this
                is_signed: this.is_signed
                is_pointer: is_pointer
            }
            this._type = n
            return n
        }
        return t
    }

    fn determine_size() !unable {
        let ct = this.type
        if ct == ct_pointer || ct == ct_int {
            this.size_known = true
            return 
        }

        let props = this.props
        let size : uint = 0
        each props as name, prop {
            let prop_size = prop.type.size()
            if prop_size == 0 : throw unable
            size += prop_size
        }

        let b = this.build
        if b.verbose > 2 : b.log("> Determine class size: " + this.display_name + " | size: " + size)

        this.size = size
        this.size_known = true
    }

    fn determine_prop_offsets() {
        let offset: uint = 0
        let props = this.props
        each props as name, prop {
            let ps = prop.type.size()
            let skip = offset % ps
            prop.offset = offset + skip
            offset += skip + ps
        }
    }
}

struct Prop {
    name: String
    type: Type
    class: Class
    act: int
    index: uint
    offset: uint (0)
    chunk: ?Chunk (null)
}

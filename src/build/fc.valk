
use valk:fs

struct Fc{
    nsc: Nsc
    header_nsc: Nsc
    build: Build
    unit: Unit
    path: String
    start: Chunk
    scope: Scope
    is_header: bool

    static fn init(nsc: Nsc, header_nsc: Nsc, path: String, u: Unit) Fc {

        let content = fs:read(path) ! nsc.build.error("Unable to read file: " + path)
        let chunk = Chunk.new(nsc.build, content, null)

        if nsc.build.verbose > 0 : nsc.build.LOC += LOC_count(content)

        let is_header = path.ends_with(".valk.h")

        let fc = Fc{
            nsc: nsc
            header_nsc: header_nsc
            build: nsc.build
            unit: u
            path: path
            start: chunk
            scope: nsc.scope.sub_scope(sc_fc)
            is_header: is_header
        }

        chunk.fc = fc

        fc.build.fc_pipeline.push(fc)

        return fc;
    }
}

fn LOC_count(str: String) uint {
    let count : uint = 0
    let data = str.data_ptr()
    let bytes = str.bytes
    let i : uint = 0
    while i < bytes {
        let ch = @ptrv(data, u8, i++)
        if ch == '\n' : count++
    }
    return count
}

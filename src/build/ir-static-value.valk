
use valk:utils

fn ir_static_value(ir: IR, v: Value, code: utils:ByteBuffer) bool {
    let vt = v.type

    let len = code.length

    if vt == v_int {
        code.append_str(v.int)
        return true
    } else if vt == v_null {
        code.append_str("null")
        return true
    } else if vt == v_func_ptr {
        let func = v.func @as Func
        ir_check_func_definition(ir, func)
        code.append_str("@")
        code.append_str(func.export_name)
        return true
    } else if vt == v_static_array {
        code.append_str("[ ")
        let values = v.values
        if isset(values) {
            each values as i, sv {
                if i > 0 {
                    code.append_str(", ")
                }
                code.append_str(ir_type(sv.rett))
                code.append_str(" ")
                let check = ir_static_value(ir, sv, code)
                if !check {
                    code.length = len
                    // code.set_length(len)
                    return false
                }
            }
        }
        code.append_str(" ]")
        return true
    }

    return false
}

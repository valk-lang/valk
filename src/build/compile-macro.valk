

fn parse_compile_macro(p: Parser, scope: Scope) {
    let t = p.tok(false, false)

    if t == tok_word {
        if p.word_is("if") {
            let result = parse_compile_macro_condition(p, scope)
            let block = CmBlock.new(p, cm_block_if)
            block.if_result = result
            if result == 0 : parse_skip_compile_macro_block(p)
            return
        }
        if p.word_is("elif") {
            let block = CmBlock.get(p, cm_block_if) ! p.error("Unexpected '#elif' token. There's no previous #if to match with")
            if block.if_result == 0 {
                let result = parse_compile_macro_condition(p, scope)
                block.if_result = result
                if result == 0 : parse_skip_compile_macro_block(p)
            } else {
                parse_skip_compile_macro_block(p)
            }
            return
        }
        if p.word_is("else") {
            let block = CmBlock.get(p, cm_block_if) ! p.error("Unexpected '#else' token. There's no previous #if to match with")
            if block.if_result == 1 {
                parse_skip_compile_macro_block(p)
            }
            return
        }
        if p.word_is("end") {
            let block = CmBlock.pop(p, cm_block_any) ! p.error("Unexpected '#end' token. There's no previous #if/#loop to match with")
            if block.type == cm_block_loop_class {
                let start = block.start
                let classes = block.classes
                if isset(classes) {
                    let index = ++block.loop_index
                    let class = classes.get(index) !? null
                    let idf1 = block.idf1
                    if isset(start) && isset(class) && isset(idf1) {
                        p.set_chunk(start)
                        idf1.class = class
                        CmBlock.push(p, block)
                    }
                }
            } else if block.type == cm_block_loop_global {
                let start = block.start
                let list = block.globals
                if isset(list) {
                    let index = ++block.loop_index
                    let g = list.get(index) !? null
                    let idf1 = block.idf1
                    let idf2 = block.idf2
                    if isset(start) && isset(g) && isset(idf1) && isset(idf2) {
                        let type = g.type
                        if isset(type) {
                            p.set_chunk(start)
                            idf1.global = g
                            idf2.type = type
                            CmBlock.push(p, block)
                        }
                    }
                }
            } else if block.type == cm_block_loop_props {
                let start = block.start
                let list = block.idf_list
                if isset(list) {
                    let index = ++block.loop_index
                    let next = list.get(index) !? null
                    let idf1 = block.idf1
                    if isset(start) && isset(next) && isset(idf1) {
                        p.set_chunk(start)
                        idf1.prop = next.prop.@cast(Prop)
                        idf1.value = next.value
                        CmBlock.push(p, block)
                    }
                }
            } else if block.type == cm_block_loop_class_props {
                let start = block.start
                let list = block.idf_list
                if isset(list) {
                    let index = ++block.loop_index
                    let next = list.get(index) !? null
                    let idf1 = block.idf1
                    if isset(start) && isset(next) && isset(idf1) {
                        p.set_chunk(start)
                        idf1.prop = next.prop.@cast(Prop)
                        CmBlock.push(p, block)
                    }
                }
            } else if block.type == cm_block_loop_tests {
                let start = block.start
                let list = block.tests
                if isset(list) {
                    let index = ++block.loop_index
                    let test = list.get(index) !? null
                    let idf1 = block.idf1
                    if isset(start) && isset(test) && isset(idf1) {
                        p.set_chunk(start)
                        idf1.func = test
                        CmBlock.push(p, block)
                    }
                }
            } else if block.type == cm_block_loop_macro_values {
                let start = block.start
                let list = block.macro_values
                if isset(list) {
                    let index = ++block.loop_index
                    let idf_group = list.get(index) !? null
                    let idf1 = block.idf1
                    if isset(start) && isset(idf_group) && isset(idf1) {
                        p.set_chunk(start)
                        idf1.idf_group = idf_group
                        CmBlock.push(p, block)
                    }
                }
            }
            return
        }
        if p.word_is("print_type") {
            p.expect("(", false, false)

            let id = Id.read(p, true, false)
            let idf = scope.find_or_err(p, id)
            let type : ?Type = null
            let decl = idf.decl
            if idf.for == idf_decl && isset(decl) : type = decl.type
            else if idf.for == idf_type : type = idf.type
            else if idf.for == idf_prop || idf.for == idf_class_prop {
                let prop = idf.prop
                if !isset(prop) : p.bug("Missing property info in identifier")
                type = prop.type
            }
            if !isset(type) : p.error("Cannot determine type for: " + id)
            // Print info
            println("# Print type: " + type + " (File: " + p.chunk.path() + " | Line: " + p.line + ")")
            //
            p.expect(")", true, false)
            return
        }
        if p.word_is("print_value_type") {
            p.expect("(", false, false)
            let v = read_value(p, scope)
            // Print info
            println("# Print type: " + v.rett + " (File: " + p.chunk.path() + " | Line: " + p.line + ")")
            //
            p.expect(")", true, false)
            return
        }
        if p.word_is("print") {
            p.expect_string(true, false)
            println("# " + p.word())
            return
        }
        if p.word_is("error") {
            p.expect_string(true, false)
            p.error("# Compile error: " + p.word())
            return
        }

        // TODO
        // if p.word_is("continue") {
        //     return
        // }
            
        if p.word_is("loop") {
            p.tok(true, false)
            if p.word_is("classes") {

                let func = p.func_or() ! p.error("You cannot loop classes outside a function");
                func.tracks_classes = true;

                let name = p.read_word(true, false)
                p.expect_newline()
                //
                let classes = p.build.classes
                let class = classes.get(0) ! return
                // Loop
                let loop = CmBlock.new(p, cm_block_loop_class)
                loop.start = p.clone_chunk()
                loop.classes = classes

                // Idf
                let idf = Idf.for_class(class)
                loop.set_idf(p, name, idf)

                loop.idf1 = idf
            } else if p.word_is("globals") {

                let func = p.func_or() ! p.error("You cannot loop globals outside a function");
                func.tracks_globals = true;

                let name_g = p.read_word(true, false)
                let name_type = p.read_word(true, false)
                p.expect_newline()
                //
                let globals = p.build.globals
                let g = globals.get(0) ! return
                // Loop
                let loop = CmBlock.new(p, cm_block_loop_global)
                loop.start = p.clone_chunk()
                loop.globals = globals

                // Idf
                let idf = Idf.for_global(g)
                loop.set_idf(p, name_g, idf)
                let type = g.type
                if !isset(type) : p.error("Missing global type in loop globals (bug)")
                let idf_type = Idf.for_type(type)
                loop.set_idf(p, name_type, idf_type)

                loop.idf1 = idf
                loop.idf2 = idf_type

            } else if p.word_is("object") {

                let id = Id.read(p, true, false)
                let idf = scope.find_or_err(p, id)
                if idf.for != idf_decl : p.error("Expected a variable as the first argument")
                let decl = idf.decl
                if !isset(decl) : p.error("Missing decl value in loop object (bug)")
                let type = decl.type
                let class = type.class
                if !isset(class) {
                    parse_skip_compile_macro_block(p, true)
                    return
                }

                p.expect("as", true, false)
                let name_prop = p.read_word(true, false)
                p.expect_newline()
                //
                let props = class.props
                let items = array[Idf]{}
                each props as prop {
                    items.push(Idf.for_prop(prop, vgen_prop(prop, vgen_decl(decl))))
                }
                let first = items.get(0) ! {
                    parse_skip_compile_macro_block(p, true)
                    return
                }
                // Loop
                let loop = CmBlock.new(p, cm_block_loop_props)
                loop.start = p.clone_chunk()
                loop.idf_list = items

                // Idf
                let idf_prop = Idf.for_prop(first.prop.@cast(Prop), first.value)
                loop.set_idf(p, name_prop, idf_prop)

                loop.idf1 = idf_prop

            } else if p.word_is("properties") {

                let type = read_type(p, scope)
                let class = type.class
                if !isset(class) {
                    parse_skip_compile_macro_block(p, true)
                    return
                }

                p.expect("as", true, false)
                let name_prop = p.read_word(true, false)
                p.expect_newline()
                //
                let props = class.props
                let items = array[Idf]{}
                each props as prop {
                    items.push(Idf.for_class_prop(prop))
                }
                let first = items.get(0) ! {
                    parse_skip_compile_macro_block(p, true)
                    return
                }
                // Loop
                let loop = CmBlock.new(p, cm_block_loop_class_props)
                loop.start = p.clone_chunk()
                loop.idf_list = items

                // Idf
                let idf_prop = Idf.for_class_prop(first.prop.@cast(Prop))
                loop.set_idf(p, name_prop, idf_prop)

                loop.idf1 = idf_prop

            } else if p.word_is("tests") {

                p.expect("as", true, false)
                let name = p.read_word(true, false)
                p.expect_newline()
                //
                let tests = p.build.tests
                let test = tests.get(0) ! {
                    parse_skip_compile_macro_block(p, true)
                    return
                }
                // Loop
                let loop = CmBlock.new(p, cm_block_loop_tests)
                loop.start = p.clone_chunk()
                loop.tests = tests

                // Idf
                let idf = Idf.for_func(test)
                loop.set_idf(p, name, idf)
                loop.idf1 = idf

            } else if p.word_is("macro_values") {

                let id = Id.read(p, true, false)
                let idf = scope.find_or_err(p, id)
                if idf.for != idf_macro_values : p.error("The identifier does not represent a list of macro values")
                let macro_values = idf.macro_values
                if !isset(macro_values) : p.error("Missing macro values list in the macro_values identifier (bug)")
                p.expect("as", true, false)
                let name = p.read_word(true, false)

                // Loop
                let loop = CmBlock.new(p, cm_block_loop_macro_values)
                loop.start = p.clone_chunk()
                loop.macro_values = macro_values

                // Idf
                let idfs = macro_values.get(0) ! {
                    parse_skip_compile_macro_block(p, true)
                    return
                }

                idf = Idf.for_idf_group(idfs)
                loop.set_idf(p, name, idf)
                loop.idf1 = idf
            } else {
                p.error("Unexpected token: '" + p.word() + "'. Expected tokens after '#loop' are: classes")
            }
            return
        }
    }

    p.error_token()
}

fn parse_skip_compile_macro_block(p: Parser, is_loop: bool (false)) {
    let depth = 1
    while true {
        p.backup()
        let t = p.tok(true, true)
        if t == tok_end : p.error("Missing compile macro '#end' token")
        if p.on_newline && p.sign_is("#") {

            t = p.tok(false, false)

            if p.word_is("if") || p.word_is("loop") : depth++
            else if p.word_is("end") : depth--
            else if depth == 1 && !is_loop && (p.word_is("else") || p.word_is("elif")) : depth--

            if depth == 0 {
                if !is_loop : p.restore()
                break
            }
        }
    }
}

fn parse_skip_compile_macro(p: Parser) {
    let t = p.tok(false, false)

    if t == tok_word {
        if p.word_is("if") {
            let block = CmBlock.new(p, cm_block_if)
            block.if_result = 0
            parse_skip_compile_macro_block(p)
            return
        }
        if p.word_is("loop") {
            let block = CmBlock.new(p, cm_block_if)
            block.if_result = 0
            parse_skip_compile_macro_block(p)
            return
        }
        if p.word_is("elif") {
            CmBlock.get(p, cm_block_if) ! p.error("Unexpected '#elif' token. There's no previous #if to match with")
            parse_skip_compile_macro_block(p)
            return
        }
        if p.word_is("else") {
            CmBlock.get(p, cm_block_if) ! p.error("Unexpected '#else' token. There's no previous #if to match with")
            return
        }
        if p.word_is("end") {
            CmBlock.pop(p, cm_block_any) ! p.error("Unexpected '#end' token. There's no previous #if to match with")
            return
        }
    }
}

fn parse_compile_macro_condition(p: Parser, scope: Scope) u8 {
    let t = p.tok(true, false)
    let defs = p.build.cm_defs
    let result: u8 = 2

    if t == tok_word {
        if p.word_is("is_defined") {
            p.expect("(", false, false)
            let word = p.read_word(true, true)
            result = defs.has(word) ? 1 : 0
            p.expect(")", true, false)
        } else if p.word_is("is_identifier") {
            p.expect("(", false, false)
            let name = p.read_word(true, true)
            let id = Id.read_full(p, name)
            let idf = scope.find(p, id) !? null
            result = isset(idf) ? 1 : 0
            p.expect(")", true, false)
        } else if p.word_is("is_type_of_class") {
            p.expect("(", false, false)
            let type = read_type(p, scope, false)
            p.expect(",", true, false)
            let type2 = read_type(p, scope, false)
            result = type.class == type2.class ? 1 : 0
            p.expect(")", true, false)
        } else if p.word_is("is_pointer_type") {
            p.expect("(", false, false)
            let type = read_type(p, scope, false)
            result = type.is_pointer ? 1 : 0
            p.expect(")", true, false)
        } else if p.word_is("is_raw_pointer_type") {
            p.expect("(", false, false)
            let type = read_type(p, scope, false)
            result = type.type == ty_ptr ? 1 : 0
            p.expect(")", true, false)
        } else if p.word_is("is_integer_type") {
            p.expect("(", false, false)
            let type = read_type(p, scope, false)
            result = type.type == ty_int ? 1 : 0
            p.expect(")", true, false)
        } else if p.word_is("is_float_type") {
            p.expect("(", false, false)
            let type = read_type(p, scope, false)
            result = type.type == ty_float ? 1 : 0
            p.expect(")", true, false)
        } else if p.word_is("is_bool_type") {
            p.expect("(", false, false)
            let type = read_type(p, scope, false)
            result = type.type == ty_bool ? 1 : 0
            p.expect(")", true, false)
        } else if p.word_is("is_gc_type") {
            p.expect("(", false, false)
            let type = read_type(p, scope, false)
            result = type.is_gc() ? 1 : 0
            p.expect(")", true, false)
        } else if p.word_is("is_nullable_type") {
            p.expect("(", false, false)
            let type = read_type(p, scope, false)
            result = type.nullable ? 1 : 0
            p.expect(")", true, false)
        } else if p.word_is("is_void_type") {
            p.expect("(", false, false)
            let type = read_type(p, scope, false)
            result = type.is_void() ? 1 : 0
            p.expect(")", true, false)
        } else if p.word_is("is_signed_type") {
            p.expect("(", false, false)
            let type = read_type(p, scope, false)
            result = type.is_signed ? 1 : 0
            p.expect(")", true, false)
        } else if p.word_is("is_structural_type") {
            p.expect("(", false, false)
            let type = read_type(p, scope, false)
            result = type.is_structural_type() ? 1 : 0
            p.expect(")", true, false)
        } else if p.word_is("type_has_method") {
            p.expect("(", false, false)
            let type = read_type(p, scope, false)
            p.expect(",", true, false)
            let name = p.read_word(true, false)
            let class = type.class
            if isset(class) {
                let func = class.get_func(name) !? null
                // println(class.display_name + " HAS? " + name + " => " + (isset(func) ? "YES" : "NO"))
                result = isset(func) ? 1 : 0
            } else {
                result = 0
            }
            p.expect(")", true, false)

        } else if p.word_is("type_has_vtable") {
            p.expect("(", false, false)
            let type = read_type(p, scope, false)
            let class = type.class
            result = 0
            if isset(class) {
                result = class.props.has("_VTABLE") ? 1 : 0
            }
            p.expect(")", true, false)

        } else if p.word_is("global_is_shared") {
            p.expect("(", false, false)
            let id = Id.read(p, true, false)
            let idf = scope.find_or_err(p, id)
            if idf.for != idf_global : p.error("Invalid global identifier")
            let g = idf.global
            if !isset(g) : p.error("Missing global identifier value (bug)")
            result = g.shared ? 1 : 0
            p.expect(")", true, false)

        } else if p.word_is("property_name_is") {
            p.expect("(", false, false)
            let id = Id.read(p, true, false)
            let idf = scope.find_or_err(p, id)
            if idf.for != idf_prop : p.error("Invalid property identifier")
            let prop = idf.prop
            if !isset(prop) : p.error("Identifier does not represent a property")
            p.expect(",", true, false)
            let name = p.read_word(true, false)
            result = prop.name == name ? 1 : 0
            p.expect(")", true, false)

        } else {
            let word = p.word()
            let def_value = defs.get(word) ! p.error("Unknown compile macro definition: '" + word + "'")
            result = def_value == "0" ? 0 : 1

            t = p.tok(true, false, false)
            if t == tok_sign && (p.word_is("==") || p.word_is("!=")) {
                t = p.tok(true, false)
                let not_eq = p.word_is("!=")
                t = p.tok(true, false)
                if t == tok_word {
                    let value = p.word()
                    result = def_value == value ? 1 : 0
                } else if t == tok_int {
                    let value = p.word()
                    result = def_value == value ? 1 : 0
                } else {
                    p.error("Invalid right side value: '" + p.word() + "'")
                }

                if not_eq {
                    result = result == 1 ? 0 : 1
                }
            }
        }
    } else if t == tok_sign {
        if p.word_is("!") {
            result = parse_compile_macro_condition(p, scope)
            result = result == 1 ? 0 : 1
        }
    }

    if result == 2 {
        p.error_token()
    }

    return result
}

fn parse_compile_macro_scope_end_check(p: Parser) {
    let block = p.cm_block
    if isset(block) {
        p.error("Missing compile macro '#end' token")
    }
}



fn parse_compile_macro(p: Parser, in_func: bool) {
    let t = p.tok(false, false)

    if t == tok_word {
        if p.word_is("if") {
            let result = parse_compile_macro_condition(p)
            p.cm_results.push(result)
            return
        }
        if p.word_is("end") {
            let res = p.cm_results.pop() ! p.error("Unexpected '#end' token. There's no previous #if to match with")
            return
        }
    }

    p.error_token()
}

fn parse_compile_macro_condition(p: Parser) u8 {
    let t = p.tok(true, false)
    let defs = p.build.cm_defs
    let result: u8 = 0

    if t == tok_word {
        let word = p.word()
        let def = defs.get(word) ! p.error("Unknown compile macro definition: '" + word + "'")
        result = def == "0" ? 0 : 1

        t = p.tok(true, false, false)
        if t == tok_sign && (p.word_is("==") || p.word_is("!=")) {
            t = p.tok(true, false)
            let not_eq = p.word_is("!=")
            t = p.tok(true, false)
            if t == tok_word {
                let word2 = p.word()
                result = word == word2 ? 1 : 0
            } else if t == tok_int {
                let word2 = p.word()
                result = word == word2 ? 1 : 0
            } else {
                p.error("Invalid right side value: '" + p.word() + "'")
            }

            if not_eq {
                result = result == 1 ? 0 : 1
            }
        }

        return result
    }
    if t == tok_sign {
        if p.word_is("!") {
            result = parse_compile_macro_condition(p)
            return result == 1 ? 0 : 1
        }
    }

    p.error_token()
}

fn parse_compile_macro_scope_end_check(p: Parser) {
    if p.cm_results.length > 0 {
        p.error("Missing compile macro #if/else end token: '#end'")
    }
}

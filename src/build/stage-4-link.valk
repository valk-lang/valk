
use helper
use valk:fs
use valk:os

fn stage_link(b: Build) {

    if b.verbose > 2 : b.log("> Stage 4: Link executable")

    let t = b.target
    let host_is_target = t.os == t.host_os && t.arch == t.host_arch
    let valk_lib_dir = helper:valk_lib_dir()

    let linker = ""
    if host_is_target && t.os != "win" {
        linker = "ld"
    } else {
        link_check_symlinks(b, t)

        if t.os == "linux" {
            linker = "ld.lld"
        } else if t.os == "macos" {
            linker = "ld64.lld"
        } else if t.os == "win" {
            linker = "lld-link"
        }

        if t.host_os == "win" {
            linker = fs:exe_dir() + "/" + linker + ".exe"
        }
    }
    if linker.bytes == 0 : b.error("Cannot determine linker for your OS")

    let cmd = linker
    cmd += " "
    if t.os == "win" {
        cmd += "/out:\""
    } else {
        cmd += "-pie -o \""
    }
    cmd += b.path_out
    cmd += "\" "

    // Link directories
    // Default OS directories
    if t.host_is_target() {
        if t.target_is_macos() {
            cmd = add_lib_dir(t, cmd, "/usr/lib");
            cmd = add_lib_dir(t, cmd, "/usr/local/lib");
            cmd = add_lib_dir(t, cmd, "/opt/homebrew/lib");
            cmd = add_lib_dir(t, cmd, "/System/Library/Frameworks");
            cmd = add_lib_dir(t, cmd, "/Library/Frameworks");
            cmd = add_lib_dir(t, cmd, "~/Library/Frameworks");
            cmd = add_lib_dir(t, cmd, "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib/");
        } else if t.target_is_linux() {
            cmd = add_lib_dir(t, cmd, "/lib64");
            cmd = add_lib_dir(t, cmd, "/usr/lib64");
            cmd = add_lib_dir(t, cmd, "/usr/local/lib64");
            cmd = add_lib_dir(t, cmd, "/usr/lib");
            cmd = add_lib_dir(t, cmd, "/usr/local/lib");
            if t.target_is_x64() {
                cmd = add_lib_dir(t, cmd, "/lib/x86_64-linux-gnu");
            } else if t.target_is_arm64() {
                cmd = add_lib_dir(t, cmd, "/lib/aarch64-linux-gnu");
            }
        }
    }

    // Add package link directories
    each b.pkc_by_dir as pkgdir, pkc {
        cmd = add_lib_dir(t, cmd, pkgdir + "/libs/" + t.target)

        // Add extra directories from config
        let config = pkc.config
        if !isset(config) : continue
        let data = config.json
        data = data.get("targets") ! continue
        data = data.get(t.target) ! continue
        let ldirs = data.get("link-dirs") ! continue
        let dirs = ldirs.array() ! continue

        each dirs as dir {
            let d = dir.string() ! continue
            cmd = add_lib_dir(t, cmd, pkgdir + "/" + d)
        }
    }

    // Details
    if t.os == "linux" {
        // cmd += "--sysroot=\""
        // cmd += valk_lib_dir
        // cmd += "/root\" "
        cmd += "--sysroot=\"/\" "

        if t.arch == "x64" {
            cmd += "-m elf_x86_64 "
            cmd += "--dynamic-linker /lib64/ld-linux-x86-64.so.2 "
        } else if t.arch == "arm64" {
            cmd += "-m aarch64linux "
            cmd += "--dynamic-linker /lib/ld-linux-aarch64.so.1 "
        }

        // if (b->type == build_t_exe) {
            cmd += "-l:Scrt1.o "
            cmd += "-l:crti.o "
            cmd += "-l:crtbeginS.o "
        // } else if (b->type == build_t_shared_lib) {
        //     str_append_chars(cmd, "--shared ");
        // }

    } else if t.os == "macos" {
        // cmd += "-syslibroot "
        // cmd += valk_lib_dir
        // cmd += "root "
        cmd += "--sysroot=\"/\" "

        // ppc, ppc64, i386, x86_64
        if t.arch == "x64" {
            cmd += "-arch x86_64 "
        } else if t.arch == "arm64" {
            cmd += "-arch arm64 "
        }
        cmd += "-platform_version macos 11.0 11.1 "
        // str_append_chars(cmd, "-sdk_version 11.1 ");
        // -macosx_version_min 11.1.0 -sdk_version 11.1.0

        // if (b->type == build_t_shared_lib) {
        //     str_append_chars(cmd, "-dylib ");
        // }
    } else if t.os == "win" {
        // /winsysroot:<value>
        cmd += "/nodefaultlib "
        cmd += "/guard:ehcont "
        // str_append_chars(cmd, "/force:unresolved ");
        if t.arch == "x64" {
            cmd += "/machine:x64 "
        }
        // if (b->type == build_t_shared_lib) {
        //     str_append_chars(cmd, "/dll ");
        // }
    }

    // Object files
    each b.units as unit {
        cmd += unit.path_o + " "
    }

    // Link libs
    cmd = add_libs(b, cmd)

    // End
    if t.os == "linux" {
        cmd += "-l:crtendS.o "
        cmd += "-l:crtn.o "
    }

    // Run command
    if b.verbose > 1 : println("# Link cmd: " + cmd);
    let code, out = os:exec(cmd) ! b.error("❌ Failed to link")
    if code != 0 {
        println("-----------------------------")
        println("# Cmd: " + cmd)
        println("# Exit code: " + code)
        println("# Output: " + out)
        println("-----------------------------")
        b.error("❌ Failed to link")
    }
}

fn add_libs(b: Build, cmd: String) String {
    // Links from .valk.h headers
    let links = b.links
    each links as link {
        cmd = add_lib(b, cmd, link.lib, link.type == link_static)
    }

    return cmd
}
fn add_lib(b: Build, cmd: String, lib: String, link_static: bool) String {
    let is_win = b.target.os == "win"
    let is_macos = b.target.os == "macos"

    let prefix = ""
    let suffix = ""
    if !is_win {
        prefix = "-l";
        if (link_static && !is_macos) {
            prefix = "-l:lib";
            suffix = ".a";
        }
    } else {
        suffix = ".lib";
    }

    cmd += prefix + lib + suffix + " "

    return cmd
}
fn add_lib_dir(t: Target, cmd: String, dir: String) String {
    // Link directories
    if fs:exists(dir) {
        cmd += t.os == "win" ? "/libpath:\"" : "-L\""
        cmd += dir
        cmd += "\" "
    }
    return cmd
}

fn link_check_symlinks(b: Build, t: Target) {
    let linker_dir = fs:exe_dir()
    if t.host_os != "win" {
        let code, out = os:exec("which lld") ! b.error("❌ Please install the 'lld' linker to cross compile")
        if code == 1 : b.error("❌ Please install the 'lld' linker to cross compile")
        linker_dir = out.rtrim("/lld\n")
    }

    if !fs:is_dir(linker_dir) : b.error("❌ Linker directory not found: " + linker_dir)
    let ext = t.host_os == "win" ? ".exe" : ""
    let main_linker = linker_dir + (t.host_os == "win" ? "/lld-link" : "/lld") + ext
    if !fs:exists(main_linker) : b.error("❌ Cannot find linker: " + main_linker)

    if t.os == "linux" : check_linker_exe(b, t, main_linker, linker_dir + "/ld.lld" + ext)
    if t.os == "macos" : check_linker_exe(b, t, main_linker, linker_dir + "/ld64.lld" + ext)
    if t.os == "win" : check_linker_exe(b, t, main_linker, linker_dir + "/lld-link" + ext)
}

fn check_linker_exe(b: Build, t: Target, main_linker: String, alias_path: String) {
    if !fs:exists(alias_path) {
        let cmd = "valk symlink-linker"
        if t.host_os != "win" {
            cmd = "sudo " + cmd
        }
        b.error("> Run the following command to generate symlinks to lld in order to cross compile: " + cmd)
    }
}

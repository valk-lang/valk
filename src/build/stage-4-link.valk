
use helper
use valk:fs
use valk:os

fn stage_link(b: Build) {

    if b.verbose > 2 : b.log("> Stage 4: Link executable")

    let t = b.target
    let host_is_target = t.os == t.host_os && t.arch == t.host_arch
    let valk_lib_dir = helper:valk_lib_dir()

    let out_path = b.cli.values.get("-o") ! {
        println("# Error: Missing '-o' option")
        help()
    }

    let linker = ""
    if host_is_target {
        if t.os == "linux" {
            linker = "ld"
        } else if t.os == "macos" {
            linker = "ld"
        } else if t.os == "win" {
            linker = win_linker()
        }
    } else {
        if t.os == "linux" {
            linker = "ld.lld"
        } else if t.os == "macos" {
            linker = "ld64.lld"
        } else if t.os == "win" {
            linker = "lld-link"
        }
    }
    if linker.bytes == 0 : b.error("Cannot determine linker for your OS")

    let cmd = linker
    cmd += " "
    if t.os == "win" {
        cmd += "/out:\""
    } else {
        cmd += "-pie -o \""
    }
    cmd += out_path
    if t.os == "win" && !out_path.ends_with(".exe") {
        cmd += ".exe"
    }
    cmd += "\" "

    // Link directories
    cmd += t.os == "win" ? "/libpath:\"" : "-L\""
    cmd += valk_lib_dir + "/libs/" + t.target
    cmd += "\" "

    // Details
    if t.os == "linux" {
        cmd += "--sysroot=\""
        cmd += valk_lib_dir
        cmd += "/root\" "

        if t.arch == "x64" {
            cmd += "-m elf_x86_64 "
            cmd += "--dynamic-linker /lib64/ld-linux-x86-64.so.2 "
        } else if t.arch == "x64" {
            cmd += "-m aarch64linux "
            cmd += "--dynamic-linker /lib/ld-linux-aarch64.so.1 "
        }

        // if (b->type == build_t_exe) {
            cmd += "-l:Scrt1.o "
            cmd += "-l:crti.o "
            cmd += "-l:crtbeginS.o "
        // } else if (b->type == build_t_shared_lib) {
        //     str_append_chars(cmd, "--shared ");
        // }

    } else if t.os == "macos" {
        cmd += "-syslibroot "
        cmd += valk_lib_dir
        cmd += "root "

        // ppc, ppc64, i386, x86_64
        if t.arch == "x64" {
            cmd += "-arch x86_64 "
        } else if t.arch == "arm64" {
            cmd += "-arch arm64 "
        }
        cmd += "-platform_version macos 11.0 11.1 "
        // str_append_chars(cmd, "-sdk_version 11.1 ");
        // -macosx_version_min 11.1.0 -sdk_version 11.1.0

        // if (b->type == build_t_shared_lib) {
        //     str_append_chars(cmd, "-dylib ");
        // }
    } else if t.os == "win" {
        // /winsysroot:<value>
        cmd += "/nodefaultlib /guard:ehcont "
        // str_append_chars(cmd, "/force:unresolved ");
        if t.arch == "x64" {
            cmd += "/machine:x64 "
        }
        // if (b->type == build_t_shared_lib) {
        //     str_append_chars(cmd, "/dll ");
        // }
    }

    // Object files
    each b.units as unit {
        cmd += unit.path_o + " "
    }

    // Link libs
    cmd = add_libs(b, cmd)

    // End
    if t.os == "linux" {
        cmd += "-l:crtendS.o "
        cmd += "-l:crtn.o "
    }

    // Run command
    if b.verbose > 1 : println("# Link cmd: " + cmd);
    let code, out = os:exec(cmd) ! b.error("❌ Failed to link")
    if code != 0 {
        println("-----------------------------")
        println("# Cmd: " + cmd)
        println("# Exit code: " + code)
        println("# Output: " + out)
        println("-----------------------------")
        b.error("❌ Failed to link")
    }
}

fn add_libs(b: Build, cmd: String) String {
    let is_win = b.target.os == "win"
    let is_macos = b.target.os == "macos"
    let links = b.links
    each links as link {
        let is_static = link.type == link_static
        let prefix = ""
        let suffix = ""
        if !is_win {
            prefix = "-l";
            if (is_static && !is_macos) {
                prefix = "-l:lib";
                suffix = ".a";
            }
        } else {
            suffix = ".lib";
        }

        cmd += prefix + link.lib + suffix + " "
    }

    return cmd
}

fn win_linker() String {
    return fs:exe_dir() + "/lld-link.exe"
}

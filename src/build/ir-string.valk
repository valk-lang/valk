

fn ir_string(ir: IR, body: String) String {

    let code = ir.code_strings

    let nr = ir.stringc++
    let bytes = body.bytes
    let data = body.data_ptr()

    // let data_name = "@body." + nr
    let string_name = "@string." + nr

    // 
    code.append_str(string_name)
    code.append_str(" = private global <{ i32, i16, i16, i64, [")
    code.append_str(bytes + 1)
    code.append_str(" x i8] }> <{ i32 0, i16 0, i16 0, i64 ")
    code.append_str(bytes)
    code.append_str(", [")
    code.append_str(bytes + 1)
    code.append_str(" x i8] c\"")
    // String bytes
    let i : uint = 0
    while i < bytes {
        let ch = @ptrv(data, u8, i++)
        if !ch.is_alpha_numeric() { 
            code.append_byte('\\')
            let nr : String = ch.to_hex()
            if nr.bytes < 2 : code.append_byte('0')
            code.append_str(nr)
            continue
        }
        code.append_byte(ch)
    }
    code.append_str("\\00\"")
    //
    code.append_str(" }>\n")

    return string_name
}

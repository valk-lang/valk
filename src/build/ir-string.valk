

fn ir_string(ir: IR, body: String) String {

    let code = ir.code_strings

    let nr = ir.stringc++
    let bytes = body.bytes
    let data = body.data_ptr()

    let data_name = "@body." + nr
    let string_name = "@string." + nr

    // Body
    code.append_str(data_name)
    code.append_str(" = private global [")
    code.append_str(bytes + 1)
    code.append_str(" x i8] c\"")

    let i : uint = 0
    while i < bytes {
        let ch = @ptrv(data, u8, i++)
        if ch == '"' { 
            code.append_byte('\\')
            code.append_byte('2')
            code.append_byte('2')
            continue
        }
        code.append_byte(ch)
    }
    code.append_str("\\00\"\n")

    // Object
    code.append_str(string_name)
    code.append_str(" = private global <{ i32, i8, i8, i16, i64, ptr }> <{ i32 0, i8 0, i8 255, i16 0, i64 ")
    code.append_str(bytes)
    code.append_str(", ptr ")
    code.append_str(data_name)
    code.append_str(" }>\n")

    return string_name
}


use valk:json
use valk:fs
use helper

class Unit {
    build: Build
    name: String
    functions: Array[Func] (array[Func]{})
    globals: Array[Global] (array[Global]{})
    classes: Array[Class] (array[Class]{})
    path_o: String
    path_ir: String
    path_json: String
    _json: ?json:Value (null)
    _ir: ?IR (null)
    changed: bool (true)

    static fn new(b: Build, name: String, hash: String) Unit {
        let base = helper:add(b.cache_dir, name + "_" + hash)
        let path_o = base + ".o"
        let path_ir = base + ".ir"
        let path_json = base + ".json"

        let u = Unit {
            build: b
            name: name
            path_o: path_o
            path_ir: path_ir
            path_json: path_json
        }

        b.units.push(u)

        return u
    }

    fn ir() IR {
        let ir = this._ir
        if !isset(ir) {
            let irr = IR.new(this)
            this._ir = irr
            return irr
        }
        return ir
    }

    fn json() ?json:Value {
        let js = this._json
        if isset(js) : return js
        let content = fs:read(this.path_json) ! return null
        js = json:decode(content) ! return null
        this._json = js
        return js
    }

    fn wipe() {
        each this.functions as func {
            func.wipe_ir()
        }
        this.functions.clear()
        this.classes.clear()
        this.globals.clear()
    }

    fn new_func(fc: ?Fc, act: int, name: ?String, generic_names: ?Map[GenericName], chunk_args: ?Chunk) Func {

        let nsc : ?Nsc = null
        let in_header = false
        let arg_scope = Scope.new(sc_default, null)
        if isset(fc) {
            nsc = fc.nsc
            arg_scope.parent = fc.scope
            in_header = fc.is_header
        }

        let n = name ?? ("anon_func_" + this.build.gen_func_name++)
        let ename = n
        let dname = name ?? "<anonymous-function>"
        if isset(nsc) {
            ename = nsc.export_name(n)
            dname = nsc.display_name(n)
        }

        let f = Func {
            unit: this
            build: this.build
            fc: fc
            name: n
            export_name: ename
            display_name: dname
            act: act
            arg_scope: arg_scope
            chunk_args: chunk_args
            from_header: in_header
            info_calls_unknown_code: in_header
            generic_names: generic_names
            is_generic_base: isset(generic_names)
            rett: type_void(this.build)
        }

        this.build.functions.push(f)

        if f.is_generic_base {
            f.generics = map[Func]{}
            f.gen_docs = false
        } else {
            this.functions.push(f)
            this.build.ast_pipeline.push(f)
        }

        return f
    }

    fn new_class(fc: ?Fc, act: int, name: ?String, type: int, generic_names: ?Map[GenericName], chunk: ?Chunk) Class {

        let nsc : ?Nsc = null
        let scope : Scope = Scope.new(sc_class, null)
        if isset(fc) {
            nsc = fc.nsc
            scope.parent = fc.scope
            scope.func = fc.scope.func
        }

        let n = name ?? ((type == ct_struct ? "anon_struct_" : "anon_class_") + this.build.gen_func_name++)
        let ename = n
        let dname = name ?? (type == ct_struct ? "<anonymous-struct>" : "<anonymous-class>")
        if isset(nsc) {
            ename = nsc.export_name(n)
            if nsc.pkc != this.build.nsc_main().pkc && nsc.pkc.name != "valk" {
                dname = nsc.display_name(n)
            }
        }

        let class = Class {
            unit: this
            build: this.build
            fc: fc
            name: n
            export_name: ename
            display_name: dname
            act: act
            type: type
            scope: scope
            chunk: chunk
            generic_names: generic_names
            is_generic_base: isset(generic_names)
        }

        this.build.classes.push(class)
        this.classes.push(class)

        if class.is_generic_base {
            class.generics = map[Class]{}
            class.gen_docs = false
        }

        return class
    }

    fn new_global(fc: ?Fc, act: int, name: String, export_name: String, display_name: String, chunk_type: ?Chunk, chunk_value: ?Chunk) Global {

        let g = Global {
            unit: this
            build: this.build
            fc: fc
            act: act
            name: name
            export_name: export_name
            display_name: display_name
            ir_name: "@" + export_name
            chunk_type: chunk_type
            chunk_value: chunk_value
            from_header: false
        }

        if isset(fc) {
            if fc.is_header {
                g.from_header = false
            } else {
                this.globals.push(g)
            }
        } else {
            this.globals.push(g)
        }

        this.build.globals.push(g)

        return g
    }
}


// fn new_func(Unit: u, act: int, name: ?String, parent: ?Scope (null)) Func {

//     let scope : Scope = isset(parent) ? parent.sub_scope(sc_func) : Scope.new(sc_func, null)

//     let scope_alloca = scope.sub_scope(sc_default)
//     let scope_defer = scope.sub_scope(sc_default)

//     let f = Func {
//         unit: u
//         build: u.build
//         act: act
//         name: name
//         scope: scope
//         scope_alloca: scope_alloca
//         scope_defer: scope_defer
//         //
//         rett: type_void(u.build)
//     }

//     f.scope.func = f
// }

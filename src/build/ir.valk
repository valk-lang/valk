
use valk:utils

struct IR {
    unit: Unit
    build: Build
    functions: Array[IRFunc] (array[IRFunc]{})
    func_active: ?IRFunc (null)
    block_active: ?IRBlock (null)
    block_loop_cond: ?IRBlock (null)
    block_loop_after: ?IRBlock (null)
    //
    defined_functions: Array[Func] (array[Func]{})
    defined_globals: Array[Global] (array[Global]{})
    defined_symbols: Array[String] (array[String]{})
    //
    code_func_defs: utils:ByteBuffer (utils:ByteBuffer.new(128))
    code_global_defs: utils:ByteBuffer (utils:ByteBuffer.new(128))
    code_strings: utils:ByteBuffer (utils:ByteBuffer.new(128))
    //
    varc: uint (0)
    stringc: uint (0)

    static fn new(u: Unit) IR {
        let ir = IR {
            unit: u
            build: u.build
        }
        return ir
    }

    fn set_func(func: IRFunc) {
        this.func_active = func
        this.set_block(func.block_code)
    }
    fn func() IRFunc {
        let b = this.func_active
        if !isset(b) : this.error("Missing active func (bug)")
        return b
    }

    fn set_block(block: IRBlock) {
        this.block_active = block
    }
    fn block() IRBlock {
        let b = this.block_active
        if !isset(b) : this.error("Missing active block (bug)")
        return b
    }
    fn code() utils:ByteBuffer {
        return this.block().code
    }
    fn var() String {
        return "%." + (this.varc++)
    }

    fn final_code() String {
        let final = utils:ByteBuffer.new(1024)

        // LLVM internals
        this.ir_define_llvm_internals(final)
        final.append_str("\n");

        // Globals
        each this.unit.globals as g {
            ir_check_global_definition(this, g, false)
        }
        each this.unit.classes as class {
            ir_define_vtable(this, class)
        }

        ir_define_gc_table(this)

        final.append(this.code_global_defs)
        final.append_str("\n");

        // Extern functions
        final.append(this.code_func_defs)
        final.append_str("\n");

        // Strings
        final.append(this.code_strings)
        final.append_str("\n");

        // Functions
        let ir_funcs = this.functions
        each ir_funcs as ir_func {
            final.append_str(ir_func.func.ir_code)
            final.append_str("\n");
        }

        // Tags
        final.append_str("\n");

        return final.to_string()
    }

    fn ir_define_llvm_internals(code: utils:ByteBuffer) {
        code.append_str("declare ptr @llvm.frameaddress(i32) nocallback nofree nosync nounwind readnone willreturn\n")
        code.append_str("declare ptr @llvm.stacksave() nounwind\n")
        code.append_str("declare i32 @llvm.eh.sjlj.setjmp(ptr) nounwind returns_twice\n")
        code.append_str("declare void @llvm.eh.sjlj.longjmp(ptr) nounwind\n")
        code.append_str("declare void @_setjmp(ptr) nounwind\n")
        code.append_str("declare void @longjmp(ptr, i32) nounwind\n")
        code.append_str("declare void @llvm.memset.inline.p0.p0.i64(ptr, i8, i64, i1)\n")
        code.append_str("declare void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)\n")
    }

    exit_fn error(msg: String) {
        this.build.error("# IR Error: " + msg)
    }

}

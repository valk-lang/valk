
use valk:utils

struct IR {
    unit: Unit
    build: Build
    functions: Array[IRFunc] (array[IRFunc]{})
    func_active: ?IRFunc (null)
    block_active: ?IRBlock (null)
    varc: uint (0)

    static fn new(u: Unit) IR {
        let ir = IR {
            unit: u
            build: u.build
        }
        return ir
    }

    fn set_func(func: IRFunc) {
        this.func_active = func
        this.set_block(func.block_code)
    }
    fn set_block(block: IRBlock) {
        this.block_active = block
    }
    fn block() IRBlock {
        let b = this.block_active
        if !isset(b) : this.error("Missing active block (bug)")
        return b
    }
    fn code() utils:ByteBuffer {
        return this.block().code
    }
    fn var() String {
        return "%." + (this.varc++)
    }

    exit_fn error(msg: String) {
        this.build.error("# IR Error:" + msg)
    }

}


use valk:utils

fn ir_check_global_definition(ir: IR, g: Global) {

    if ir.defined_globals.contains(g) : return
    else : ir.defined_globals.push(g)

    let extern = g.from_header || g.unit != ir.unit

    let code = ir.code_global_defs

    let type = g.type
    if !isset(type) : ir.error("Missing IR global type (bug)")

    code.append_str(g.ir_name)
    code.append_str(" = ")
    code.append_str(extern ? "external " : "dso_local ")
    code.append_str(g.shared ? "" : "thread_local(initialexec) ")
    code.append_str("global ")
    code.append_str(ir_type(type))
    if !extern {
        code.append_str(" ")
        code.append_str(ir_default_value_for_type(type))
    }
    code.append_str(", align 8\n")
}

fn ir_default_value_for_type(type: Type) String {
    if type.is_pointer : return "null"
    if type.type == ty_array {
        let buf = utils:ByteBuffer.new(128)
        buf.append_str("[")
        let sub_type = type.sub_type
        if isset(sub_type) {
            let size = type.array_size
            let sub_type_ir = ir_type(sub_type)
            while size-- > 0 {
                buf.append_str(sub_type_ir)
                buf.append_str(" ")
                buf.append_str(ir_default_value_for_type(sub_type))
                if size > 0 : buf.append_str(", ")
            }
        }
        buf.append_str("]")
        return buf.to_string()
    }
    return "0"
}
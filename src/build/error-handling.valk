
value errh_break (1)
value errh_value (2)
value errh_ignore (3)

class ErrorHandler {
    type: int
    on: Value
    err_check: Value
    scope: Scope
    decl_err: ?Decl (null)
    decl_msg: ?Decl (null)
}

global errh_tokens : ?Array[String] (null)

fn value_error_handling(p: Parser, scope: Scope, on: Value, info: FuncInfo) Value {

    let b = p.build

    let tokens = errh_tokens ?? <{
        let list = Array[String]{ "!", "!?", "!>", "!!", "_", "->" }
        errh_tokens = list
        return list
    }

    p.expect_many(tokens, true, false)
    // Ignore error 
    if p.word_is("_") {
        let v = vgen_error_code_reset(on)
        v.rett = type_void(b)
        return v
    }
    // Success handler
    if p.word_is("->") {
        return value_success_handler(p, scope, on, info)
    }
    // Ignore error 
    if p.word_is("!>") {
        return value_pass_handler(p, scope, on)
    }
    // Panic on error 
    if p.word_is("!!") {
        return value_panic_handler(p, scope, on, "Error at: " + p.clone_chunk().path_and_line())
    }

    let expect_value = p.word_is("!?")

    // Handle error
    let sub = scope.sub_scope(sc_default)

    // Variables
    let g_err_msg = b.valk_global("core", "error_msg")
    let err_type = type_error(b, info.errors)

    let decl_err = Decl.new(err_type, false, "E")
    sub.add_decl(decl_err)
    let decl_msg = Decl.new(g_err_msg.get_type(), false, "EMSG")
    sub.add_decl(decl_msg)

    sub.set_idf(p, "E", Idf.for_decl(decl_err))
    sub.set_idf(p, "EMSG", Idf.for_decl(decl_msg))

    // Alternative value
    p.set_suggest(on.rett)
    let alt = read_inline_scope_value(p, sub)
    alt = vgen_unroll_inline_scope(alt)
    p.pop_suggest()

    if expect_value {
        alt = alt.try_convert(p, scope, on.rett)
        let matched_type = on.rett.match_nullable(alt.rett)
        matched_type.compat_check(alt.rett, p)
    }

    return vgen_error_handler(scope, on, alt, expect_value, decl_err, decl_msg)
}

fn vgen_error_handler(scope: Scope, on: Value, alt: Value, merge_values: bool, err_decl: ?Decl (null), msg_decl: ?Decl (null)) Value {

    // ?! (1,2)       => multi-value[this_or_that[err-check, reset+alt[x], on[x] ]] : alt.rett
    // ! (1,2)        => this_but[cond-value[err-check, reset+alt], on] : void
    // ! return (1,2) => multi-value[this_but[cond-value[err-check, reset+alt[x]], on[x] ]] : on.rett

    let b = on.rett.build

    // Err check
    let err_check = vgen_error_check(b)
    err_check.pre_value = on

    // Conditional alt value
    let altv_reset = vgen_error_reset(alt, err_decl, msg_decl)
    let condv = vgen_cond_value(err_check, altv_reset)

    if !merge_values {
        if alt.rett.is_none() {
            let left_values = on.unroll()
            let result = Array[Value].new()
            each left_values as left, i {
                result.push(vgen_this_but_that(condv, left))
            }
            return vgen_grouped_values(b, result)
        }
        let v = vgen_this_but_that(condv, on)
        v.rett = type_void(b)
        return v
    }

    if !on.rett.is_multi() {
        // let phi = vgen_phi(alt, on, alt.rett)
        // phi.pre_value = condv
        // return phi
    }

    // Multi values
    // We need to buffer the results because LLVM IR does not support multiple phi statements in a row
    let left_values = on.unroll()
    let right_values = alt.unroll()

    let decls = multi_this_that_buffers(b, scope, left_values, right_values)
    let left = vgen_grouped_values(b, left_values)
    let right = vgen_grouped_values(b, right_values)

    err_check.pre_value = left
    let right_reset = vgen_error_reset(right, err_decl, msg_decl)
    condv = vgen_cond_value(err_check, right_reset)

    let result = Array[Value].new()
    each decls as decl {
        let v = vgen_decl(decl)
        v.pre_value = condv
        result.push(v)
    }

    return vgen_grouped_values(b, result)
}

fn vgen_error_reset(before: Value, err_decl: ?Decl (null), msg_decl: ?Decl (null)) Value {

    let scope = Scope.new(sc_default, null)
    let b = before.rett.build

    let g_err_code = b.valk_global("core", "error_code")
    let g_err_msg = b.valk_global("core", "error_msg")

    if isset(err_decl) {
        scope.ast.push(Token {
            type: tk_declare
            decl: err_decl
            value1: vgen_global(g_err_code)
        })
    }
    if isset(msg_decl) {
        scope.ast.push(Token {
            type: tk_declare
            decl: msg_decl
            value1: vgen_global(g_err_msg)
        })
    }

    scope.ast.push(Token {
        type: tk_assign
        value1: vgen_global(g_err_code)
        value2: vgen_int(0, g_err_code.get_type())
    })

    let iscope = vgen_inline_scope(scope, type_void(b))

    if before.is_multi() {
        let values = before.unroll()
        let results = Array[Value].new()
        each values as val {
            results.push(vgen_this_but_that(iscope, val))
        }
        return vgen_grouped_values(b, results)
    }

    return vgen_this_but_that(iscope, before)
}

fn value_success_handler(p: Parser, scope: Scope, on: Value, info: FuncInfo) Value {

    let on_values = on.unroll()
    if on_values.length == 0 : p.error("You cannot use the '->' success handler on a function call that does not return a value")
    let multi = on_values.length > 1

    let expect_close_bracket = multi
    if multi : p.expect("(", true, true)
    else : expect_close_bracket = p.next_word_is("(", true, true, true)

    let b = p.build
    let decls = Array[Decl].new()
    let sub = scope.sub_scope(sc_default)
    let if_scope = scope.sub_scope(sc_if)

    each on_values as onv, i {
        if i > 0 : p.expect(",", true, true)
        p.expect_name(true, true)
        let name = p.word()

        let decl = Decl.new(onv.rett, false)
        decls.push(decl)
        scope.add_decl(decl)

        if_scope.set_idf(p, name, Idf.for_decl(decl))
        if_scope.ast.push(Token {
            type: tk_declare
            decl: decl
            value1: onv
        })
    }

    if expect_close_bracket : p.expect(")", true, true)

    let else_scope = scope.sub_scope(sc_if)
    sub.ast.push(Token {
        type: tk_if
        value1: vgen_not(vgen_error_check(b))
        scope1: if_scope
        scope2: else_scope
    })

    let g_err_code = b.valk_global("core", "error_code")
    sub.ast.push(Token {
        type: tk_assign
        value1: vgen_global(g_err_code)
        value2: vgen_int(0, g_err_code.get_type())
    })

    p.expect2(":", "{", true, true)
    let single_line = p.word_is(":")

    read_ast(p, if_scope, single_line)

    let res = vgen_inline_scope(sub, type_void(b))
    res.pre_value = on
    return res
}

fn value_panic_handler(p: Parser, scope: Scope, on: Value, msg: String) Value {

    let b = p.build

    let sub = scope.sub_scope(sc_default)
    let alt = vgen_inline_scope(sub, type_void(b))

    let func = b.valk_func("core", "panic")
    let values = Array[Value]{ vgen_string(b, msg) }
    let fptr = vgen_func_ptr(func)
    let call = vgen_func_call(b, scope, fptr, values)

    sub.ast.push(Token {
        type: tk_statement
        value1: call
    })

    // Err check
    let err_check = vgen_error_check(b)
    err_check.pre_value = on

    let altv_reset = vgen_error_reset(alt, null, null)
    let condv = vgen_cond_value(err_check, altv_reset)

    return vgen_this_but_that(condv, on)
}

fn value_pass_handler(p: Parser, scope: Scope, on: Value) Value {

    let b = p.build

    let sub = scope.sub_scope(sc_default)
    let alt = vgen_inline_scope(sub, type_void(b))

    let func = scope.func
    if !isset(func) : p.error("Generating a pass handler outside a function scope")

    let gi = b.valk_global("core", "error_trace_index")
    sub.ast.push(Token {
        type: tk_assign
        value1: vgen_global(gi)
        value2: vgen_op(vgen_global(gi), vgen_int(1, gi.get_type()), op_add, gi.get_type())
    })

    let gtrace = b.valk_global("core", "error_trace")
    sub.ast.push(Token {
        type: tk_assign
        value1: vgen_ptrv(vgen_global(gtrace), b.valk_type("type", "String"), vgen_global(gi))
        value2: vgen_string(b, p.clone_chunk().path_and_line())
    })

    sub.ast.push(Token {
        type: tk_return
        value1: func.empty_return_value()
    })

    sub.did_return = true

    // Err check
    let err_check = vgen_error_check(b)
    err_check.pre_value = on

    let condv = vgen_cond_value(err_check, alt)

    return vgen_this_but_that(condv, on)
}
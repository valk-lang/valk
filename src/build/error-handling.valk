
value errh_break (1)
value errh_value (2)
value errh_ignore (3)

struct ErrorHandler {
    type: int
    on: Value
    scope: Scope
    alt: ?Value (null)
    decl_err: ?Decl (null)
    decl_msg: ?Decl (null)
}

fn value_error_handling(p: Parser, scope: Scope, on: Value, info: FuncInfo) Value {
    let returns_void = on.rett.is_void()
    let t = p.tok(true, true)
    let b = p.build

    let decl_err: ?Decl = null
    let decl_msg: ?Decl = null

    let sign = p.word()
    let sub = scope.sub_scope(sc_default)

    if sign == "!" || sign == "?" {
        t = p.tok(true, true, false)
        if p.word_is("(") {
            p.expect("(", true, true)
            let name_err = p.read_word(true, true)
            let decl_err_ = Decl.new(b.valk_type("type", "u32"), false)
            decl_err_.is_mut = true
            sub.set_idf(p, name_err, Idf.for_decl(decl_err_))
            p.add_decl(decl_err_)
            decl_err = decl_err_

            p.expect2(",", ")", true, true)
            if p.word_is(",") {
                let name_msg = p.read_word(true, true)
                let decl_msg_ = Decl.new(b.valk_type("type", "String"), false)
                decl_msg_.is_mut = true
                sub.set_idf(p, name_msg, Idf.for_decl(decl_msg_))
                p.add_decl(decl_msg_)
                decl_msg = decl_msg_

                p.expect(")", true, true)
            }
            t = p.tok(true, true, false)
        }
    }

    if sign == "!" {
        let single = !p.sign_is("{")
        if !single : p.expect("{", true, true)
        read_ast(p, sub, single)
        if !sub.did_return : p.error("Expected the code after '!' to end with: return, exit, continue, break or throw")

        return Value { 
            type: v_errh
            errh: ErrorHandler {
                type: errh_break
                on: on
                scope: sub
                decl_err: decl_err
                decl_msg: decl_msg
            }
            multi_values: on.multi_values
            rett: on.rett
        }

    } else if sign == "?" {

        p.set_suggest(on.rett)
        let alt = read_value(p, sub)
        p.pop_suggest()

        let rett = on.rett
        if alt.rett.nullable : rett = rett.get_nullable()
        alt = alt.try_convert(p.get_ds(), rett)
        rett.compat_check(alt.rett, p)

        return Value { 
            type: v_errh
            errh: ErrorHandler {
                type: errh_value
                on: on
                alt: alt
                scope: sub
                decl_err: decl_err
                decl_msg: decl_msg
            }
            rett: rett
        }

    } else if sign == "_" {
        if !returns_void : p.error("You can only ignore errors using '_' when the function has a 'void' return type. Return type is '" + on.rett + "'")
        return on
    }
    p.error("Missing error handler. Expected: '!', '?' or '_'. But found: '" + p.word() + "'")
}

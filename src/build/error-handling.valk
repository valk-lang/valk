
value errh_break (1)
value errh_value (2)
value errh_ignore (3)

struct ErrorHandler {
    type: int
    on: Value
    err_check: Value
    scope: Scope
    decl_err: ?Decl (null)
    decl_msg: ?Decl (null)
}

fn value_error_handling(p: Parser, scope: Scope, on: Value, info: FuncInfo) Value {

    let b = p.build

    p.expect3("!", "!?", "_", true, true)
    // Ignore error 
    if p.word_is("_") {
        let v = vgen_error_code_reset(on)
        v.rett = type_void(b)
        return v
    }
    let expect_value = p.word_is("!?")

    // Handle error
    let sub = scope.sub_scope(sc_default)

    // Variables
    let g_err_code = b.valk_global("core", "error_code")
    let g_err_msg = b.valk_global("core", "error_msg")

    let decl_err = p.create_decl("E", g_err_code.get_type())
    let decl_msg = p.create_decl("EMSG", g_err_msg.get_type())
    decl_err.is_used = false
    decl_msg.is_used = false
    sub.set_idf(p, "E", Idf.for_decl(decl_err))
    sub.set_idf(p, "EMSG", Idf.for_decl(decl_msg))

    // Alternative value
    p.set_suggest(on.rett)
    let alt = read_inline_scope_value(p, sub)
    alt = vgen_unroll_inline_scope(alt)
    p.pop_suggest()

    if expect_value {
        alt = alt.try_convert(p.get_ds(), on.rett)
        let matched_type = on.rett.match_nullable(alt.rett)
        matched_type.compat_check(alt.rett, p)
    }

    return vgen_error_handler(scope, on, alt, expect_value, decl_err, decl_msg)
}

fn vgen_error_handler(scope: Scope, on: Value, alt: Value, merge_values: bool, err_decl: ?Decl (null), msg_decl: ?Decl (null)) Value {

    // ?! (1,2)       => multi-value[this_or_that[err-check, reset+alt[x], on[x] ]] : alt.rett
    // ! (1,2)        => this_but[cond-value[err-check, reset+alt], on] : void
    // ! return (1,2) => multi-value[this_but[cond-value[err-check, reset+alt[x]], on[x] ]] : on.rett

    let b = on.rett.build

    // Err check
    let err_check = vgen_error_check(b)
    err_check.pre_value = on

    // Conditional alt value
    let altv_reset = vgen_error_reset(alt, err_decl, msg_decl)
    let condv = vgen_cond_value(err_check, altv_reset)

    if !merge_values {
        if alt.rett.is_none() {
            let left_values = on.unroll()
            let result = Array[Value].new()
            each left_values as i, left {
                result.push(vgen_this_but_that(condv, left))
            }
            return vgen_grouped_values(b, result)
        }
        let v = vgen_this_but_that(condv, on)
        v.rett = type_void(b)
        return v
    }

    if !on.rett.is_multi() {
        let phi = vgen_phi(alt, on, alt.rett)
        phi.pre_value = condv
        return phi
    }

    // Multi values
    // We need to buffer the results because LLVM IR does not support multiple phi statements in a row
    let left_values = on.unroll()
    let right_values = alt.unroll()

    let decls = multi_this_that_buffers(b, scope, left_values, right_values)
    let left = vgen_grouped_values(b, left_values)
    let right = vgen_grouped_values(b, right_values)

    err_check.pre_value = left
    let right_reset = vgen_error_reset(right, err_decl, msg_decl)
    condv = vgen_cond_value(err_check, right_reset)

    let result = Array[Value].new()
    each decls as decl {
        let v = vgen_decl(decl)
        v.pre_value = condv
        result.push(v)
    }

    return vgen_grouped_values(b, result)
}

fn vgen_error_reset(before: Value, err_decl: ?Decl (null), msg_decl: ?Decl (null)) Value {

    let scope = Scope.new(sc_default, null)
    let b = before.rett.build

    let g_err_code = b.valk_global("core", "error_code")
    let g_err_msg = b.valk_global("core", "error_msg")

    if isset(err_decl) {
        scope.ast.push(Token {
            type: tk_declare
            decl: err_decl
            value1: vgen_global(g_err_code)
        })
    }
    if isset(msg_decl) {
        scope.ast.push(Token {
            type: tk_declare
            decl: msg_decl
            value1: vgen_global(g_err_msg)
        })
    }

    scope.ast.push(Token {
        type: tk_assign
        value1: vgen_global(g_err_code)
        value2: vgen_int(0, g_err_code.get_type())
    })

    let iscope = vgen_inline_scope(scope, type_void(b))

    if before.is_multi() {
        let values = before.unroll()
        let results = Array[Value].new()
        each values as val {
            results.push(vgen_this_but_that(iscope, val))
        }
        return vgen_grouped_values(b, results)
    }

    return vgen_this_but_that(iscope, before)
}
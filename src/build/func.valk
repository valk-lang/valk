
class Arg {
    name: String
    type: Type
    chunk_value: ?Chunk (null)
    decl: Decl
}

type ERR_TYPE (u32)

class FuncInfo {
    args: Array[Type] (Array[Type].new())
    rett_types: Array[Type] (Array[Type].new())
    errors: Map[ERR_TYPE] (Map[ERR_TYPE].new())
    infinite_args: bool (false)
    can_error: bool (false)

    fn first_rett() Type !missing {
        return this.rett_types.get(0) ! throw missing
    }

    fn rett_eax() Type !void {
        let rett = this.rett_types.get(0) ! throw void
        if !rett.fits_eax() : throw void
        return rett
    }

    fn clone() FuncInfo {
        return FuncInfo {
            args: this.args
            rett_types: this.rett_types
            errors: this.errors
            infinite_args: this.infinite_args
            can_error: this.errors.length() > 0
        }
    }

    fn to_closure_type(b: Build) Type {
        let clo_fi = this.clone()
        let new_args = Array[Type].new()
        each clo_fi.args as type, i {
            if i == 0 : continue
            new_args.push(type)
        }
        clo_fi.args = new_args
        return type_closure(b, clo_fi)
    }
}

class FuncAST {
    build: Build
    func: Func
    //
    scope: Scope
    scope_alloca: Scope
    scope_defer: Scope
    // Closures
    bind_data: Array[Decl] (array[Decl]{})
    // Buffers
    buffers_used: Array[Decl] (array[Decl]{})
    buffers_free: Array[Decl] (array[Decl]{})
    // Stack
    decl_nr: uint (0)
    gc_decl_count: uint (0)
    alloca_size: uint (0)
    cache_stack_adr: ?Value (null)
    // Tests
    test_entry_decl: ?Decl (null)
}

class Func {
    unit: Unit
    build: Build
    fc: ?Fc
    name: String
    test_name: String ("-nameless-test-")
    export_name: String
    display_name: String
    act: int
    class: ?Class (null)
    group: ?Group (null)

    // Chunks
    chunk_args: ?Chunk (null)
    chunk_rett: ?Chunk (null)
    chunk_body: ?Chunk (null)

    // Arg / Return types
    args: Array[Arg] (array[Arg]{})
    rett: Type
    rett_types: Array[Type] (array[Type]{})
    rett_decls: Array[Decl] (array[Decl]{})
    errors: Map[u32] (map[u32]{})
    arg_scope: Scope

    // Generics
    generic_names: ?Map[GenericName] (null)
    generic_types: ?Map[Type] (null)
    generics: ?Map[Func] (null)

    // AST
    fast_: ?FuncAST (null)
    ir_code: String ("")
    coro_count: uint (0)

    // Re-parse tracking
    tracked_classes: uint (0)
    tracked_globals: uint (0)
    tracks_classes: bool (false)
    tracks_globals: bool (false)

    // Info
    functions_used: Array[Func] (array[Func]{})
    info_creates_objects: bool (false)
    info_calls_unknown_code: bool (false)
    info_used: bool (false)
    info_checked: bool (false)

    // Bools
    is_exit: bool (false)
    is_static: bool (false)
    from_header: bool (false)
    infinite_args: bool (false)
    inline: bool (false)
    is_entrance: bool (false)
    is_generic_base: bool (false)
    parsed_args: bool (false)
    parsed_ast: bool (false)
    can_error: bool (false)
    is_hot: bool (false)
    is_test: bool (false)
    skip_ast: bool (false)
    imut_mode: bool (false)
    is_getter: bool (false)
    no_buffers: bool (false)

    fn fast() FuncAST {
        return this.fast_ ?! this.build.error("Missing function AST object (bug)")
    }

    fn info() FuncInfo {
        return FuncInfo {
            args: this.arg_types()
            rett_types: this.rett_types
            errors: this.errors
            infinite_args: this.infinite_args
            can_error: this.can_error
        }
    }
    fn arg_types() Array[Type] {
        let types = array[Type]{}
        each this.args as arg {
            types.push(arg.type)
        }
        return types
    }

    fn add_arg(name: String, type: Type) Arg {
        let decl = Decl.new(type, true)
        decl.name = name
        let arg = Arg {
            name: name
            type: type
            decl: decl
        }
        this.args.push(arg)
        return arg
    }

    fn add_rett(type: Type) {
        if type.is_void() : return
        this.rett_types.push(type)
        // Rett decl
        if this.rett_types.length == 1 && type.fits_eax() : return
        let dtype = type.get_pointer()
        let decl = Decl.new(dtype, true)
        decl.ir_name = "%retv." + this.rett_decls.length
        decl.is_retv = true
        this.rett_decls.push(decl)
    }

    fn wipe_ast() {
        this.fast_ = null

        // Clear data needed for parsing
        if this.parsed_ast && !this.tracks_classes && !this.tracks_globals {
            this.arg_scope = Scope.new(sc_default)
            this.chunk_args = null
            this.chunk_rett = null
            this.chunk_body = null
        }
    }
    fn wipe_ir() {
        this.ir_code = ""
    }

    fn parse_args(p: Parser) {

        if !this.is_getter : p.skip_body(")")

        let t = p.tok(true, true, false)
        if !p.sign_is("{") && !p.sign_is("!") && !p.sign_is(";") && t != tok_flag {
            this.chunk_rett = p.clone_chunk()
            p.skip_type()
        }

        t = p.tok(true, true, false)
        while p.sign_is("!") {
            t = p.tok(true, true)
            t = p.tok(false, false)
            if t != tok_word : p.error("Invalid error name: " + p.word())
            t = p.tok(true, true, false)
        }

        while t == tok_flag {
            t = p.tok(true, true)
            t = p.tok(true, true, false)
        }

        if !this.from_header {
            p.expect("{", true, true)
            this.chunk_body = p.clone_chunk()
            p.skip_body("}")
        }
    }

    fn rett_eax() Type {
        let rett = this.rett_types.get(0) ! return type_void(this.build)
        return rett.fits_eax() ? rett : type_void(this.build)
    }

    fn empty_return_value() ?Value {
        let rett = this.rett_eax()
        let retv : ?Value = null
        if !rett.is_void() {
            if rett.is_pointer : retv = vgen_null(rett)
            else if rett.is_float() : retv = vgen_float(0, rett)
            else : retv = vgen_int(0, rett)
        }
        return retv
    }

    static fn extract_rett_eax(types: Array[Type]) Type !void {
        let rett = types.get(0) ! throw void
        if rett.fits_eax() : return rett
        throw void
    }

    fn get_buffer(type: Type, scope: Scope) Decl {
        let ts = type.size()
        let is_gc = type.is_gc()
        let is_mut = !is_gc
        let fast = this.fast()
        each fast.buffers_free as decl, i {
            if decl.is_gc == is_gc && decl.is_mut == is_mut && decl.type.size() == ts {
                fast.buffers_free.remove_index(i)
                fast.buffers_used.push(decl)
                scope.add_decl(decl)
                return decl
            }
        }
        let decl = Decl.new(type, false)
        decl.is_used = true
        decl.is_mut = is_mut
        decl.is_buffer = true
        fast.buffers_used.push(decl)
        scope.add_decl(decl)
        return decl
    }
    fn free_buffers(index: uint) {
        let fast = this.fast()
        let list = fast.buffers_used
        let free_count = list.length - index
        while free_count-- > 0 {
            let decl = list.pop_last() ! break
            fast.buffers_free.push(decl)
        }
    }

    fn init_ast_scope() {
        let b = this.build
        let fc = this.fc

        // Create scopes
        let scope = Scope.new(sc_func)
        scope.parent = this.arg_scope
        scope.func = this
        //
        let scope_alloca = scope.sub_scope(sc_default)
        let scope_defer = scope.sub_scope(sc_default)

        let fast = FuncAST {
            build: b
            func: this
            scope: scope
            scope_alloca: scope_alloca
            scope_defer: scope_defer
        }

        this.fast_ = fast

        // Return decls
        each this.rett_decls as decl, i {
            scope.decls.push(decl)
        }
        if this.rett_decls.length > 0 {
            scope.must_return = true
        }

        // Argument variable identifiers
        each this.args as arg {
            fast.scope.set_idf_build(b, arg.name, Idf.for_decl(arg.decl))
            fast.scope.add_decl(arg.decl)
        }

        // Generic type identifiers
        // let gtypes = this.generic_types
        // if isset(gtypes) {
        //     each gtypes as type, name {
        //         fast.scope.set_idf_build(b, name, Idf.for_type(type))
        //     }
        // }

        if this.is_test {
            test_init_scope(fast)
        }
    }

    fn finish_ast_scope() {
        func_calculate_alloca_size(this)
        func_generate_alloca_scope(this)
    }

    fn used_in(scope: Scope) {
        let scope_func = scope.get_func() ! this.build.error("Function call outside a function (bug)")
        scope_func.functions_used.push(this)
    }

    fn mark_used() {
        if this.info_used : return
        this.info_used = true
        // println("Used: " + this.display_name)
        each this.functions_used as subfunc {
            subfunc.mark_used()
        }
    }
}


fn read_inline_func(p: Parser, decl_scope: Scope, imut_mode: bool) Value {
    let func = p.func()

    let chunk_args = p.clone_chunk()

    let u = func.unit
    let ifunc = u.new_func(func.fc, func.act, null, null, chunk_args)
    ifunc.arg_scope.parent = decl_scope
    ifunc.imut_mode = imut_mode

    ifunc.parse_args(p)
    parse_func_args(ifunc)

    if p.loop_first_parse {
        ifunc.from_header = true
        let body = ifunc.chunk_body
        if !isset(body) : p.error("Missing inline function body (bug)")
        p.set_chunk(body)
        p.skip_body("}")
        return vgen_null_fake(type_func(func))
    }

    parse_func_ast(ifunc)
    func_ir(ifunc)

    let ifast = ifunc.fast()
    let bind_data = ifast.bind_data

    ifunc.wipe_ast()
    ifunc.used_in(decl_scope)

    let fptr = vgen_func_ptr(ifunc)

    // Check if we can return a function pointer
    if bind_data.length == 0 {
        return fptr
    }

    // Return a closure otherwise
    let bind_values = Array[Value].new()
    each bind_data as decl {
        bind_values.push(vgen_decl(decl))
    }

    return closure_init_value(fptr, bind_values, decl_scope)
}


fn read_func_call_arg_values(
    p: Parser,
    scope: Scope,
    on: Value,
    end_sign: String,
    arg_values: Array[Value]
) {
    let on_rett = on.rett
    let func_info = on_rett.func_info
    if !isset(func_info) : p.error("Function call on a non-function value")

    let arg_types = func_info.args
    let inf_arg_type : ?Type = null
    if func_info.infinite_args : inf_arg_type = arg_types.get(arg_types.length - 1) !? null

    let i = arg_values.length
    let t = p.tok(true, true, false)
    if p.sign_is(end_sign) : p.tok(true, true)
    while !p.sign_is(end_sign) {

        let arg_type = arg_types.get(i++) !? <{
            if isset(inf_arg_type) : return inf_arg_type
            p.error("Too many arguments. Function type: " + on_rett)
        }

        p.set_suggest(arg_type)
        let value = read_value(p, scope)
        p.pop_suggest()

        value = value.try_convert(p, scope, arg_type)
        arg_type.compat_check(value.rett, p)
        arg_values.push(value)
        p.expect2(",", end_sign, true, true)
    }
}

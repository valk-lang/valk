
struct Func {
    unit: Unit
    build: Build
    fc: Fc
    export_name: String
    display_name: String
    act: int
    scope: Scope
    scope_alloca: Scope
    scope_defer: Scope
    //
    chunk_args: Chunk
    chunk_rett: ?Chunk (null)
    chunk_body: ?Chunk (null)
    //
    args: Array[Arg] (array[Arg]{})
    rett_types: Array[Type] (array[Type]{})
    rett_decls: Array[Decl] (array[Decl]{})
    errors: Map[u32] (map[u32]{})
    //
    generic_names: ?Array[String] (null)
    generics: ?Map[Func] (null)
    generic_types: ?Map[Type] (null)
    //
    ir_code: String ("")
    // Stack
    gc_decl_count: uint (0)
    coro_count: uint (0)
    alloca_size: uint (0)
    cache_stack_adr: ?Value (null)

    // Re-parse tracking
    tracked_classes: uint (0)
    tracked_globals: uint (0)
    tracks_classes: bool (false)
    tracks_globals: bool (false)

    // Bools
    is_exit: bool (false)
    is_static: bool (false)
    from_header: bool (false)
    infinite_args: bool (false)
    inline: bool (false)
    is_entrance: bool (false)
    is_generic_base: bool (false)
    parsed_args: bool (false)
    parsed_ast: bool (false)
    can_error: bool (false)

    fn info() FuncInfo {
        return FuncInfo {
            args: this.arg_types()
            rett_types: this.rett_types
            errors: this.errors
            infinite_args: this.infinite_args
            can_error: this.can_error
        }
    }
    fn arg_types() Array[Type] {
        let types = array[Type]{}
        each this.args as arg {
            types.push(arg.type)
        }
        return types
    }

    fn add_rett(type: Type) {
        if type.is_void() : return
        this.rett_types.push(type)
        if this.rett_types.length == 1 && type.fits_eax() {
            return;
        }
        let dtype = type_array(type.build, type, 1)
        let decl = Decl.new(dtype, true)
        decl.ir_name = "%retv." + this.rett_decls.length
        decl.is_retv = true
        this.rett_decls.push(decl)
    }

    fn wipe_ast() {
        this.scope.reset()
        this.scope_alloca.reset()
        this.scope_defer.reset()
        this.coro_count = 0
        this.cache_stack_adr = null
    }
    fn wipe_ir() {
        this.ir_code = ""
    }

    fn parse_args(p: Parser) {

        p.skip_body(")")

        let t = p.tok(true, true, false)
        if !p.sign_is("{") && !p.sign_is("!") && !p.sign_is(";") {
            this.chunk_rett = p.clone_chunk()
            p.skip_type()
        }

        t = p.tok(true, true, false)
        while p.sign_is("!") {
            t = p.tok(true, true)
            t = p.tok(false, false)
            if t != tok_word : p.error("Invalid error name: " + p.word())
            t = p.tok(true, true, false)
        }

        while t == tok_flag {
            t = p.tok(true, true)
            t = p.tok(true, true, false)
        }

        if !this.fc.is_header {
            p.expect("{", true, true)
            this.chunk_body = p.clone_chunk()
            p.skip_body("}")
        }
    }

    fn rett_eax() Type {
        let rett = this.rett_types.get(0) ! return type_void(this.build)
        return rett.fits_eax() ? rett : type_void(this.build)
    }

    fn empty_return_value() ?Value {
        let rett = this.rett_eax()
        let retv : ?Value = null
        if !rett.is_void() {
            if rett.is_pointer : retv = vgen_null(rett)
            else : retv = vgen_int(0, rett)
        }
        return retv
    }

    static fn extract_rett_eax(types: Array[Type]) Type !void {
        let rett = types.get(0) ! throw void
        if rett.fits_eax() : return rett
        throw void
    }
}

struct Arg {
    name: String
    type: Type
    chunk_value: ?Chunk (null)
    decl: Decl
}

struct FuncInfo {
    args: Array[Type]
    rett_types: Array[Type]
    errors: Map[u32]
    infinite_args: bool (false)
    can_error: bool (false)

    fn first_rett() Type !missing {
        return this.rett_types.get(0) ! throw missing
    }

    fn rett_eax() Type !void {
        let rett = this.rett_types.get(0) ! throw void
        if !rett.fits_eax() : throw void
        return rett
    }
}



struct Arg {
    name: String
    type: Type
    chunk_value: ?Chunk (null)
    decl: Decl
}

struct FuncInfo {
    args: Array[Type]
    rett_types: Array[Type]
    errors: Map[u32]
    infinite_args: bool (false)
    can_error: bool (false)

    fn first_rett() Type !missing {
        return this.rett_types.get(0) ! throw missing
    }

    fn rett_eax() Type !void {
        let rett = this.rett_types.get(0) ! throw void
        if !rett.fits_eax() : throw void
        return rett
    }

    fn clone() FuncInfo {
        return FuncInfo {
            args: this.args
            rett_types: this.rett_types
            errors: this.errors
            infinite_args: this.infinite_args
            can_error: this.errors.length() > 0
        }
    }
}

struct Func {
    unit: Unit
    build: Build
    fc: ?Fc
    name: String
    export_name: String
    display_name: String
    act: int
    class: ?Class (null)
    test: ?Test (null)
    // Scopes
    scope: Scope
    scope_alloca: Scope
    scope_defer: Scope
    //
    chunk_args: ?Chunk (null)
    chunk_rett: ?Chunk (null)
    chunk_body: ?Chunk (null)
    //
    args: Array[Arg] (array[Arg]{})
    rett_types: Array[Type] (array[Type]{})
    rett_decls: Array[Decl] (array[Decl]{})
    errors: Map[u32] (map[u32]{})
    // Generics
    generic_names: ?Map[GenericName] (null)
    generic_types: ?Map[Type] (null)
    generics: ?Map[Func] (null)
    // Closures
    bind_data: Array[Decl] (array[Decl]{})
    bind_args: Array[Decl] (array[Decl]{})
    //
    ir_code: String ("")
    // Stack
    gc_decl_count: uint (0)
    coro_count: uint (0)
    alloca_size: uint (0)
    cache_stack_adr: ?Value (null)

    // Re-parse tracking
    tracked_classes: uint (0)
    tracked_globals: uint (0)
    tracks_classes: bool (false)
    tracks_globals: bool (false)

    // Bools
    is_exit: bool (false)
    is_static: bool (false)
    from_header: bool (false)
    infinite_args: bool (false)
    inline: bool (false)
    is_entrance: bool (false)
    is_generic_base: bool (false)
    parsed_args: bool (false)
    parsed_ast: bool (false)
    can_error: bool (false)
    is_hot: bool (false)
    is_test: bool (false)
    skip_ast: bool (false)
    imut_mode: bool (false)

    fn info() FuncInfo {
        return FuncInfo {
            args: this.arg_types()
            rett_types: this.rett_types
            errors: this.errors
            infinite_args: this.infinite_args
            can_error: this.can_error
        }
    }
    fn arg_types() Array[Type] {
        let types = array[Type]{}
        each this.args as arg {
            types.push(arg.type)
        }
        return types
    }

    fn add_arg(name: String, type: Type) Arg {
        let decl = Decl.new(type, true)
        decl.name = name
        let arg = Arg {
            name: name
            type: type
            decl: decl
        }
        this.args.push(arg)
        return arg
    }

    fn add_rett(type: Type) {
        if type.is_void() : return
        this.rett_types.push(type)
        if this.rett_types.length == 1 && type.fits_eax() {
            return;
        }
        let dtype = type_array(type.build, type, 1)
        let decl = Decl.new(dtype, true)
        decl.ir_name = "%retv." + this.rett_decls.length
        decl.is_retv = true
        this.rett_decls.push(decl)
    }

    fn wipe_ast() {
        this.scope.reset()
        this.scope_alloca.reset()
        this.scope_defer.reset()
        this.coro_count = 0
        this.cache_stack_adr = null
    }
    fn wipe_ir() {
        this.ir_code = ""
    }

    fn parse_args(p: Parser) {

        p.skip_body(")")

        let t = p.tok(true, true, false)
        if !p.sign_is("{") && !p.sign_is("!") && !p.sign_is(";") && t != tok_flag {
            this.chunk_rett = p.clone_chunk()
            p.skip_type()
        }

        t = p.tok(true, true, false)
        while p.sign_is("!") {
            t = p.tok(true, true)
            t = p.tok(false, false)
            if t != tok_word : p.error("Invalid error name: " + p.word())
            t = p.tok(true, true, false)
        }

        while t == tok_flag {
            t = p.tok(true, true)
            t = p.tok(true, true, false)
        }

        if !this.from_header {
            p.expect("{", true, true)
            this.chunk_body = p.clone_chunk()
            p.skip_body("}")
        }
    }

    fn rett_eax() Type {
        let rett = this.rett_types.get(0) ! return type_void(this.build)
        return rett.fits_eax() ? rett : type_void(this.build)
    }

    fn empty_return_value() ?Value {
        let rett = this.rett_eax()
        let retv : ?Value = null
        if !rett.is_void() {
            if rett.is_pointer : retv = vgen_null(rett)
            else : retv = vgen_int(0, rett)
        }
        return retv
    }

    static fn extract_rett_eax(types: Array[Type]) Type !void {
        let rett = types.get(0) ! throw void
        if rett.fits_eax() : return rett
        throw void
    }

    fn init_ast_scope() {
        let b = this.build

        each this.rett_decls as decl {
            this.scope.decls.push(decl)
        }
        each this.args as arg {
            this.scope.set_idf_build(b, arg.name, Idf.for_decl(arg.decl))
            this.scope.add_decl(arg.decl)
        }
        let gtypes = this.generic_types
        if isset(gtypes) {
            each gtypes as name, type {
                this.scope.set_idf_build(b, name, Idf.for_type(type))
            }
        }

        if this.is_test {
            test_init_scope(this)
        }
    }

    fn finish_ast_scope() {
        func_calculate_alloca_size(this)
        func_generate_alloca_scope(this)
    }
}


fn read_inline_func(p: Parser, decl_scope: Scope, imut_mode: bool) Value {
    let func = p.func
    if !isset(func) : panic("Missing parent function (bug)")

    let chunk_args = p.clone_chunk()

    let u = func.unit
    let ifunc = u.new_func(func.fc, func.act, null, null, chunk_args)
    ifunc.scope.parent = decl_scope
    ifunc.imut_mode = imut_mode

    ifunc.parse_args(p)
    parse_func_args(ifunc)
    parse_func_ast(ifunc)

    func_ir(ifunc)
    ifunc.wipe_ast()

    let fptr = vgen_func_ptr(ifunc)

    // Check if we can return a function pointer
    if ifunc.bind_data.length == 0 {
        return fptr
    }

    // Return a closure otherwise
    let bind_values = Array[Value].new()
    each ifunc.bind_data as decl {
        bind_values.push(vgen_decl(decl))
    }

    return closure_init_value(fptr, bind_values, decl_scope)
}

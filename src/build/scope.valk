
class Scope {
    type: int
    parent: ?Scope
    parent_idf: ?Scope (null)
    identifiers: Map[Idf] (Map[Idf]{}) $lazy
    func: ?Func (null)
    ast: Array[Token] (Array[Token]{}) $lazy
    ast_defer: Array[Token] (Array[Token]{}) $lazy

    decls: Array[Decl] (Array[Decl]{}) $lazy
    not_null: Array[Decl] (Array[Decl]{}) $lazy
    not_null_removed: Array[Decl] (Array[Decl]{}) $lazy
    null_at_start: Array[Decl] (Array[Decl]{}) $lazy
    null_at_end: Array[Decl] (Array[Decl]{}) $lazy

    loop_idecl: ?Decl (null)
    did_return: bool (false)
    must_return: bool (false)
    did_exit: bool (false)

    static fn new(type: int, parent: ?Scope (null)) Scope {
        let f: ?Func = null
        if isset(parent) {
            f = parent.func
        }
        return Scope{
            type: type
            parent: parent
            func: f
        }
    }

    fn reset() {
        this.identifiers.clear()
        this.ast.clear()
        this.ast_defer.clear()
        //
        this.decls.clear()
        this.not_null.clear()
        this.not_null_removed.clear()
        this.null_at_start.clear()
        this.null_at_end.clear()
        this.loop_idecl = null
        this.did_return = false
        this.did_exit = false
    }

    fn sub_scope(type: int) Scope {
        return Scope.new(type, this)
    }

    fn get_func() Func !not_found {
        let scope = this.find_type(sc_func) ! throw not_found
        let func = scope.func
        if !isset(func) : throw not_found
        return func
    }

    fn find(p: Parser, name: String) Idf !not_found {

        let scope: ?Scope = this
        // let name = id.ns
        while isset(scope) {
            let idf = scope.identifiers.get(name) !? null
            if isset(idf) : return idf
            let parent_idf = scope.parent_idf
            if isset(parent_idf) : scope = parent_idf
            else: scope = scope.parent
        }

        // Compile macro
        let cmb = p.cm_block
        while isset(cmb) {
            let idf = cmb.identifiers.get(name) !? null
            if isset(idf) : return idf
            cmb = cmb.parent
        }

        // Check builtins
        let b = p.build
        // io
        if name == "println" || name == "print" || name == "FD" {
            return b.valk_idf("io", name)
        }
        // type
        if name == "String" || name == "cstring" || name == "ptr" || name == "uint" || name == "int" || name == "u64" || name == "i64" || name == "u32" || name == "i32" || name == "u16" || name == "i16" || name == "u8" || name == "i8" || name == "bool" || name == "Array" || name == "Map" || name == "FlatMap" || name == "HashMap" || name == "float" || name == "f32" || name == "f64" {
            return b.valk_idf("type", name)
        }
        // core
        if name == "exit" || name == "panic" {
            return b.valk_idf("core", name)
        }


        //
        throw not_found
    }

    fn find_type(type: int) Scope !not_found {
        let scope: ?Scope = this
        while isset(scope) {
            if scope.type == type : return scope
            if type == sc_loop && scope.type == sc_func : break
            if type == sc_fc {
                let p = scope.parent_idf
                if isset(p) {
                    scope = p
                    continue
                }
            }
            scope = scope.parent
        }
        throw not_found
    }
    fn find_type2(type: int, type2: int) Scope !not_found {
        let scope: ?Scope = this
        while isset(scope) {
            if scope.type == type || scope.type == type2 : return scope
            scope = scope.parent
        }
        throw not_found
    }

    fn set_idf(p: Parser, name: String, idf: Idf) {
        if this.identifiers.has(name) : p.error("Name already used: " + name)
        this.identifiers.set(name, idf)
    }
    fn set_idf_build(b: Build, name: String, idf: Idf) {
        if this.identifiers.has(name) : b.error("Name already used: " + name)
        this.identifiers.set(name, idf)
    }

    fn add_decl(decl: Decl) {
        // Add to loop
        let loop = this.find_type(sc_loop) !? null
        if isset(loop) {
            loop.decls.push(decl, true)
        }

        // Add to func
        let func = this.get_func() ! panic("Adding a declaration to a scope without a function (bug)")
        let fast = func.fast()
        let decls = fast.scope.decls
        decls.push(decl, true)
        let prefix = "\%var."
        if decl.is_bind : prefix = "\%bind."
        else if decl.is_arg : prefix = "\%arg."
        else if decl.is_buffer : prefix = "\%buf."
        decl.ir_name = prefix + (decl.name ?? "_") + "." + fast.decl_nr++
    }

    fn not_null_check(decl: Decl) bool {
        let scope: ?Scope = this
        while isset(scope) {
            if scope.not_null.contains(decl) : return true
            if scope.not_null_removed.contains(decl) : return false
            scope = scope.parent
        }
        return false
    }
    fn not_null_add(decl: Decl) {
        this.not_null.push(decl, true)
        this.not_null_removed.remove_value(decl)
    }
    fn not_null_remove(decl: Decl) {
        this.not_null.remove_value(decl)
        this.not_null_removed.push(decl, true)
    }
    fn not_null_remove_check(sub: Scope) {
        if sub.did_return : return
        each sub.not_null_removed as decl {
            this.not_null_remove(decl)
        }
    }
}
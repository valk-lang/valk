
struct Scope {
    type: int
    parent: ?Scope
    identifiers: Map[Idf] (map[Idf]{})
    func: ?Func (null)
    ast: Array[Token] (array[Token]{})
    ast_defer: Array[Token] (array[Token]{})
    decls: Array[Decl] (array[Decl]{})
    not_null: Array[Decl] (array[Decl]{})
    not_null_removed: Array[Decl] (array[Decl]{})
    loop_idecl: ?Decl (null)
    did_return: bool (false)
    must_return: bool (false)
    did_exit: bool (false)

    static fn new(type: int, parent: ?Scope) Scope {
        let f: ?Func = null
        if isset(parent) {
            f = parent.func
        }
        return Scope{
            type: type
            parent: parent
            func: f
        }
    }

    fn reset() {
        this.identifiers.clear()
        this.ast.clear()
        this.decls.clear()
        this.not_null.clear()
        this.not_null_removed.clear()
        this.loop_idecl = null
        this.did_return = false
        this.did_exit = false
    }

    fn sub_scope(type: int) Scope {
        return Scope.new(type, this)
    }

    fn get_func() Func !not_found {
        let scope = this.find_type(sc_func) ! throw not_found
        let func = scope.func
        if !isset(func) : throw not_found
        return func
    }

    fn find_or_err(p: Parser, id: Id) Idf {
        return this.find(p, id) ! p.error("Unknown identifier: '" + id + "'")
    }
    fn find(p: Parser, id: Id) Idf !not_found {
        let pkg = id.pkg
        let first_scope = this
        if isset(pkg) {
            let scope_fc = this.find_type(sc_fc) ! throw not_found
            let idf = scope_fc.identifiers.get(pkg) ! throw not_found
            if idf.for != idf_scope : throw not_found
            let scope = idf.scope
            if !isset(scope) : throw not_found
            first_scope = scope
        }
        let scope: ?Scope = first_scope
        let name = id.ns
        while isset(scope) {
            let idf = scope.identifiers.get(name) ? null
            if isset(idf) : return idf
            scope = scope.parent
        }

        // Compile macro
        let cmb = p.cm_block
        while isset(cmb) {
            let idf = cmb.identifiers.get(name) ? null
            if isset(idf) : return idf
            cmb = cmb.parent
        }

        // Check builtins
        let b = id.build
        // io
        if name == "println" || name == "print" || name == "FD" {
            return b.valk_idf("io", name)
        }
        // type
        if name == "String" || name == "cstring" || name == "ptr" || name == "uint" || name == "int" || name == "float" || name == "u64" || name == "i64" || name == "u32" || name == "i32" || name == "u16" || name == "i16" || name == "u8" || name == "i8" || name == "bool" || name == "Array" || name == "Map" {
            return b.valk_idf("type", name)
        }
        // core
        if name == "exit" || name == "panic" {
            return b.valk_idf("core", name)
        }


        //
        throw not_found
    }

    fn find_type(type: int) Scope !not_found {
        let scope: ?Scope = this
        while isset(scope) {
            if scope.type == type : return scope
            scope = scope.parent
        }
        throw not_found
    }
    fn find_type2(type: int, type2: int) Scope !not_found {
        let scope: ?Scope = this
        while isset(scope) {
            if scope.type == type || scope.type == type2 : return scope
            scope = scope.parent
        }
        throw not_found
    }

    fn set_idf(p: Parser, name: String, idf: Idf) {
        if this.identifiers.has(name) : p.error("Name already used: " + name)
        this.identifiers.set(name, idf)
    }
    fn set_idf_b(b: Build, name: String, idf: Idf) {
        if this.identifiers.has(name) : b.error("Name already used: " + name)
        this.identifiers.set(name, idf)
    }

    fn add_decl(decl: Decl) {
        // Add to loop
        let loop = this.find_type(sc_loop) ? null
        if isset(loop) {
            loop.decls.push(decl)
        }

        // Add to func
        let func = this.func
        if isset(func) {
            let decls = func.scope.decls
            decls.push(decl)
            decl.ir_name = (decl.is_arg ? "%arg." : "%var.") + decls.length
        }
    }

    fn not_null_check(decl: Decl) bool {
        let scope: ?Scope = this
        while isset(scope) {
            if scope.not_null.contains(decl) : return true
            if scope.not_null_removed.contains(decl) : return false
            scope = scope.parent
        }
        return false
    }
    fn not_null_add(decl: Decl) {
        this.not_null.push(decl, true)
        this.not_null_removed.remove_value(decl)
    }
    fn not_null_remove(decl: Decl) {
        this.not_null.remove_value(decl)
        this.not_null_removed.push(decl, true)
    }
    fn not_null_remove_check(sub: Scope) {
        if sub.did_return : return
        each sub.not_null_removed as decl {
            this.not_null_remove(decl)
        }
    }
}
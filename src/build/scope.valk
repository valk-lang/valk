
struct Scope {
    parent: ?Scope
    identifiers: Map[Idf] (map[Idf]{})
    func: ?Func (null)
    ast: Array[Token] (array[Token]{})

    static fn new(parent: ?Scope) Scope {
        let f: ?Func = null
        if isset(parent) {
            f = parent.func
        }
        return Scope{
            parent: parent
            func: f
        }
    }

    fn sub_scope() Scope {
        return Scope.new(this)
    }

    fn find_or_err(p: Parser, id: Id) Idf {
        p.error("Unknown identifier: '" + id + "'")
    }
    fn find(id: Id) Idf !not_found {
        throw not_found
    }
}
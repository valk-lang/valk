

fn func_ref_value_to_closure(v: Value, decl_scope: Scope) Value {
    return closure_init_value(v, null, decl_scope)
}

fn closure_init_value(fptr: Value, bind_values: ?Array[Value], decl_scope: Scope) Value {

    let b = fptr.rett.build
    let fi = fptr.rett.func_info
    if !isset(fi) : b.error("Missing closure function info (bug)")

    let parent_func = decl_scope.func
    if !isset(parent_func) : b.error("Missing closure parent function (bug)")

    // Init data class instance
    let data : Value = vgen_null(b.valk_type("type", "ptr"))
    let data_class : ?Class = null
    if isset(bind_values) {
        if bind_values.length > 0 {
            data_class = closure_gen_data_class(b, parent_func.unit, bind_values)
            let values_data = Map[Value].new()
            each bind_values as bv, i {
                values_data.set("data_" + i, bv)
            }
            data = vgen_class_init(data_class.@cast(Class), decl_scope, values_data)
        }
    }

    // Generate closure type
    let closure_class = b.valk_class("core", "Closure")
    let outer_func = generate_closure_outer_function(parent_func, fi, data_class)
    outer_func.used_in(decl_scope)

    // Init closure class instance
    let values_closure = Map[Value].new()
    values_closure.set("inner_func", fptr)
    values_closure.set("outer_func", vgen_func_ptr(outer_func))
    values_closure.set("data", data)

    // Generate correct function info
    let clo_fi = outer_func.info()
    clo_fi = clo_fi.clone()
    let new_args = Array[Type].new()
    each clo_fi.args as type, i {
        if i == 0 : continue
        new_args.push(type)
    }
    clo_fi.args = new_args

    // 
    let v = vgen_class_init(closure_class, decl_scope, values_closure)
    v = vgen_cast(v, type_closure(b, clo_fi))
    return v
}

fn generate_closure_outer_function(parent: Func, fi: FuncInfo, data_class: ?Class) Func {
    let u = parent.unit
    let b = u.build
    let func = u.new_func(parent.fc, parent.fc, act_public, null, null, null)

    // Define function arguments
    let closure_class = b.valk_class("core", "Closure")
    let data_arg = func.add_arg("closure_obj", closure_class.get_type())
    let limit = fi.args.length - (isset(data_class) ? data_class.props.length : 0)
    each fi.args as arg_type, i {
        if i == limit : break
        func.add_arg("arg" + i, arg_type)
    }
    // Return types
    each fi.rett_types as rett, i {
        func.add_rett(rett)
    }
    // Errors
    func.can_error = fi.can_error
    func.errors = fi.errors

    ////////////////////////
    // AST
    ////////////////////////

    func.init_ast_scope()
    let fast = func.fast()
    let ast = fast.scope.ast

    // Read data
    let prop_inner = closure_class.props.get("inner_func") ! b.error("Missing closure 'inner_func' property (bug)")
    let inner_func = vgen_prop(prop_inner, vgen_decl(data_arg.decl))
    inner_func = vgen_cast(inner_func, type_func_info(b, fi))

    // Push arguments
    let inner_values = Array[Value]{}
    each func.args as arg, i {
        if i == 0 : continue
        inner_values.push(vgen_decl(arg.decl))
    }

    // Push bind values
    if isset(data_class) {
        let prop_data = closure_class.props.get("data") ! b.error("Missing closure 'data' property (bug)")
        let on = vgen_prop(prop_data, vgen_decl(data_arg.decl))
        each data_class.props as prop, name {
            inner_values.push(vgen_prop(prop, on))
        }
    }

    // Call inner function
    let inner_call = vgen_func_call(b, fast.scope, inner_func, inner_values)

    if fi.can_error {
        // AST throw error
        let sub = fast.scope.sub_scope(sc_default)

        let g = b.valk_global("core", "error_code")
        let gmsg = b.valk_global("core", "error_msg")

        ast_gen_throw(b, sub, vgen_global(g), vgen_global(gmsg), "closure_error_handler")

        let on = inner_call.extract_func_call_value() ! b.error("Using error handling on a non-function call value")

        let throwv = vgen_inline_scope(sub, type_none(b))
        inner_call = vgen_error_handler(fast.scope, on, throwv, false)
    }

    // Return value
    if fi.rett_types.length > 0 {
        let values = inner_call.unroll()
        ast_gen_return(func, fast.scope, values)
    } else {
        ast.push(Token {
            type: tk_statement
            value1: inner_call
        })
        ast_return_value(func, fast.scope, null)
    }

    func.finish_ast_scope()
    func.parsed_ast = true

    func_ir(func)
    func.wipe_ast()

    return func
}

fn closure_gen_data_class(b: Build, u: Unit, bind_values: Array[Value]) Class {

    let dclass = u.new_class(b.generated_fc(), act_public, null, ct_class, null, null)

    each bind_values as val, i {
        let name = "data_" + i
        let prop = Prop {
            name: name
            type: val.rett
            class: dclass
            act: act_public
        }
        dclass.props.set(name, prop)
    }

    dclass.determine_size() ! b.error("Cannot determine closure data class size (bug)")

    return dclass
}

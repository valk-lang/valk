
header "llvm" as llvm

use helper
use valk:fs
use valk:json

fn stage_object(u: Unit) {

    let b = u.build
    if b.verbose > 2 : b.log("> Stage 3.4: Generating object file: " + u.path_o)

    // Init LLVM
    llvm_init(u.build.target)

    // Get full ir
    let ir = u.ir()
    let code = ir.final_code()
    let hash = helper:ctxhash(code)

    // Check if hash changed
    let prev_hash = ""
    let js = u.json() ?? json:new_object()
    let h = js.get("hash") ? null
    if isset(h) {
        prev_hash = h.string() ? ""
    }

    // println(hash + " vs " + prev_hash)
    if hash != prev_hash || b.is_clean_build {
        // Hash changed, update object file
        fs:write(u.path_ir, code) ! b.error("Failed to write IR to file: " + u.path_ir)
        build_object(u.path_ir, u.path_o, u.build.target)
        // Update cache TODO
        js.set("hash", json:new_string(hash)) _
        let jstr = js.encode(true)
        fs:write(u.path_json, jstr) ! b.error("Failed to save json file to the cache directory")
    }
}

fn build_object(path_ir: String, path_o: String, target: Target) {

    let ctx = llvm:LLVMContextCreate()
    llvm:LLVMContextSetOpaquePointers(ctx, true)

    let error: ?cstring = null
    let buf: ?llvm:LLVMMemoryBufferRef = null
    llvm:LLVMCreateMemoryBufferWithContentsOfFile(path_ir.data_ptr(), @ptr_of(buf), @ptr_of(error))
    if isset(error) : llvm_error("LLVM create buffer error: " + error)
    if !isset(buf) : llvm_error("LLVM failed to load IR content")

    let mod : ?llvm:LLVMModuleRef = null
    if llvm:LLVMParseIRInContext(ctx, buf, @ptr_of(mod), @ptr_of(error)) {
        if isset(error) : llvm_error("LLVM parse error: " + error)
        llvm_error("LLVM parse error: <no-msg>")
    }
    if !isset(mod) : llvm_error("LLVM error: Module was not created")

    if llvm:LLVMVerifyModule(mod, llvm:LLVMReturnStatusAction, @ptr_of(error)) {
        if isset(error) {
            llvm_error("LLVM error in: " + path_ir + "\nLLVM verify error: " + error)
        }
        llvm_error("LLVM verify error: <no-msg>")
    }

    // let code = llvm:LLVMPrintModuleToString(mod);
    // println(code)

    // Optimize
    let passBuilder = llvm:LLVMPassManagerBuilderCreate();

    // Note: O3 can produce slower code than O2 sometimes
    llvm:LLVMPassManagerBuilderSetOptLevel(passBuilder, 3);
    llvm:LLVMPassManagerBuilderSetSizeLevel(passBuilder, 0);
    // LLVMPassManagerBuilderUseInlinerWithThreshold(passBuilder, 100);

    let func_passes = llvm:LLVMCreateFunctionPassManagerForModule(mod);
    let mod_passes = llvm:LLVMCreatePassManager();

    llvm:LLVMPassManagerBuilderPopulateFunctionPassManager(passBuilder, func_passes);
    llvm:LLVMPassManagerBuilderPopulateModulePassManager(passBuilder, mod_passes);

    llvm:LLVMPassManagerBuilderDispose(passBuilder);
    llvm:LLVMInitializeFunctionPassManager(func_passes);

    let func = llvm:LLVMGetFirstFunction(mod)
    while isset(func) {
        llvm:LLVMRunFunctionPassManager(func_passes, func)
        func = llvm:LLVMGetNextFunction(func)
    }

    llvm:LLVMFinalizeFunctionPassManager(func_passes);
    llvm:LLVMRunPassManager(mod_passes, mod);

    llvm:LLVMDisposePassManager(func_passes);
    llvm:LLVMDisposePassManager(mod_passes);
    //

    // Generate .o file
    let target_machine = llvm_set_target(mod, target)
    if llvm:LLVMTargetMachineEmitToFile(target_machine, mod, path_o.data_ptr(), llvm:LLVMObjectFile, @ptr_of(error)) {
        if isset(error) {
            let str = error.to_string()
            llvm:LLVMDisposeMessage(error)
            llvm_error("LLVM failed to create .o file: " + str)
        } else: llvm_error("LLVM failed to create .o file")
    }

    llvm:LLVMDisposeMessage(error);
    llvm:LLVMDisposeModule(mod);
    llvm:LLVMContextDispose(ctx);

// #ifndef WIN32
//     pthread_exit(NULL);
// #endif
//     return NULL;
}

fn llvm_init(t: Target) {
    if (t.arch == "x64") {
        // llvm:LLVMInitializeX86Disassembler()
        llvm:LLVMInitializeX86TargetInfo()
        llvm:LLVMInitializeX86Target()
        llvm:LLVMInitializeX86TargetMC()
        llvm:LLVMInitializeX86AsmPrinter()
        // llvm:LLVMInitializeX86AsmParser()
    } else if (t.arch == "arm64") {
        llvm:LLVMInitializeAArch64TargetInfo()
        llvm:LLVMInitializeAArch64Target()
        llvm:LLVMInitializeAArch64TargetMC()
        llvm:LLVMInitializeAArch64AsmPrinter()
    }
}

fn llvm_set_target(mod: llvm:LLVMModuleRef, t: Target) llvm:LLVMTargetMachineRef {

    let error : ?cstring = null;
    let triple : ?String = null;
    let cpu = "generic";
    //
    if (t.arch == "x64") {
        if (t.os == "linux") {
            triple = "x86_64-pc-linux-gnu";
        } else if (t.os == "macos") {
            triple = "x86_64-apple-darwin";
        } else if (t.os == "win") {
            triple = "x86_64-pc-windows-msvc";
        }
    } else if (t.arch == "arm64") {
        if (t.os == "linux") {
            triple = "aarch64-pc-linux-gnu";
        } else if (t.os == "macos") {
            triple = "arm64-apple-darwin";
        } else if (t.os == "win") {
            triple = "aarch64-pc-windows-msvc";
        }
    } else {
        llvm_error("Unknown architecture (bug)")
    }

    if !isset(triple) : llvm_error("‚ùå Could not figure out the LLVM triple");

    let target : ?llvm:LLVMTargetRef = null;
    if llvm:LLVMGetTargetFromTriple(triple.data_ptr(), @ptr_of(target), @ptr_of(error)) {
        if isset(error) {
            let err = error.to_string()
            llvm:LLVMDisposeMessage(error);
            llvm_error("LLVM - Unknow target: " + err)
        }
        llvm_error("LLVM - Unknow target")
    }

    if !isset(target) : llvm_error("LLVM failed to create target object (bug)")

    let machine = llvm:LLVMCreateTargetMachine(target, triple.data_ptr(), cpu.data_ptr(), null, llvm:LLVMCodeGenLevelDefault, llvm:LLVMRelocPIC, llvm:LLVMCodeModelDefault);

    if !isset(machine) : llvm_error("LLVM failed to create target machine object (bug)")

    let data_layout = llvm:LLVMCreateTargetDataLayout(machine)
    let data_layout_str = llvm:LLVMCopyStringRepOfTargetData(data_layout)

    llvm:LLVMSetTarget(mod, triple.data_ptr())
    llvm:LLVMSetDataLayout(mod, data_layout_str)

    return machine
}

exit_fn llvm_error(msg: String) {
    println(msg)
    exit(1)
}


fn ir_store(ir: IR, var: String, val: String, type: String) {
    let code = ir.code()
    code.append_str("  store ")
    code.append_str(type)
    code.append_str(" ")
    code.append_str(val)
    code.append_str(", ptr ")
    code.append_str(var)
    code.append_str(", align 8\n")
}
fn ir_load(ir: IR, from: String, type: String) String {
    let var = ir.var()
    let code = ir.code()
    code.append_str("  ")
    code.append_str(var)
    code.append_str(" = load ")
    code.append_str(type)
    code.append_str(", ptr ")
    code.append_str(from)
    code.append_str(", align 8\n")
    return var
}

fn ir_ret(ir: IR, val: String, type: String) {
    let code = ir.code()
    code.append_str("  ret ")
    code.append_str(type)
    code.append_str(" ")
    code.append_str(val)
    code.append_str("\n")
}
fn ir_ret_void(ir: IR) {
    let code = ir.code()
    code.append_str("  ret void\n")
}
fn ir_gep(ir: IR, on: String, offset: uint) String {
    let var = ir.var()
    let code = ir.code()
    code.append_str("  ")
    code.append_str(var)
    code.append_str(" = getelementptr i8, ptr ")
    code.append_str(on)
    code.append_str(", i32 ")
    code.append_str(offset)
    code.append_str("\n")
    return var
}

fn ir_func_ptr(ir: IR, func: Func) String {
    ir_check_func_definition(ir, func)
    return "@" + func.export_name
}

fn ir_call(ir: IR, on: String, info: FuncInfo, values: Array[Value]) String {
    let code = ir.code()
    let rett = ir_type(info.rett_eax() ? type_void(ir.build))
    let rett_void = rett == "void"

    let ir_values = array[String]{}
    each values as i, value {
        ir_values.push(ir_value(ir, value))
    }

    let var = ""
    code.append_str("  ")
    if !rett_void {
        var = ir.var()
        code.append_str(var)
        code.append_str(" = ")
    }
    code.append_str("call ")
    code.append_str(rett)
    code.append_str(" ")

    if info.infinite_args {
        let args = info.args
        code.append_str("(")
        each args as i, type {
            if i > 0 : code.append_str(", ")
            code.append_str(ir_type(type))
        }
        code.append_str(", ...) ")
    }
    code.append_str(on)
    code.append_str("(")
    each ir_values as i, value {
        if i > 0 : code.append_str(", ")
        let v = values.get(i) ! continue
        code.append_str(ir_type(v.rett))
        code.append_str(" ")
        code.append_str(value)
    }
    code.append_str(")\n")

    return var
}
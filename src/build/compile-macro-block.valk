
class CmBlock {
    type: int
    parent: ?CmBlock (null)
    identifiers: Map[Idf] (map[Idf]{})
    loop_index: uint (0)
    start: ?Chunk (null)
    classes: ?Array[Class] (null)
    globals: ?Array[Global] (null)
    props: ?Array[Value] (null)
    tests: ?Array[Test] (null)
    macro_values: ?Array[Map[Idf]] (null)
    idf1: ?Idf (null)
    idf2: ?Idf (null)
    if_result: u8 (0)

    static fn new(p: Parser, type: int) CmBlock {
        let block = CmBlock {
            type: type
            parent: p.cm_block
        }
        p.cm_block = block
        return block
    }

    static fn get(p: Parser, type: int) CmBlock !none {
        let block = p.cm_block
        if !isset(block) : throw none
        if block.type != type && type != cm_block_any : throw none
        return block
    }
    static fn pop(p: Parser, type: int) CmBlock !none {
        let block = CmBlock.get(p, type) ! throw none
        p.cm_block = block.parent
        return block
    }
    static fn push(p: Parser, block: CmBlock) {
        let current = CmBlock.get(p, cm_block_any) ! {
            p.cm_block = block
            return
        }
        block.parent = current
        p.cm_block = block
    }

    fn set_idf(p: Parser, name: String, idf: Idf) {
        if this.identifiers.has(name) : p.error("Name already used: " + name)
        this.identifiers.set(name, idf)
    }
}

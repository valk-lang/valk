
struct CmBlock {
    type: int
    parent: ?CmBlock (null)
    identifiers: Map[Idf] (map[Idf]{})
    loop_index: uint (0)
    start: ?Chunk (null)
    classes: ?Array[Class] (null)
    idf1: ?Idf (null)
    name1: ?String (null)
    if_result: u8 (0)

    static fn new(p: Parser, type: int) CmBlock {
        let block = CmBlock {
            type: type
            parent: p.cm_block
        }
        p.cm_block = block
        return block
    }

    static fn get(p: Parser, type: int) CmBlock !none {
        let block = p.cm_block
        if !isset(block) : throw none
        if block.type != type : throw none
        return block
    }
    static fn pop(p: Parser, type: int) CmBlock !none {
        let block = CmBlock.get(p, type) ! throw none
        p.cm_block = block.parent
        return block
    }

    fn set_idf(p: Parser, name: String, idf: Idf) {
        if this.identifiers.has(name) : p.error("Name already used: " + name)
        this.identifiers.set(name, idf)
    }
}

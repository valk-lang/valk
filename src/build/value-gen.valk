
fn vgen_undefined(b: Build) Value {
    return Value {
        type: v_undefined
        rett: type_void(b)
    }
}
fn vgen_string(b: Build, body: String) Value {
    return Value {
        type: v_string
        string: body
        rett: type_string(b)
    }
}

fn vgen_decl(decl: Decl) Value {
    return Value {
        type: v_decl
        decl: decl
        rett: decl.type
    }
}

fn vgen_global(g: Global) Value {
    return Value {
        type: v_global
        global: g
        rett: g.get_type()
    }
}

fn vgen_prop(prop: Prop, on: Value) Value {
    return Value {
        type: v_prop
        value1: on
        prop: prop
        rett: prop.type
    }
}
fn vgen_ptrv(on: Value, type: Type, offset: Value) Value {
    return Value {
        type: v_ptrv
        value1: on
        value2: offset
        rett: type
    }
}
fn vgen_ptr_offset(on: Value, offset: Value) Value {
    return Value {
        type: v_ptr_offset
        value1: on
        value2: offset
        rett: on.rett
    }
}
fn vgen_ref(on: Value) Value {
    return Value {
        type: v_ptr_of
        value1: on
        rett: type_ptr(on.rett.build)
    }
}

fn vgen_int(value: int, type: Type) Value {
    return Value {
        type: v_int
        int: value
        rett: type
    }
}

fn vgen_func_ptr(func: Func) Value {
    return Value {
        type: v_func_ptr
        func: func
        rett: type_func(func)
    }
}

fn vgen_func_call(b: Build, decl_scope: Scope, on: Value, values: Array[Value]) Value {

    buffer_values(decl_scope, values)

    let func_info = on.rett.func_info
    if !isset(func_info) : b.error("Function call on a non-function value")
    let retts = func_info.rett_types

    let fcall = Value {
        type: v_func_call
        value1: on
        values: values
        rett: type_multi(b, retts)
    }

    let first_rett = retts.get(0) ? type_void(b)
    let fits_eax = first_rett.fits_eax()

    let retvs = array[Value]{}
    fcall.multi_values = retvs

    if retts.length > 0 && fits_eax {
        let cache = IRValueCache{}
        fcall.ir_value_cache = cache
        retvs.push(vgen_ir_value_cache(cache, first_rett))
    }

    each retts as i, type {
        if i == 0 && fits_eax : continue
        let decl = Decl.new(type, false)
        decl.is_mut = true
        decl_scope.add_decl(decl)
        values.push(vgen_ref(vgen_decl(decl)))
        retvs.push(vgen_decl(decl))
    }

    return fcall
}

fn vgen_memcpy(b: Build, from: Value, to: Value, len: Value) Value {
    return Value {
        type: v_memcpy
        value1: from
        value2: to
        value3: len
        rett: type_void(b)
    }
}

fn vgen_op(left: Value, right: Value, op: int, rett: Type) Value {
    return Value {
        type: v_op
        value1: left
        value2: right
        int: op
        rett: rett
    }
}
fn vgen_compare(left: Value, right: Value, op: int, rett: Type) Value {
    return Value {
        type: v_compare
        value1: left
        value2: right
        int: op
        rett: rett
    }
}
fn vgen_and_or(left: Value, right: Value, op: int, rett: Type) Value {
    let res = Value {
        type: v_and_or
        value1: left
        value2: right
        int: op
        rett: rett
    }

    if op == op_and {
        // merge issets when using '&&'
        let is1 = left.issets
        let is2 = right.issets
        if isset(is1) {
            res.issets = is1
            if isset(is2) : is1.push_many(is2)
        } else{
            res.issets = is2
        }
        left.not_issets = null
        right.not_issets = null
    } else if op == op_or {
        // merge not_issets when using '||'
        let is1 = left.not_issets
        let is2 = right.not_issets
        if isset(is1) {
            res.not_issets = is1
            if isset(is2) : is1.push_many(is2)
        } else{
            res.not_issets = is2
        }
        left.issets = null
        right.issets = null
    }

    return res
}

fn vgen_incr(on: Value, before: bool) Value {
    return Value {
        type: v_incr
        value1: on
        rett: on.rett
        bool1: before
    }
}
fn vgen_decr(on: Value, before: bool) Value {
    return Value {
        type: v_decr
        value1: on
        rett: on.rett
        bool1: before
    }
}

fn vgen_bool(b: Build, value: bool) Value {
    return Value {
        type: v_bool
        bool1: value
        rett: type_valk(b, "bool")
    }
}

fn vgen_cast(value: Value, type: Type) Value {
    return Value {
        type: v_cast
        value1: value
        rett: type
    }
}

fn vgen_null(rett: Type) Value {
    return Value {
        type: v_null
        rett: rett.get_nullable()
    }
}

fn vgen_class_init(class: Class, decl_scope: Scope, values: Map[Value]) Value {

    let rett = class.get_type()
    if class.size == 0 {
        let v = vgen_null(rett)
        v.rett = rett
        return v
    }

    buffer_values_map(decl_scope, values)

    let init = rett.is_gc() ? <{
        // Class
        let b = class.build
        let func = b.valk_class_func("gc", "Pool", "get_from_pool_index")
        let pool = vgen_int(class.pool_index @as int, b.valk_type("type", "uint"))
        let values = array[Value]{ pool, vgen_bool(b, class.funcs.has("_gc_free")) }
        let call = vgen_func_call(b, decl_scope, vgen_func_ptr(func), values)
        return call
    } : <{
        // Struct
        let b = class.build
        let func = b.valk_func("mem", "alloc")
        let values = array[Value]{ vgen_int(class.size @as int, b.valk_type("type", "uint")) }
        let call = vgen_func_call(b, decl_scope, vgen_func_ptr(func), values)
        return call
    }

    return Value {
        type: v_class_init
        values_map: values
        value1: init
        rett: rett
    }
}

fn buffer_values(decl_scope: Scope, values: Array[Value]) {
    each values as i, v {
        if v.needs_buffer() {
            v = vgen_buffer(decl_scope, v)
            values.set(i, v) _
        }
    }
}
fn buffer_values_map(decl_scope: Scope, values: Map[Value]) {
    each values as k, v {
        if v.needs_buffer() {
            v = vgen_buffer(decl_scope, v)
            values.set(k, v)
        }
    }
}

fn vgen_buffer(decl_scope: Scope, value: Value) Value {
    let decl = Decl.new(value.rett, false)
    decl_scope.add_decl(decl)
    return Value {
        type: v_buffer
        value1: value
        decl: decl
        rett: value.rett
    }
}

fn vgen_not(value: Value) Value {
    return Value {
        type: v_not
        value1: value
        rett: value.rett
    }
}

fn vgen_cached(value: Value) Value {
    return Value {
        type: v_cached
        value1: value
        rett: value.rett
    }
}

fn vgen_ir_value_cache(cache: IRValueCache, rett: Type) Value {
    return Value {
        type: v_ir_value_cache
        ir_value_cache: cache
        rett: rett
    }
}

fn vgen_stack_alloc(type: Type) Value {
    return Value {
        type: v_stack_alloc
        int: type.size() @as int
        rett: type.get_pointer()
    }
}

fn vgen_this_that(cond: Value, v1: Value, v2: Value, rett: Type) Value {
    return Value {
        type: v_this_that
        value1: cond
        value2: v1
        value3: v2
        rett: rett
    }
}

fn vgen_multi(b: Build, values: Array[Value], pre_statement: ?Value (null)) Value {
    let rett = type_void(b)
    let v1 = values.get(0) ? null
    if isset(v1) : rett = v1.rett
    return Value {
        type: v_multi
        value1: pre_statement
        values: values
        rett: rett
    }
}

fn vgen_vscope(b: Build, scope: Scope, decls: Array[Decl]) Value {

    if decls.length == 0 {
        return Value {
            type: v_vscope
            scope1: scope
            rett: type_void(b)
        }
    }

    let types = array[Type]{}
    let values = array[Value]{}
    each decls as decl {
        types.push(decl.type)
        values.push(vgen_decl(decl))
    }

    return Value {
        type: v_vscope
        scope1: scope
        multi_values: values
        rett: type_multi(b, types)
    }
}

fn vgen_setjmp(b: Build, buffer: Value) Value {
    return Value {
        type: v_setjmp
        value1: buffer
        rett: type_valk(b, "i32")
    }
}

fn vgen_longjmp(b: Build, buffer: Value) Value {
    return Value {
        type: v_longjmp
        value1: buffer
        rett: type_void(b)
    }
}

fn vgen_export_symbol(name: String, rett: Type) Value {
    return Value {
        type: v_export_symbol
        string: name
        rett: rett
    }
}

fn vgen_static_array(b: Build, type: Type, values: Array[Value]) Value {
    let size = values.length
    let rett = type_array(b, type, size)
    return Value {
        type: v_static_array
        values: values
        rett: rett
    }
}

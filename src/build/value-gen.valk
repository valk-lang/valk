
fn vgen_string(b: Build, body: String) Value {
    return Value {
        type: v_string
        string: body
        rett: type_string(b)
    }
}

fn vgen_decl(decl: Decl) Value {
    return Value {
        type: v_decl
        decl: decl
        rett: decl.type
    }
}

fn vgen_prop(prop: Prop, on: Value) Value {
    return Value {
        type: v_prop
        value1: on
        prop: prop
        rett: prop.type
    }
}

fn vgen_int(value: int, type: Type) Value {
    return Value {
        type: v_int
        int: value
        rett: type
    }
}

fn vgen_func_ptr(func: Func) Value {
    return Value {
        type: v_func_ptr
        func: func
        rett: type_func(func)
    }
}

fn vgen_func_call(b: Build, on: Value, values: Array[Value]) Value {

    let func_info = on.rett.func_info
    if !isset(func_info) : build_error("Function call on a non-function value")

    return Value {
        type: v_func_call
        value1: on
        values: values
        rett: func_info.rett_eax() ? type_void(b)
    }
}

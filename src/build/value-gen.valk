
fn vgen_undefined(b: Build) Value {
    return Value {
        type: v_undefined
        rett: type_void(b)
    }
}
fn vgen_string(b: Build, body: String) Value {
    return Value {
        type: v_string
        string: body
        rett: type_string(b)
    }
}

fn vgen_decl(decl: Decl) Value {
    decl.is_used = true
    let v = Value {
        type: v_decl
        decl: decl
        rett: decl.type
    }
    return v
}

fn vgen_global(g: Global) Value {
    let v = Value {
        type: v_global
        global: g
        rett: g.get_type()
    }
    return v
}

fn vgen_prop(prop: Prop, on: Value) Value {
    let rett = prop.type
    if on.rett.is_imut {
        rett = rett.get_imut(true)
    }
    let v = Value {
        type: v_prop
        value1: on
        prop: prop
        rett: rett
    }
    return v
}
fn vgen_ptrv(on: Value, type: Type, offset: Value) Value {
    let v = Value {
        type: v_ptrv
        value1: on
        value2: offset
        type1: type
        rett: type
    }
    return v
}
fn vgen_ptr_offset(on: Value, offset: Value) Value {
    return Value {
        type: v_ptr_offset
        value1: on
        value2: offset
        rett: on.rett
    }
}
fn vgen_ref(on: Value, force_pointer: bool (false)) Value {
    let rett = (on.type == v_global || force_pointer) ? on.rett.get_pointer() : on.rett.get_ref()
    return Value {
        type: v_ptr_of
        value1: on
        rett: rett
    }
}

fn vgen_int(value: int, type: Type) Value {
    return Value {
        type: v_int
        int: value
        rett: type
    }
}
fn vgen_float(value: f64, type: Type) Value {
    return Value {
        type: v_float
        float: value
        rett: type
    }
}

fn vgen_func_ptr(func: Func) Value {
    return Value {
        type: v_func_ptr
        func: func
        rett: type_func(func)
    }
}

fn vgen_func_call(b: Build, decl_scope: Scope, on: Value, values: Array[Value]) Value {

    let func_info = on.rett.func_info
    if !isset(func_info) : b.error("Function call on a non-function value")

    // Add to used functions list 
    if on.type == v_func_ptr {
        let func = on.func
        if isset(func) {
            func.used_in(decl_scope)
        }
    }

    if on.rett.is_closure() {
        let closure_ob = on
        values.prepend(closure_ob)

        let closure_class = b.valk_class("core", "Closure")
        let prop_outer = closure_class.props.get("outer_func") ! b.error("Missing closure 'func' property (bug)")
        on = vgen_prop(prop_outer, closure_ob)

        let arg_types = Array[Type].new()
        each values as val {
            arg_types.push(val.rett)
        }

        func_info = func_info.clone()
        func_info.args = arg_types
        on.rett = type_func_info(b, func_info)
    }

    buffer_values(decl_scope, values)

    let retts = func_info.rett_types
    let first_rett = retts.get(0) !? type_void(b)
    let fits_eax = first_rett.fits_eax()

    let fcall = Value {
        type: v_func_call
        value1: on
        values: values
        rett: first_rett
    }

    let retvs = Array[Value].new()

    if fits_eax {
        retvs.push(fcall)
    }

    each retts as type, i {
        if i == 0 && fits_eax : continue
        let decl = Decl.new(type, false, "retv")
        decl.is_mut = true
        decl_scope.add_decl(decl)
        let declv = vgen_ref(vgen_decl(decl))
        values.push(declv)
        //
        let val = vgen_decl(decl)
        val.pre_value = fcall
        //
        retvs.push(val)
    }

    return vgen_multi_return(b, fcall, retvs)
}

fn vgen_memcpy(b: Build, from: Value, to: Value, len: Value) Value {
    return Value {
        type: v_memcpy
        value1: from
        value2: to
        value3: len
        rett: type_void(b)
    }
}

fn vgen_op(left: Value, right: Value, op: int, rett: Type) Value {
    return Value {
        type: v_op
        value1: left
        value2: right
        int: op
        rett: rett
    }
}
fn vgen_atomic_op(left: Value, right: Value, op: int) Value {
    return Value {
        type: v_atomic_op
        value1: left
        value2: right
        int: op
        rett: left.rett
    }
}

fn vgen_compare(left: Value, right: Value, op: int, rett: Type) Value {
    return Value {
        type: v_compare
        value1: left
        value2: right
        int: op
        rett: rett
    }
}
fn vgen_and_or(left: Value, right: Value, op: int, rett: Type) Value {
    let res = Value {
        type: v_and_or
        value1: left
        value2: right
        int: op
        rett: rett
    }

    if op == op_and {
        // merge issets when using '&&'
        let is1 = left.issets
        let is2 = right.issets
        if isset(is1) {
            res.issets = is1
            if isset(is2) : is1.append_many(is2)
        } else{
            res.issets = is2
        }
        left.not_issets = null
        right.not_issets = null
    } else if op == op_or {
        // merge not_issets when using '||'
        let is1 = left.not_issets
        let is2 = right.not_issets
        if isset(is1) {
            res.not_issets = is1
            if isset(is2) : is1.append_many(is2)
        } else{
            res.not_issets = is2
        }
        left.issets = null
        right.issets = null
    }

    return res
}

fn vgen_incr(on: Value, before: bool) Value {
    return Value {
        type: v_incr
        value1: on
        rett: on.rett
        bool1: before
    }
}
fn vgen_decr(on: Value, before: bool) Value {
    return Value {
        type: v_decr
        value1: on
        rett: on.rett
        bool1: before
    }
}

fn vgen_bool(b: Build, value: bool) Value {
    return Value {
        type: v_bool
        bool1: value
        rett: type_valk(b, "bool")
    }
}

fn vgen_cast(value: Value, type: Type) Value {
    return Value {
        type: v_cast
        value1: value
        rett: type
    }
}

fn vgen_null(rett: Type) Value {
    return Value {
        type: v_null
        rett: rett.get_nullable()
    }
}
fn vgen_null_fake(rett: Type) Value {
    return Value {
        type: v_null
        rett: rett
    }
}

fn vgen_class_init(class: Class, decl_scope: Scope, values: Map[Value], p: ?Parser (null)) Value {

    if class.type == ct_class {
        let current_func = decl_scope.get_func() ! class.build.error("Missing function for scope while initializing object")
        current_func.info_creates_objects = true
    }

    if class.uses_vtable && !values.has("_VTABLE") {
        values.set("_VTABLE", vgen_export_symbol(class.vtable_export_name(), type_ptr(class.build)))
    }

    let rett = class.get_type()
    if class.size == 0 {
        let v = vgen_null(rett)
        v.rett = rett
        return v
    }

    buffer_values_map(decl_scope, values)

    let init = rett.is_gc() ? <{
        // Class
        let b = class.build
        let func = b.valk_class_func("gc", "Pool", class.uses_vtable ? "get_vtable" : "get")
        let pooli = vgen_int(class.pool_index.@cast(int), b.valk_type("type", "uint"))
        let pool = vgen_ptrv(vgen_global(b.valk_global("gc", "pools")), type_ptr(b), pooli)
        let values = Array[Value]{ pool }
        let call = vgen_func_call(b, decl_scope, vgen_func_ptr(func), values)
        return call
    } : <{
        // Struct
        let b = class.build
        let func = b.valk_func("mem", "alloc")
        let values = Array[Value]{ vgen_int(class.size.@cast(int), b.valk_type("type", "uint")) }
        let call = vgen_func_call(b, decl_scope, vgen_func_ptr(func), values)
        return call
    }

    let base = vgen_wrap(init)
    let b = class.build

    // Code
    let sub = decl_scope.sub_scope(sc_default)

    each values as value, name {
        sub.ast.append(tgen_statement(value))
    }

    sub.ast.append(tgen_statement(base))

    if class.type == ct_class {
        let propc = vgen_ptrv(base, b.valk_type("type", "u8"), vgen_int(-3, b.valk_type("type", "int")))
        ast_gen_assign(p, sub, propc, vgen_int(class.get_gc_prop_count(), b.valk_type("type", "u8")), false, null)
    }

    let props = class.get_props()
    each values as value, name {
        let prop = props.get(name) ! continue
        ast_gen_assign(p, sub, vgen_prop(prop, base), value, false, null)
    }

    return Value {
        type: v_class_init
        values_map: values
        value1: base
        scope1: sub
        rett: rett
    }
}

fn vgen_array_init(scope: Scope, base: Value, values: Array[Value], item_type: Type, rett: Type) Value {

    let b = rett.build
    let size_type = b.valk_type("type", "uint")
    let sub = scope.sub_scope(sc_default)
    let ast = sub.ast

    sub.ast.append(tgen_statement(base))

    let offset: uint = 0
    each values as val {
        let left = vgen_ptrv(base, item_type, vgen_int(offset.to(int), size_type))
        ast_gen_assign(null, sub, left, val, false)
        offset++
    }
    if values.length < rett.array_size {
        let filler = values.get(values.length - 1) !? vgen_undefined(b)
        while values.length < rett.array_size {
            let left = vgen_ptrv(base, item_type, vgen_int(offset.to(int), size_type))
            ast_gen_assign(null, sub, left, filler, false)
            offset++
            values.append(filler)
        }
    }

    return Value {
        type: v_array_init
        value1: base
        value2: vgen_inline_scope(sub, rett)
        rett: rett
    }
}

fn buffer_values(decl_scope: Scope, values: Array[Value]) {
    each values as v, i {
        if v.needs_buffer() {
            v = vgen_buffer(decl_scope, v)
            values.set(i, v) _
        }
    }
}
fn buffer_values_map(decl_scope: Scope, values: Map[Value]) {
    each values as v, k {
        if v.needs_buffer() {
            v = vgen_buffer(decl_scope, v)
            values.set(k, v)
        }
    }
}

fn vgen_buffer(decl_scope: Scope, value: Value) Value {
    let func = decl_scope.func
    if !isset(func) : return value
    if func.no_buffers : return value
    if value.type == v_buffer {
        let decl = value.decl
        if isset(decl) {
            if func.reuse_buffer(decl) : return value
        }
    }
    let decl = func.get_buffer(value.rett, decl_scope)
    return Value {
        type: v_buffer
        value1: value
        decl: decl
        rett: value.rett
    }
}

fn vgen_not(value: Value) Value {
    return Value {
        type: v_not
        value1: value
        rett: value.rett
    }
}

fn vgen_stack_alloc(type: Type) Value {
    return Value {
        type: v_stack_alloc
        int: type.size().@cast(int)
        rett: type.get_pointer()
    }
}

fn vgen_this_or_that(cond: Value, v1: Value, v2: Value, rett: Type) Value {
    return Value {
        type: v_this_or_that
        value1: cond
        value2: v1
        value3: v2
        rett: rett
    }
}

fn vgen_multi_return(b: Build, from: Value, values: Array[Value]) Value {
    if values.length == 1 {
        let first = values.get(0) !? null
        if isset(first) : return first
    }
    let types = Array[Type].new()
    each values as val {
        types.push(val.rett)
    }
    let rett = type_multi(b, types)
    return Value {
        type: v_multi_return
        value1: from
        values: values
        rett: rett
    }
}

fn vgen_grouped_values(b: Build, values: Array[Value]) Value {
    if values.length == 1 {
        let first = values.get(0) !? null
        if isset(first) : return first
    }
    let types = Array[Type].new()
    each values as val {
        types.push(val.rett)
    }
    let rett = type_multi(b, types)
    return Value {
        type: v_grouped_values
        values: values
        rett: rett
    }
}

fn vgen_vscope(b: Build, scope: Scope, decls: Array[Decl]) Value {

    if decls.length == 0 {
        return Value {
            type: v_vscope
            scope1: scope
            rett: type_void(b)
        }
    }

    let types = Array[Type]{}
    let values = Array[Value]{}
    each decls as decl {
        types.push(decl.type)
        values.push(vgen_decl(decl))
    }

    return Value {
        type: v_vscope
        scope1: scope
        values: values
        rett: type_multi(b, types)
    }
}

fn vgen_setjmp(b: Build, buffer: Value) Value {
    return Value {
        type: v_setjmp
        value1: buffer
        rett: type_valk(b, "i32")
    }
}

fn vgen_longjmp(b: Build, buffer: Value) Value {
    return Value {
        type: v_longjmp
        value1: buffer
        rett: type_void(b)
    }
}

fn vgen_export_symbol(name: String, rett: Type) Value {
    return Value {
        type: v_export_symbol
        string: name
        rett: rett
    }
}

fn vgen_assign(left: Value, right: Value) Value {
    return Value {
        type: v_assign
        value1: left
        value2: right
        rett: left.rett
    }
}
fn vgen_declare(decl: Decl, value: Value) Value {
    return Value {
        type: v_declare
        decl: decl
        value1: value
        rett: decl.type
    }
}

fn vgen_wrap(val: Value) Value {
    return Value {
        type: v_wrap
        value1: val
        rett: val.rett
    }
}
fn vgen_this_but_that(this: Value, that: Value) Value {
    let wrap = vgen_wrap(that)
    wrap.pre_value = this
    return wrap
}
fn vgen_cond_value(cond: Value, value: Value, velse: ?Value (null)) Value {
    return Value {
        type: v_cond
        value1: cond
        value2: value
        value3: velse
        rett: type_void(cond.rett.build)
    }
}

fn vgen_error_check(b: Build) Value {
    let g_code = b.valk_global("core", "error_code")
    let code = vgen_global(g_code)
    let val = vgen_int(0, g_code.get_type())
    return vgen_compare(code, val, op_ne, b.valk_type("type", "bool"))
}

fn vgen_error_code_reset(v: Value) Value {
    return Value {
        type: v_err_code_reset
        value1: v
        rett: v.rett
    }
}

fn vgen_empty_value(type: Type) Value {
    if type.is_void() {
        return vgen_undefined(type.build)
    }
    if type.is_pointer {
        return vgen_null(type)
    }
    if type.is_float() {
        return vgen_float(0, type)
    }
    return vgen_int(0, type)
}

fn vgen_inline_scope(scope: Scope, rett: Type) Value {
    return Value {
        type: v_inline_scope
        scope1: scope
        rett: rett
    }
}

fn vgen_unroll_inline_scope(iscope: Value) Value {
    let scope = iscope.scope1
    if !isset(scope) : iscope.rett.build.error("Missing scope value for inline scope token (bug)")

    let last = scope.ast.get(scope.ast.length - 1) !? null
    if isset(last) {
        if last.type == tk_statement {
            let v = last.value1
            if isset(v) {
                let values = v.unroll()
                if values.length == 1 {
                    return vgen_this_but_that(iscope, v)
                } else {
                    let results = Array[Value].new()
                    each values as val, i {
                        results.push(vgen_this_but_that(iscope, val))
                    }
                    return vgen_grouped_values(iscope.rett.build, results)
                }
            }
        }
    }
    return iscope
}

fn vgen_phi(v1: Value, v2: Value, rett: Type) Value {
    return Value {
        type: v_phi
        value1: v1
        value2: v2
        rett: rett
    }
}

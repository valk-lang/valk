

fn stage_fc_pipeline(b: Build) {
    let i : uint = 0
    let list = b.fc_pipeline
    while i < list.length {
        let fc = list.get(i++) ! break
        stage_fc(fc)
    }

    stage_alias(b)
}

fn stage_fc(fc: Fc) {
    let b = fc.build
    if b.verbose > 2 : b.log("> Stage 1: " + fc.path)

    let p = Parser.new(fc.start, fc.nsc.unit, null)
    let nsc = fc.nsc

    while true {
        let t = p.tok(true, true)

        if t == tok_end {
            break
        }

        let act = act_public_nsc

        if t == tok_word {
            let word = p.word()

            if word == "fn" {
                parse_func(p, fc, act)
                continue
            }
        }

        p.error("Unexpected token: " + p.tok_to_str(t))
    }
}

fn parse_func(p: Parser, fc: Fc, act: int) {
    let name = p.read_id(true, false) 
    p.expect("(", false, false)
    let chunk_args = p.clone_chunk()
    let f = p.unit.new_func(fc, act, name, chunk_args) ! p.error("Name already used: " + name)
    f.parse_args(p)
}

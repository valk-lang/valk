
use valk:fs

fn stage_fc_pipeline(b: Build) {
    let i : uint = 0
    let list = b.fc_pipeline
    while i < list.length {
        let fc = list.get(i++) ! break
        stage_fc(fc)
    }

    stage_alias(b)
}

fn stage_fc(fc: Fc) {
    let b = fc.build
    if b.verbose > 2 : b.log("> Stage 1: " + fc.path)

    let p = Parser.new(fc.start, null)
    let nsc = fc.nsc

    while true {
        let t = p.tok(true, true)

        if t == tok_end {
            break
        }

        let act = act_private_nsc
        let act_word: ?String = null

        if t == tok_sign {
            if p.word_is(";") {
                continue
            }
            if p.word_is("#") && p.on_newline {
                parse_compile_macro(p, fc.scope)
                continue;
            }
        }

        // Access
        if t == tok_sign {
            if p.word_is("+") {
                act_word = p.word()
                act = act_public
                t = p.tok(true, false)
            } else if p.word_is("-") {
                act_word = p.word()
                act = act_private_fc
                t = p.tok(true, false)
            }
        }

        if t == tok_word {
            // With act
            if p.word_is("fn") {
                parse_func(p, fc, act)
                continue
            }
            if p.word_is("exit") {
                p.expect("fn", true, false)
                let func = parse_func(p, fc, act)
                func.is_exit = true
                continue
            }
            if p.word_is("class") {
                parse_class(p, fc, act, ct_class)
                continue
            }
            if p.word_is("struct") {
                parse_class(p, fc, act, ct_struct)
                continue
            }
            if p.word_is("pointer") {
                parse_class(p, fc, act, ct_pointer)
                continue
            }
            if p.word_is("integer") {
                parse_class(p, fc, act, ct_int)
                continue
            }
            if p.word_is("float") {
                parse_class(p, fc, act, ct_float)
                continue
            }
            if p.word_is("boolean") {
                parse_class(p, fc, act, ct_bool)
                continue
            }
            if p.word_is("global") {
                parse_global(p, fc, act, false)
                continue
            }
            if p.word_is("shared") {
                parse_global(p, fc, act, true)
                continue
            }
            if p.word_is("trait") {
                parse_trait(p, fc, act)
                continue
            }
            if p.word_is("value") {
                parse_alias(p, fc, act, alias_value)
                continue
            }
            if p.word_is("type") {
                parse_alias(p, fc, act, alias_type)
                continue
            }
            if p.word_is("alias") {
                parse_alias(p, fc, act, alias_idf)
                continue
            }
            if p.word_is("macro") {
                parse_macro(p, fc, act)
                continue
            }

            // Without act
            if isset(act_word) {
                p.error("Unexpected access type specified: '" + act_word + "'")
            }
            if p.word_is("use") {
                parse_use(p, fc)
                continue
            }
            if p.word_is("header") {
                parse_header(p, fc)
                continue
            }
            if p.word_is("test") {
                parse_test(p, fc)
                continue
            }
            if p.word_is("link") {
                parse_link(p, fc)
                continue
            }
        }

        p.error_token();
    }

    parse_compile_macro_scope_end_check(p)
}

fn parse_func(p: Parser, fc: Fc, act: int) Func {
    let name = p.read_word(true, false) 
    let generic_names : ?Array[String] = null
    p.tok(false, false, false)
    if p.sign_is("[") {
        p.tok(false, false)
        generic_names = read_generic_names(p)
    }

    p.expect("(", true, false)
    let chunk_args = p.clone_chunk()

    let nsc = fc.nsc
    let ename = nsc.export_name(name)
    let dname = nsc.display_name(name)

    let f = fc.unit.new_func(fc, act, ename, dname, generic_names, chunk_args)
    f.parse_args(p)
    fc.nsc.scope.set_idf(p, name, Idf.for_func(f))

    if p.build.nsc_main_ == fc.nsc {
        // Set export names for main functions
        if name == "main" {
            p.build.main_func = f
            f.export_name = "__main__"
        } else if name == "__valk_main__" {
            p.build.main_func = f
            f.export_name = "main"
        }
    }

    return f
}

fn parse_class(p: Parser, fc: Fc, act: int, type: int) {
    let name = p.read_word(true, false) 
    let generic_names : ?Array[String] = null
    p.tok(false, false, false)
    if p.sign_is("[") {
        p.tok(false, false)
        generic_names = read_generic_names(p)
    }

    let signed = false
    let size_int: uint = 0
    if type == ct_int {
        p.expect2("signed", "unsigned", true, true)
        signed = p.word_is("signed")
        let t = p.tok(true, false)
        if p.sign_is("*") {
            size_int = p.build.ptr_size
        } else if p.word_is("8") {
            size_int = 8
        } else if p.word_is("4") {
            size_int = 4
        } else if p.word_is("2") {
            size_int = 2
        } else if p.word_is("1") {
            size_int = 1
        } else {
            p.error("Invalid integer size: " + p.word() + " | Options: 1,2,4,8,*")
        }
    }

    p.expect("{", true, true)
    let chunk = p.clone_chunk()

    let nsc = fc.nsc
    let ename = nsc.export_name(name)
    let dname = nsc.display_name(name)

    let class = fc.unit.new_class(fc, act, name, ename, dname, type, generic_names, chunk)
    p.skip_body("}")
    fc.nsc.scope.set_idf(p, name, Idf.for_class(class))

    if type == ct_int {
        class.size = size_int
        class.is_signed = signed
    } else if type == ct_bool {
        class.size = 1
    }
}

fn parse_trait(p: Parser, fc: Fc, act: int) {
    let name = p.read_word(true, false) 
    p.expect("{", true, true)

    let t = Trait {
        chunk: p.clone_chunk()
        fc: fc
    }
    p.skip_body("}")

    fc.nsc.scope.set_idf(p, name, Idf.for_trait(t))
}

fn parse_global(p: Parser, fc: Fc, act: int, shared: bool) {
    let name = p.read_word(true, false) 
    p.expect(":", true, false)
    let chunk_type = p.clone_chunk()
    p.skip_type()
    let chunk_value: ?Chunk = null
    if p.next_word_is("(", true, false, true) {
        chunk_value = p.clone_chunk()
        p.skip_body(")")
    }
    let g = fc.unit.new_global(fc, act, name, fc.nsc.export_name(name), fc.nsc.display_name(name), chunk_type, chunk_value)
    g.shared = shared
    fc.nsc.scope.set_idf(p, name, Idf.for_global(g))
}
fn parse_alias(p: Parser, fc: Fc, act: int, type: int) {
    let name = p.read_word(true, false) 
    let chunk: ?Chunk = null
    if type == alias_idf {
        p.expect("for", true, false)
        chunk = p.clone_chunk() 
        let id = Id.read(p, true, false)
    } else if type == alias_value || type == alias_type {
        p.expect("(", true, false)
        chunk = p.clone_chunk() 
        p.skip_body(")")
    }
    if !isset(chunk) : p.error("Missing alias chunk (compiler bug)")
    let a = Alias {
        type: type
        fc: fc
        act: act
        name: name
        chunk: chunk
    }
    p.build.aliasses.push(a)
    fc.nsc.scope.set_idf(p, name, Idf.for_alias(a))
}
fn parse_macro(p: Parser, fc: Fc, act: int) {
}

// 
fn parse_use(p: Parser, fc: Fc) {
    let id = Id.read(p, true, false)
    let pkc = fc.nsc.pkc
    let pkg = id.pkg
    if isset(pkg) {
        pkc = pkc.load_sub_pkc(pkg)
    }
    let nsc = pkc.nsc(id.ns, p)
    let name = id.ns
    fc.scope.set_idf(p, name, Idf.for_scope(nsc.scope))
}
fn parse_header(p: Parser, fc: Fc) {
    let t = p.tok(true, false)
    let pkc = fc.header_nsc.pkc
    if t == tok_word {
        let name = p.word()
        pkc.load_sub_pkc(name)
        p.expect(":", false, false)
        p.expect_string(false, false)
    } else if t != tok_string {
        p.error("Missing header path between double quotes")
    }
    //
    let fn = p.word()
    fn = fn.sub_str(1, fn.bytes - 2).unescape()
    //
    let config = pkc.config
    if !isset(config) : p.error("Package does not have any headers (no config)")
    let pkc_dir = pkc.dir
    if !isset(pkc_dir) : p.error("Package missing direcory (compiler bug)")

    let headers = config.json.get("headers") ! p.error("Package config does not have any header settings")
    let dirs = headers.get("dirs") ! p.error("Package config did not define 'headers.dirs'")
    let list = dirs.array() ! p.error("Incorrect configuration of header settings: " + config.path)
    let path: ?String = null
    each list as item {
        let dir = item.string() ! p.error("Incorrect configuration of header directory: " + config.path)
        let full = pkc_dir.rtrim("/") + "/" + dir.trim("/") + "/" + fn.trim("/") + ".valk.h"
        if fs:exists(full) {
            path = full
            break
        }
    }
    if !isset(path) : p.error("Cannot find header file: '" + fn + ".valk.h'")
    let hfc = fc.nsc.load_header_fc(path)

    if fc.is_header : return

    p.expect("as", true, false)

    let name = p.read_word(true, false)
    fc.scope.set_idf(p, name, Idf.for_scope(hfc.scope))
}
fn parse_link(p: Parser, fc: Fc) {
    let t = p.tok(true, false)
    let type = 0
    if p.word_is("dynamic") : type = link_dynamic
    else if p.word_is("static") : type = link_static
    else : p.error("Expected 'dynamic' or 'static' here, found: '" + p.word() + "'")

    p.expect_string(true, false)
    let lib = p.word().trim("\"")
    let b = p.build

    let link = b.links_named.get(lib) ? null
    if isset(link) {
        if link.type == link_dynamic && type == link_static {
            link.type = link_static
        }
        b.links.remove_value(link)
        b.links.push(link)
    } else {
        let link = Link{
            type: type
            lib: lib
        }
        b.links_named.set(lib, link)
        b.links.push(link)
    }
}
fn parse_test(p: Parser, fc: Fc) {
}

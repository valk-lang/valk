
use valk:fs

fn stage_fc_pipeline(b: Build) {
    let i : uint = 0
    let list = b.fc_pipeline
    while i < list.length {
        let fc = list.get(i++) ! break
        stage_fc(fc)
    }

    stage_alias(b)
}

fn stage_fc(fc: Fc) {
    let b = fc.build
    if b.verbose > 2 : b.log("> Stage 1: " + fc.path)

    let p = Parser.new(fc.start, null)
    let nsc = fc.nsc

    while true {
        let t = p.tok(true, true)

        if t == tok_end {
            break
        }

        let act = act_private_nsc
        let act_word: ?String = null

        if t == tok_sign {
            if p.word_is("#") {
                parse_compile_macro(p, false)
                continue;
            }
        }

        if t == tok_word {
            // Access
            if p.word_is("pub") {
                act_word = p.word()
                act = act_public
                t = p.tok(true, false)
            }

            // With act
            if p.word_is("fn") {
                parse_func(p, fc, act)
                continue
            }
            if p.word_is("exit") {
                p.expect("fn", true, false)
                parse_func(p, fc, act)
                continue
            }
            if p.word_is("class") {
                parse_class(p, fc, act, ct_class)
                continue
            }
            if p.word_is("struct") {
                parse_class(p, fc, act, ct_struct)
                continue
            }
            if p.word_is("pointer") {
                parse_class(p, fc, act, ct_pointer)
                continue
            }
            if p.word_is("integer") {
                parse_class(p, fc, act, ct_int)
                continue
            }
            if p.word_is("float") {
                parse_class(p, fc, act, ct_float)
                continue
            }
            if p.word_is("global") {
                parse_global(p, fc, act, false)
                continue
            }
            if p.word_is("shared") {
                parse_global(p, fc, act, true)
                continue
            }
            if p.word_is("trait") {
                parse_trait(p, fc, act)
                continue
            }
            if p.word_is("value") {
                parse_alias(p, fc, act, alias_value)
                continue
            }
            if p.word_is("type") {
                parse_alias(p, fc, act, alias_type)
                continue
            }
            if p.word_is("macro") {
                parse_macro(p, fc, act)
                continue
            }

            // Without act
            if isset(act_word) {
                p.error("Unexpected access type specified: '" + act_word + "'")
            }
            if p.word_is("use") {
                parse_use(p, fc)
                continue
            }
            if p.word_is("header") {
                parse_header(p, fc)
                continue
            }
            if p.word_is("test") {
                parse_test(p, fc)
                continue
            }
            if p.word_is("link") {
                parse_link(p, fc)
                continue
            }
        }

        p.error_token();
    }

    parse_compile_macro_scope_end_check(p)
}

fn parse_func(p: Parser, fc: Fc, act: int) {
    let name = p.read_word(true, false) 
    p.expect("(", false, false)
    let chunk_args = p.clone_chunk()
    let f = fc.nsc.unit.new_func(fc, act, name, chunk_args) ! p.error("Name already used: " + name)
    f.parse_args(p)
}

fn parse_class(p: Parser, fc: Fc, act: int, type: int) {
}
fn parse_trait(p: Parser, fc: Fc, act: int) {
}
fn parse_global(p: Parser, fc: Fc, act: int, shared: bool) {
}
fn parse_alias(p: Parser, fc: Fc, act: int, type: int) {
}
fn parse_macro(p: Parser, fc: Fc, act: int) {
}

// 
fn parse_use(p: Parser, fc: Fc) {
    let id = Id.read(p, true, false)
    let pkc = fc.nsc.pkc
    let pkg = id.pkg
    if isset(pkg) {
        pkc = pkc.load_sub_pkc(pkg)
    }
    let nsc = pkc.nsc(id.ns)
    let name = id.ns
    fc.scope.identifiers.set(name, Idf.for_nsc(nsc))
}
fn parse_header(p: Parser, fc: Fc) {
    let t = p.tok(true, false)
    let pkc = fc.nsc.pkc
    if t == tok_word {
        let name = p.word()
        pkc.load_sub_pkc(name)
        p.expect(":", false, false)
        p.expect_string(false, false)
    } else if t != tok_string {
        p.error("Missing header path between double quotes")
    }
    let fn = p.word()
    let config = pkc.config
    if !isset(config) : p.error("Package does not have any headers (no config)")
    let pkc_dir = pkc.dir
    if !isset(pkc_dir) : p.error("Package missing direcory (compiler bug)")

    let headers = config.json.get("headers") ! p.error("Package config does not have any header settings")
    let dirs = headers.get("dirs") ! p.error("Package config did not define 'headers.dirs'")
    let list = dirs.array() ! p.error("Incorrect configuration of header settings: " + config.path)
    let path: ?String = null
    each list as item {
        let dir = item.string() ! p.error("Incorrect configuration of header directory: " + config.path)
        let full = pkc_dir.rtrim("/") + "/" + dir.trim("/") + "/" + fn.trim("/") + ".valk.h"
        if fs:exists(full) {
            path = full
            break
        }
    }
    if !isset(path) : p.error("Cannot find header file: '" + fn + ".valk.h'")
    p.build.nsc_main().load_fc(path)
}
fn parse_link(p: Parser, fc: Fc) {
}
fn parse_test(p: Parser, fc: Fc) {
}

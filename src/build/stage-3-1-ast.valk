
use helper
use valk:time
use valk:thread

@ignore_access

fn stage_ast(b: Build) {

    let lsp = b.lsp
    if b.verbose > 2 : b.log("> Stage 3: Parse function ASTs")

    // Parse
    let start = time:microtime()
    parse_asts(b)

    // Check namespace uses
    if !b.cli.values.has("--filter") {
        let nsc_main = b.nsc_main()
        each b.fc_by_path as fc {
            each fc.ns_uses as u {
                if fc.nsc.pkc != nsc_main.pkc : continue
                let idfs = u.idfs
                each idfs as idf {
                    let loc = idf.location
                    if !idf.used && isset(loc) {
                        if isset(lsp) {
                            if lsp.file_content.has(fc.path) {
                            // if lsp.file == fc.path {
                                let idstr = u.id.to(String)
                                let start = loc.copy()
                                start.goback(idstr.length)
                                b.parse_errors.push(ParseError {
                                    chunk: start
                                    chunk_end: loc
                                    msg: "Namespace '" + u.id + "' imported but not used"
                                    type: err_type_warn
                                })
                            }
                            continue
                        } 
                        b.warn("Namespace '" + u.id + "' imported but not used @ " + fc.path + ":" + loc.line)
                    }
                }
            }
        }
    }

    if isset(lsp) : return

    // Optimize AST
    stage_ast_reduce(b)

    // Time
    let duration : float = time:microtime() - start
    if b.verbose > 0 : helper:msg("⌚️", "Valk: Parse AST & Generate IR: " + duration / 1000000 + "s")
    
    // Objects
    let threads = Array[thread:Thread]{}
    start = time:microtime()
    each b.units as unit {
        let t = stage_object(unit)
        if isset(t) : threads.push(t)
    }
    each threads as t, i {
        if b.verbose > 2 : b.log("> Waiting for Thread: %i/%{threads.length}")
        t.wait()
    }

    // Time
    duration = time:microtime() - start
    if b.verbose > 0 : helper:msg("⌚️", "LLVM: Convert IR -> object files: " + duration / 1000000 + "s")

    start = time:microtime()
    stage_link(b)

    // Time
    duration = time:microtime() - start
    if b.verbose > 0 : helper:msg("️⌚", "Linker: " + duration / 1000000 + "s")
}

fn parse_asts(b: Build) {

    let nsc_main = b.nsc_main()
    let lsp = b.lsp
    let is_lsp = isset(lsp)

    while true {
        let parse_count : uint = 0
        each b.ast_pipeline as func, i {
            if func.from_header : continue
            if func.skip_ast : continue

            if func.parsed_ast {
                if (!func.tracks_classes || func.tracked_classes == b.classes.length)
                && (!func.tracks_globals || func.tracked_globals == b.globals.length)
                {
                    continue
                }
            }

            await (co parse_func_ast(func)) ! continue

            // Warn about unused variables
            each func.fast().scope.decls as decl {
                let n = decl.name
                let ch = decl.chunk
                if isset(n) && !decl.is_used && isset(ch) {
                    let fc = ch.fc
                    if fc.nsc.pkc == nsc_main.pkc : b.warn("Variable '" + n + "' was declared but not used @ " + fc.path + ":" + ch.line)
                }
            }

            // IR
            if !is_lsp : func_ir(func)
            func.wipe_ast()
            parse_count++

            // let code : ptr = func.ir_code
            // let data = (@offset(code, u8, -8)).@cast(gc:GcData)
            // let offset = data.block_offset
            // if offset > 0 {
            //     let block = code - offset
            //     irc += @ptrv(block, uint, 4)
            // }

            // if i == (b.ast_pipeline.length - 1) {
            //     each b.units as u {
            //         u._ir = null
            //     }
            //     println("RUN GC")
            //     gc:collect()
            // }

            // let u = gc:mem_marked - start - irc
            // println(func.display_name)
            // println("📈 Compiler memory usage: " + (u.to(float) / 1024 / 1024) + " mb | irc: " + (irc.to(float) / 1024 / 1024))
            // if parse_count == 100 : exit(1)
        }
        // exit(1)

        if parse_count == 0 {
            break
        }
    }
}

fn parse_func_ast(func: Func) {

    let b = func.build
    if b.verbose > 2 : b.log("> Stage 3.1: Parse function AST: " + func.display_name)

    func.parsed_ast = true
    func.tracked_classes = b.classes.length
    func.tracked_globals = b.globals.length

    let body = func.chunk_body
    if !isset(body) : panic("Missing function body")

    let p = Parser.new(body, null)
    p.func_ = func

    // Full AST reset
    func.init_ast_scope()

    // Parse
    let fast = func.fast()
    read_ast(p, fast.scope, false)

    p.func_ = null

    func.finish_ast_scope()
}

fn func_calculate_alloca_size(func: Func) {
    let b = func.build
    let fast = func.fast()
    let scope = fast.scope

    let gc_count: uint = 0
    let alloca_size: uint = 0
    let decls = scope.decls
    each decls as decl {
        if !decl.is_gc || func.disable_gc_stack {
            if decl.is_mut {
                decl.offset = alloca_size
                alloca_size += decl.type.size()
                alloca_size = alloca_size.round_up(b.ptr_size)
            }
            continue
        }
        if decl.is_mut || !decl.is_arg {
            decl.offset = gc_count++
        }
    }

    fast.gc_decl_count = gc_count
    fast.alloca_size = alloca_size

    func.ast_has_gc_decls = gc_count > 0
}

fn func_generate_alloca_scope(func: Func) {
    let b = func.build
    let fast = func.fast()
    let func_scope = fast.scope
    let alloca_scope = fast.scope_alloca
    let defer_scope = fast.scope_defer

    if func.disable_gc_stack || fast.gc_decl_count == 0 : return

    if !func.is_entrance {
        func_scope.ast.prepend(Token { type: tk_inline_scope, scope1: alloca_scope })
    }

    ///////////////////////////
    // Function start
    ///////////////////////////

    let ast = alloca_scope.ast

    ast.push(Token {
        type: tk_ir_comment
        string1: "INCREASE GC STACK"
    })

    let stackg = b.valk_global("gc", "stack_top")
    let adr = vgen_global(stackg)

    fast.cache_stack_adr = adr

    ast.push(Token {
        type: tk_statement
        value1: adr
    })

    let amount = vgen_int((fast.gc_decl_count * b.ptr_size).@cast(int), b.valk_type("type", "uint"))
    let offset = vgen_ptr_offset(adr, amount)
    ast.push(Token {
        type: tk_assign
        value1: adr
        value2: offset
    })

    ast.push(Token {
        type: tk_gc_offsets
    })

    ///////////////////////////
    // Function defer
    ///////////////////////////

    ast = defer_scope.ast

    if !func.is_entrance {
        ast.push(Token {
            type: tk_ir_comment
            string1: "REDUCE GC STACK"
        })

        ast.push(Token {
            type: tk_assign
            value1: adr
            value2: adr
        })
    }
}


use valk:time
use valk:gc
use valk:thread

@ignore_access

fn stage_ast(b: Build) {

    if b.verbose > 2 : b.log("> Stage 3: Parse function ASTs")

    // Parse
    let start = time:microtime()
    parse_asts(b)
    // Time
    let duration : float = time:microtime() - start
    if b.verbose > 0 : println("⌚️ Valk: Parse AST & Generate IR: " + duration / 1000000 + "s")
    
    // Objects
    start = time:microtime()
    each b.units as unit {
        stage_object(unit)
    }
    // Time
    duration = time:microtime() - start
    if b.verbose > 0 : println("⌚️ LLVM: Convert IR -> object files: " + duration / 1000000 + "s")

    start = time:microtime()
    stage_link(b)
    // Time
    duration = time:microtime() - start
    if b.verbose > 0 : println("️⌚ Linker: " + duration / 1000000 + "s")
}

fn parse_asts(b: Build) {
    let start = gc:mem_usage_thread
    let irc : uint = 0
    while true {
        let parse_count : uint = 0
        each b.ast_pipeline as func, i {
            if func.from_header : continue
            if func.skip_ast : continue

            if func.parsed_ast {
                if (!func.tracks_classes || func.tracked_classes == b.classes.length)
                && (!func.tracks_globals || func.tracked_globals == b.globals.length)
                {
                    continue
                }
            }

            parse_func_ast(func)

            // func_ir(func)
            func.wipe_ast()
            parse_count++

            irc += func.ir_code.length 

if i == b.ast_pipeline.length - 1 {
    println("RUN GC")
    gc:run()
    thread:sleep_ms(1000)
    gc:run()
    thread:sleep_ms(1000)
    gc:run()
}
            let u = gc:mem_usage_thread - start - irc
            println(func.display_name)
            println("📈 Compiler memory usage: " + (u.to(float) / 1024 / 1024) + " mb")
            // if parse_count == 100 : exit(1)
        }

        if parse_count == 0 {
            break
        }
    }
    exit(1)
}

fn parse_func_ast(func: Func) {

    let b = func.build
    if b.verbose > 2 : b.log("> Stage 3.1: Parse function AST: " + func.display_name)

    func.parsed_ast = true
    func.tracked_classes = b.classes.length
    func.tracked_globals = b.globals.length

    let body = func.chunk_body
    if !isset(body) : panic("Missing function body")

    let p = Parser.new(body, null)
    p.func_ = func

    // Full AST reset
    func.init_ast_scope()

    // Parse
    let fast = func.fast()
    read_ast(p, fast.scope, false)

    p.func_ = null

    func.finish_ast_scope()
}

fn func_calculate_alloca_size(func: Func) {
    let b = func.build
    let fast = func.fast()
    let scope = fast.scope

    let gc_count: uint = 0
    let alloca_size: uint = 0
    let decls = scope.decls
    each decls as decl {
        if !decl.is_gc {
            if decl.is_mut {
                decl.offset = alloca_size
                alloca_size += decl.type.size()
                alloca_size = alloca_size.round_up(b.ptr_size)
            }
            continue
        }
        if decl.is_mut || !decl.is_arg {
            decl.offset = gc_count++
        }
    }

    fast.gc_decl_count = gc_count
    fast.alloca_size = alloca_size
}

fn func_generate_alloca_scope(func: Func) {
    let b = func.build
    let fast = func.fast()
    let func_scope = fast.scope
    let alloca_scope = fast.scope_alloca
    let defer_scope = fast.scope_defer

    if !func.is_entrance {
        func_scope.ast.prepend(Token { type: tk_inline_scope, scope1: alloca_scope })
    }

    if fast.gc_decl_count > 0 {

        ///////////////////////////
        // Function start
        ///////////////////////////

        let ast = alloca_scope.ast

        ast.push(Token {
            type: tk_ir_comment
            string1: "INCREASE GC STACK"
        })

        let stackg = b.valk_global("gc", "stack_active")
        let stack = vgen_global(stackg)
        let class = stack.rett.class
        if !isset(class) : b.error("Missing stack_active type class (bug)")
        let adr_prop = class.props.get("adr") ! b.error("Missing stack_active.adr property (bug)")
        let adr = vgen_prop(adr_prop, stack)

        fast.cache_stack_adr = adr

        ast.push(Token {
            type: tk_statement
            value1: adr
        })

        let amount = vgen_int((fast.gc_decl_count * b.ptr_size).@cast(int), b.valk_type("type", "uint"))
        let offset = vgen_ptr_offset(adr, amount)
        ast.push(Token {
            type: tk_assign
            value1: adr
            value2: offset
        })

        ast.push(Token {
            type: tk_gc_offsets
        })

        ///////////////////////////
        // Function defer
        ///////////////////////////

        ast = defer_scope.ast

        ast.push(Token {
            type: tk_ir_comment
            string1: "REDUCE GC STACK"
        })

        ast.push(Token {
            type: tk_assign
            value1: adr
            value2: adr
        })
    }
}

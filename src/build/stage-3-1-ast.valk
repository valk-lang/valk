
fn stage_ast(b: Build) {

    if b.verbose > 2 : b.log("> Stage 3: Parse function ASTs")

    // Generate some things before parsing the AST
    pre_ast_stage(b)

    // Parse
    parse_asts(b)

    // Generate some last AST things
    last_ast_stage(b)
    
    // Objects
    each b.units as unit {
        stage_object(unit)
    }

    stage_link(b)
}

fn parse_asts(b: Build) {
    while true {
        let parse_count : uint = 0
        each b.ast_pipeline as func {
            if func.from_header : continue

            if func.parsed_ast {
                if (!func.tracks_classes || func.tracked_classes == b.classes.length)
                && (!func.tracks_globals || func.tracked_globals == b.globals.length)
                {
                    continue
                }
            }

            func.parsed_ast = true
            func.tracked_classes = b.classes.length
            func.tracked_globals = b.globals.length

            parse_func_ast(func)

            func_ir(func)
            func.wipe_ast()
            parse_count++
        }

        if parse_count == 0 {
            break
        }
    }
}

fn parse_func_ast(func: Func) {
    let body = func.chunk_body
    if !isset(body) : panic("Missing function body")

    let b = func.build
    if b.verbose > 2 : b.log("> Stage 3.1: Parse function AST: " + func.display_name)

    let p = Parser.new(body, null)
    p.func = func
    p.decl_scope = func.scope

    // Full AST reset
    func.wipe_ast()

    // Declarations
    each func.rett_decls as decl {
        func.scope.decls.push(decl)
    }
    each func.args as arg {
        func.scope.set_idf(p, arg.name, Idf.for_decl(arg.decl))
        func.scope.add_decl(arg.decl)
    }
    let gtypes = func.generic_types
    if isset(gtypes) {
        each gtypes as name, type {
            func.scope.set_idf(p, name, Idf.for_type(type))
        }
    }

    // Parse
    read_ast(p, func.scope, false)

    p.func = null
    p.decl_scope = null

    func_calculate_alloca_size(func)
    func_generate_alloca_scope(func)
}

fn func_calculate_alloca_size(func: Func) {
    let b = func.build
    let scope = func.scope

    let gc_count: uint = 0
    let alloca_size: uint = 0
    let decls = scope.decls
    each decls as decl {
        if !decl.is_gc {
            if decl.is_mut {
                decl.offset = alloca_size
                alloca_size += decl.type.size()
                alloca_size = alloca_size.round_up(b.ptr_size)
            }
            continue
        }
        if decl.is_mut || !decl.is_arg {
            decl.offset = gc_count++
        }
    }

    func.gc_decl_count = gc_count
    func.alloca_size = alloca_size
}

fn func_generate_alloca_scope(func: Func) {
    let b = func.build
    let func_scope = func.scope
    let alloca_scope = func.scope_alloca
    let defer_scope = func.scope_defer

    if !func.is_entrance {
        func_scope.ast.prepend(Token { type: tk_inline_scope, scope1: alloca_scope })
    }

    if func.gc_decl_count > 0 {

        ///////////////////////////
        // Function start
        ///////////////////////////

        let ast = alloca_scope.ast

        ast.push(Token {
            type: tk_ir_comment
            string1: "INCREASE GC STACK"
        })

        let stackg = b.valk_global("gc", "stack_active")
        let stack = vgen_cached(vgen_global(stackg))
        let class = stack.rett.class
        if !isset(class) : b.error("Missing stack_active type class (bug)")
        let adr_prop = class.props.get("adr") ! b.error("Missing stack_active.adr property (bug)")
        let adr = vgen_prop(adr_prop, stack)
        let adr_cached = vgen_cached(adr)

        func.cache_stack_adr = adr_cached

        ast.push(Token {
            type: tk_statement
            value1: adr_cached
        })

        let amount = vgen_int((func.gc_decl_count * b.ptr_size) @as int, b.valk_type("type", "uint"))
        let offset = vgen_ptr_offset(adr_cached, amount)
        ast.push(Token {
            type: tk_assign
            value1: adr_cached
            value2: offset
        })

        ast.push(Token {
            type: tk_gc_offsets
        })

        ///////////////////////////
        // Function defer
        ///////////////////////////

        ast = defer_scope.ast

        ast.push(Token {
            type: tk_ir_comment
            string1: "REDUCE GC STACK"
        })

        ast.push(Token {
            type: tk_assign
            value1: adr_cached
            value2: adr_cached
        })
    }
}

fn func_ir(func: Func) {
    let b = func.build
    if b.verbose > 2 : b.log("> Stage 3.3: Building IR for: " + func.display_name)

    let ir = func.unit.ir()
    let func_ir = IRFunc.new(ir, func)
    func_ir.build()
}

fn pre_ast_stage(b: Build) {
    let g = b.valk_global("gc", "gc_tables")
    g.is_const = true
}

fn last_ast_stage(b: Build) {
    let g = b.valk_global("gc", "gc_tables")

    let type = type_array(b, type_ptr(b), b.gctable_count * 4) 
    type.is_pointer = false
    g.type = type

    g.default_value = vgen_static_array(b, type_ptr(b), b.gctable_values)
}

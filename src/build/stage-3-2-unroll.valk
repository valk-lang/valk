
fn func_unroll(func: Func) {
    // let b = func.build
    // if b.verbose > 2 : b.log("> Stage 3.2: Unroll AST for: " + func.display_name)

    // let ast = func.scope.ast

    // each ast as t {
    // }
}

fn unroll_scope(scope: Scope) {
    let func = scope.func
    if !isset(func) : return

    let ast = array[Token]{}

    if scope.type == sc_func && !func.is_entrance {
        unroll_func_start(func, ast)
    }

    each scope.ast as t {
        if t.type == tk_allocas {
            unroll_func_start(func, ast)
            continue
        }
        if t.type == tk_return {
            unroll_func_defer(func, ast)
        }
        ast.push(t)
    }

    if scope.type == sc_func && !scope.did_return {
        unroll_func_defer(func, ast)
    }

    scope.ast = ast
}

fn unroll_func_start(func: Func, ast: Array[Token]) {
}

fn unroll_func_defer(func: Func, ast: Array[Token]) {
}


use helper
use valk:os
use valk:fs

fn run(args: Array[String]) {

    let valid_flags = array[String]{
        "--help", "-h", "-o", "--target", "--def", "--test", "-t", "--run", "-r", "--clean", "-c", "-v", "-vv", "-vvv"
    }
    let has_value = array[String]{ "-o", "--target", "--def" }
    let cli = helper:parse_cli_args(args, valid_flags, has_value)

    if cli.invalid.length > 0 {
        build_error("Unknown build argument: " + cli.invalid.get(0) ? "?")
    }

    let dir: ?String = null
    let files = array[String]{}
    each cli.inputs as arg {
        if arg.ends_with(".valk") {
            files.push(arg)
            continue
        }
        if !fs:is_dir(arg) {
            build_error("Invalid config directory: " + arg)
        }
        if isset(dir) {
            build_error("You can only pass 1 config directory in your build arguments\nDir1: " + dir + "\nDir2: " + arg)
        }
        dir = arg
    }

    if files.length == 0 {
        build_error("You did not mention any *.valk files in your build command\nNothing to compile")
    }

    let is_test = cli.flags.contains("test") || cli.flags.contains("t")
    let run = cli.flags.contains("run") || cli.flags.contains("r")

    let target = get_target(cli)

    each files as file {
        println(file)
    }

    println("âœ… Compiled")
}

struct Build {
    target: Target
}

exit_fn help() {
    println("\n# valk build {.valk-file(s)} [{config-dir}] -o {outpath}");
    println("or");
    println("# valk build {.valk-file(s)} [{config-dir}] -r|--run\n");

    println(" -o                  set outpath");
    println(" --run -r            run program after compiling");
    println(" --watch -w          watch files & rebuild when code changes");
    println(" --test -t           build tests");
    println(" --clean -c          ignore cache");
    // println(" --debug -d          generate debug info");
    // println(" --no-opt            build without optimizations");
    print("\n");

    println(" --def               define compile condition variables");
    println("                     format: VAR1=VAL,VAR2=VAL");
    println(" --target            compile for a specific os/arch");
    println("                     linux-x64, macos-x64, win-x64");

    print("\n");
    println(" -v -vv -vvv         show compile info");
    println(" --help -h           build command usage info");
    print("\n");

    os:exit(1)
}

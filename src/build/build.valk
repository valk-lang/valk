
use helper

struct Build {
    target: Target
    verbose: int (0)
    path_out: ?String (null)
    cache_dir: String
    pkc_by_dir: Map[Pkc] (map[Pkc]{})
    nsc_by_dir: Map[Nsc] (map[Nsc]{})
    pkc_valk_: ?Pkc (null)
    nsc_main_: ?Nsc (null)
    fc_by_path: Map[Fc] (map[Fc]{})
    main_func: ?Func (null)
    gen_unit_: ?Unit (null)
    //
    units: Array[Unit] (array[Unit]{})
    fc_pipeline: Array[Fc] (array[Fc]{})
    links: Map[Link] (map[Link]{})
    aliasses: Array[Alias] (array[Alias]{})
    classes: Array[Class] (array[Class]{})
    // Compile macro
    cm_defs: Map[String] (map[String]{})
    //
    ptr_size: uint (8)
    gen_func_name: uint (0)
    LOC: uint (0)
    //
    cli: helper:CLIArgs

    exit_fn error(msg: String) {
        build_error(msg)
    }

    fn pkc_valk() Pkc {
        let pkc = this.pkc_valk_
        if isset(pkc) : return pkc
        this.error("Cannot find valk package (bug)")
    }
    fn nsc_main() Nsc {
        let nsc = this.nsc_main_
        if isset(nsc) : return nsc
        this.error("Cannot find main:main namespace (bug)")
    }
    fn gen_unit() Unit {
        let u = this.gen_unit_
        if isset(u) : return u
        this.error("Cannot find unit for generated functions (bug)")
    }

    fn log(msg: String) {
        println(msg)
    }

    fn valk_idf(ns: String, name: String) Idf {
        let pkc = this.pkc_valk()
        let nsc = pkc.namespaces.get(ns) ! this.error("Compiler bug | Missing valk namespace: " + ns)
        return nsc.scope.identifiers.get(name) ! this.error("Compiler bug | Missing valk identifier: " + name)
    }
    fn valk_func(ns: String, name: String) Func {
        let idf = this.valk_idf(ns, name)
        let func = idf.func
        if !isset(func) : this.error("Compiler bug | Identifier is not a function")
        return func
    }
    fn valk_class(ns: String, name: String) Class {
        let idf = this.valk_idf(ns, name)
        let class = idf.class
        if !isset(class) : this.error("Compiler bug | Identifier is not a class")
        return class
    }
    fn valk_global(ns: String, name: String) Global {
        let idf = this.valk_idf(ns, name)
        let g = idf.global
        if !isset(g) : this.error("Compiler bug | Identifier is not a global variable")
        return g
    }
    fn valk_type(ns: String, name: String) Type {
        let class = this.valk_class(ns, name)
        return class.get_type()
    }

    fn set_cm_defs() {
        this.cm_defs.set("OS", this.target.os)
        this.cm_defs.set("ARCH", this.target.arch)
    }
}

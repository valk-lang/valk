
class Decl {
    name: ?String (null)
    type: Type
    ir_name: String ("-nameless-")
    ir_imut_value: String ("")
    offset: uint (0)
    is_arg: bool
    is_gc: bool
    is_mut: bool (false)
    is_retv: bool (false)
    is_bind: bool (false)
    is_buffer: bool (false)
    is_used: bool (true)

    static fn new(type: Type, is_arg: bool, name: ?String (null)) Decl {
        let is_gc = type.is_gc()
        let decl = Decl {
            type: type
            name: name
            is_arg: is_arg
            is_gc: is_gc
            // is_mut: is_gc && !is_arg
        }
        return decl
    }
}



fn find_decl_func(decl: Decl, start: Scope) Func !not_found {
    let scope : ?Scope = start
    while isset(scope) {
        let decls = scope.decls
        let s = scope
        if s.type == sc_func {
            if s.decls.contains(decl) {
                let func = s.func
                if isset(func) {
                    return func
                }
                break
            }
            scope = s.parent_idf
        } else {
            scope = s.parent
        }
    }
    throw not_found
}

fn bind_extern_decl(decl: Decl, type: Type, start: Scope) Decl {
    let funcs = Array[Func].new()
    let scope : ?Scope = start
    while isset(scope) {
        let s = scope
        if s.type == sc_func {
            let func = s.func
            if isset(func) {
                if func.scope == s {
                    funcs.prepend(func)
                }
            }
            if s.decls.contains(decl) {
                break
            }
            scope = s.parent_idf
            continue
        }
        scope = s.parent
    }

    let name = decl.name
    if !isset(name) : panic("Missing extern variable name (bug)")

    each funcs as i, func {
        if i == 0 : continue
        func.bind_data.push(decl);

        let arg = func.add_arg(name, type)
        decl = arg.decl
        decl.is_bind = true

        func.scope.add_decl(decl)
        if !func.scope.identifiers.has(name) :
            func.scope.identifiers.set(name, Idf.for_decl(decl))
    }

    return decl
}


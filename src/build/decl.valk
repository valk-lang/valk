
struct Decl {
    name: ?String (null)
    type: Type
    ir_name: String ("-nameless-")
    ir_imut_value: String ("")
    offset: uint (0)
    is_arg: bool
    is_gc: bool
    is_mut: bool (false)
    is_retv: bool (false)
    is_bind: bool (false)

    static fn new(type: Type, is_arg: bool) Decl {
        let is_gc = type.is_gc()
        return Decl {
            type: type
            is_arg: is_arg
            is_gc: is_gc
            // is_mut: is_gc && !is_arg
        }
    }
}



fn find_decl_func(decl: Decl, start: Scope) Func !not_found {
    let scope : ?Scope = start
    while isset(scope) {
        let decls = scope.decls
        if scope.decls.contains(decl) {
            let func = scope.func
            if isset(func) {
                return func
            }
            break
        }
        scope = scope.parent
    }
    throw not_found
}

fn bind_extern_decl(decl: Decl, type: Type, start: Scope) Decl {
    let funcs = Array[Func].new()
    let scope : ?Scope = start
    while isset(scope) {
        let decls = scope.decls
        let func = scope.func
        if isset(func) {
            if func.scope == scope {
                funcs.prepend(func)
            }
        }
        if scope.decls.contains(decl) {
            break
        }
        scope = scope.parent
    }

    let name = decl.name
    if !isset(name) : panic("Missing extern variable name (bug)")

    each funcs as i, func {
        if i == 0 : continue
        func.bind_data.push(decl);

        // decl = Decl.new(type, true)
        // decl.is_bind = true
        // decl.name = name
        // func.bind_args.push(decl);

        let arg = func.add_arg(name, type)
        decl = arg.decl
        decl.is_bind = true

        func.scope.add_decl(decl)
        func.scope.identifiers.set(name, Idf.for_decl(decl))
    }

    return decl
}


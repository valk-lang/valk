
fn parse_offset_value(p: Parser, scope: Scope, on: Value) Value {
    // 
    let index_chunk = p.clone_chunk()
    p.skip_body("]")

    let t = p.tok(true, true, false)
    let is_assign = p.word_is("=") || p.word_is("+=") || p.word_is("-=") || p.word_is("*=") || p.word_is("/=") || p.word_is("%=")
    
    if !is_assign {
        p.set_chunk(index_chunk);
        let func = offset_get_func(p, on)
        let fptr = vgen_func_ptr(func)
        let argvs = Array[Value].new()
        read_func_call_arg_values(p, scope, fptr, ")", argvs)
        let get_call = vgen_func_call(p.build, p.get_ds(), fptr, argvs)
        return get_call
    }

    t = p.tok(true, true)
    let value_chunk = p.clone_chunk()

    if p.word_is("=") {

        p.set_chunk(index_chunk);
        let func = offset_set_func(p, on)
        let fptr = vgen_func_ptr(func)
        let argvs = Array[Value].new()
        read_func_call_arg_values(p, scope, fptr, ")", argvs)
        let set_call = vgen_func_call(p.build, p.get_ds(), fptr, argvs)
        p.set_chunk(value_chunk);

        let args = func.args

        let right = read_value(p, scope)
        return offset_set(on, index, right)

    } else {
        let op = op_none
        if p.word_is("+=") : op = op_add
        else if p.word_is("-=") : op = op_sub
        else if p.word_is("*=") : op = op_mul
        else if p.word_is("/=") : op = op_div
        else if p.word_is("%=") : op = op_mod

        let right = read_value(p, scope)

        return offset_set(on, index, right)
    }
}

fn offset_get_func(p: Parser, on: Value) Func {
    let class = on.class
    let func : ?Func = null
    if isset(class) {
        func = class.offset
    }
    if !isset(func) : p.error("Type: " + on.rett + " has no '[]' get offset function")
    return func
}

fn offset_set_func(p: Parser, on: Value) Func {
    let class = on.class
    let func : ?Func = null
    if isset(class) {
        func = class.offset_set
    }
    if !isset(func) : p.error("Type: " + on.rett + " has no '[]' set offset function")
    return func
}

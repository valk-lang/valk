
fn parse_offset_value(p: Parser, scope: Scope, on: Value) Value {
    // 
    let func = offset_get_func(p, on)
    let fptr = vgen_func_ptr(func)
    let argvs = Array[Value].new()
    argvs.push(on)
    read_func_call_arg_values(p, scope, fptr, "]", argvs)

    let t = p.tok(true, true, false)
    let is_assign = p.word_is("=")
    
    if !is_assign {
        let get_call = vgen_func_call(p.build, p.get_ds(), fptr, argvs)
        // Error handling
        let info = fptr.rett.get_func_info()
        if info.can_error {
            if p.has_error_handler_ahead() {
                get_call = value_error_handling(p, scope, get_call, info)
            } else {
                let altv = vgen_empty_value(get_call.rett)
                get_call = vgen_error_handler(scope, get_call, altv, true)
            }
        }
        //
        return get_call
    }

    let setfunc = offset_assign_func(p, on)
    let last_arg = setfunc.args.get(setfunc.args.length - 1) ! p.error("Missing $offset_assign value argument")

    t = p.tok(true, true)

    p.set_suggest(last_arg.type)
    let right = read_value(p, scope)
    p.pop_suggest()

    right = right.try_convert(p.get_ds(), last_arg.type)
    last_arg.type.compat_check(right.rett, p)

    let set_values = argvs.copy()
    set_values.push(right)

    let set_fptr = vgen_func_ptr(setfunc)
    let set_call = vgen_func_call(p.build, p.get_ds(), set_fptr, set_values)

    let info = set_fptr.rett.get_func_info()
    if info.can_error {
        set_call = vgen_error_code_reset(set_call)
        set_call.rett = type_void(p.build)
    }

    return set_call
}

fn offset_get_func(p: Parser, on: Value) Func {
    let class = on.rett.class
    let func : ?Func = null
    if isset(class) {
        func = class.offset
    }
    if !isset(func) : p.error("Type: " + on.rett + " has no '[]' get offset function")
    return func
}

fn offset_assign_func(p: Parser, on: Value) Func {
    let class = on.rett.class
    let func : ?Func = null
    if isset(class) {
        func = class.offset_assign
    }
    if !isset(func) : p.error("Type: " + on.rett + " has no '[]' offset assign function")
    return func
}


fn stage_class_sizes(b: Build) {

    let class_count : uint = 0
    each b.units as unit {
        class_count += unit.classes.length
    }

    let total : uint = 0
    while total < class_count {
        let found : uint = 0
        each b.units as unit {
            each unit.classes as class {
                if class.size > 0 : continue
                class_determine_size(class) ! continue
                found++
            }
        }
        if found == 0 {
            b.error("Cannot determine the size of all classes. Reason: recursive property inline type dependencies.")
        }
        total += found
    }
}

fn class_determine_size(class: Class) !unable {
    let props = class.props
    let size : uint = 0
    each props as name, prop {
        let prop_size = prop.type.size()
        if prop_size == 0 : throw unable
        size += prop_size
    }
    class.size = size
}

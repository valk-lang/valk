
fn ir_value(ir: IR, v: Value) String {
    if !v.ir_value_cached {
        v.ir_value = ir_value_resolve(ir, v)
        v.ir_value_cached = true
        v.ir_block = ir.block().name
    }
    return v.ir_value
}

fn ir_value_resolve(ir: IR, v: Value) String {

    let vt = v.type
    let b = ir.build

    let before = v.before
    if isset(before) {
        ir_tokens(ir, before)
    }
    let pre = v.pre_value
    if isset(pre) {
        ir_value(ir, pre)
    }

    if vt == v_wrap {
        let val = v.value1
        if !isset(val) : ir.error("Misssing IR copy value (bug)")
        return ir_value(ir, val)
    }
    if vt == v_decl {
        let decl = v.decl
        if !isset(decl) : ir.error("Missing decl (bug)")
        if !decl.is_mut {
            return decl.is_arg ? decl.ir_name : decl.ir_imut_value
        }
        return ir_load(ir, decl.ir_name, ir_type(decl.type))
    }
    if vt == v_global {
        let g = v.global
        if !isset(g) : ir.error("Missing global in ir_value() (bug)")
        let type = g.type
        if !isset(type) : ir.error("Missing global type in ir_value() (bug)")
        //
        let irva = ir_value_assign(ir, v)
        if type.load_by_ref() : return irva
        return ir_load(ir, irva, ir_type(type))
    }
    if vt == v_int {
        return "" + v.int
    }
    if vt == v_float {
        return "" + v.float
    }
    if vt == v_string {
        let body = v.string.@cast(String)
        let str = ir_string(ir, body)
        return ir_gep(ir, str, 8)
    }
    if vt == v_prop {
        // let on = v.value1.@cast(Value)
        let prop = v.prop.@cast(Prop)
        // let ir_on = ir_value(ir, on)
        ir_com(ir, "Read prop: " + prop.name)
        // let gep = ir_gep(ir, ir_on, prop.offset)
        let gep = ir_value_assign(ir, v)
        let res = ir_load(ir, gep, ir_type(v.rett))
        if prop.type.is_gc() {
            let type_uint = b.valk_type("type", "uint")
            let type_ptr = b.valk_type("type", "ptr")
            res = ir_cast(ir, res, type_ptr, type_uint)
            res = ir_op(ir, res, -2, op_bit_and, type_uint)
            res = ir_cast(ir, res, type_uint, type_ptr)
        }

        return res
    }
    if vt == v_func_ptr {
        let func = v.func.@cast(Func)
        return ir_func_ptr(ir, func)
    }
    if vt == v_func_call {
        let on = v.value1.@cast(Value)
        let info = on.rett.func_info.@cast(FuncInfo)
        let values = v.values.@cast(Array[Value])
        let ir_on = ir_value(ir, on)
        let ir_values = array[String]{}
        each values as val {
            ir_values.push(ir_value(ir, val))
        }
        return ir_call(ir, ir_on, info, ir_values)
    }
    if vt == v_multi_return {
        let values = v.values
        if !isset(values) : ir.error("Missing IR multi values (bug)")
        let result = "-multi-value-"
        let has_value = false
        each values as val {
            let r = ir_value(ir, val)
            if !has_value {
                has_value = true
                result = r
            }
        }
        return result
    }
    if vt == v_grouped_values {
        let values = v.values
        if !isset(values) : ir.error("Missing IR grouped values (bug)")
        each values as val {
            ir_value(ir, val)
        }
        return "-grouped-values-"
    }
    if vt == v_ptrv {
        let gep = ir_value_assign(ir, v)
        return ir_load(ir, gep, ir_type(v.rett))
    }
    if vt == v_ptr_of {
        let on = v.value1.@cast(Value)
        return ir_value_assign(ir, on)
    }
    if vt == v_ptr_offset {
        let on = v.value1.@cast(Value)
        let offset = v.value2.@cast(Value)
        let ir_on = ir_value(ir, on)
        let ir_offset = ir_value(ir, offset)
        return ir_gep_typed(ir, ir_on, "i8", ir_offset, "i64")
    }
    if vt == v_assign {
        let left = v.value1.@cast(Value)
        let right = v.value2.@cast(Value)
        let ir_right = ir_value(ir, right)
        let ir_left = ir_value_assign(ir, left)
        ir_store(ir, ir_left, ir_right, ir_type(left.rett))
        return ir_right
    }
    if vt == v_declare {
        let decl = v.decl.@cast(Decl)
        let value = v.value1.@cast(Value)
        let irv = ir_value(ir, value)
        ir_store(ir, decl.ir_name, irv, ir_type(decl.type))
        return irv
    }

    if vt == v_memcpy {
        let from = v.value1.@cast(Value)
        let to = v.value2.@cast(Value)
        let len = v.value3.@cast(Value)
        ir_memcpy(ir, ir_value(ir, from), ir_value(ir, to), ir_value(ir, len))
        return "-mem-copy-"
    }
    if vt == v_op {
        let l = ir_value(ir, v.value1.@cast(Value))
        let r = ir_value(ir, v.value2.@cast(Value))
        let op = v.int
        return ir_op(ir, l, r, op, v.rett)
    }
    if vt == v_atomic_op {
        let l = ir_value_assign(ir, v.value1.@cast(Value))
        let r = ir_value(ir, v.value2.@cast(Value))
        let op = v.int
        return ir_op(ir, l, r, op, v.rett, true)
    }
    if vt == v_compare {
        let left = v.value1.@cast(Value)
        let right = v.value2.@cast(Value)
        let l = ir_value(ir, left)
        let r = ir_value(ir, right)
        let op = v.int
        return ir_compare(ir, op, l, r, left.rett)
    }
    if vt == v_and_or {
        // Left
        let left = v.value1.@cast(Value)
        let l = ir_value(ir, left)
        let b_current = ir.block()
        // Right
        let b_right = ir.func().new_block("and_or_next")
        ir.set_block(b_right)
        let right = v.value2.@cast(Value)
        let r = ir_value(ir, right)
        //
        let b_last = ir.block()
        let op = v.int
        ir.set_block(b_current)
        return ir_and_or(ir, op, b_current, l, b_right, r, b_last)
    }
    if vt == v_incr || vt == v_decr {
        let before = v.bool1
        let val = v.value1.@cast(Value)
        let aval = ir_value_assign(ir, val)
        let ir_val = ir_load(ir, aval, ir_type(val.rett))
        let sum = ir_op(ir, ir_val, "1", vt == v_incr ? op_add : op_sub, val.rett)
        ir_store(ir, aval, sum, ir_type(val.rett))
        return before ? sum : ir_val
    }
    if vt == v_bool {
        let val = v.bool1
        return val ? "1" : "0"
    }
    if vt == v_cast {
        let val = v.value1.@cast(Value)
        return ir_cast(ir, ir_value(ir, val), val.rett, v.rett)
    }
    if vt == v_null {
        return "null"
    }
    if vt == v_class_init {
        let class = v.rett.class
        if !isset(class) : ir.error("Missing IR class in v_class_init (bug)")
        let values = v.values_map
        if !isset(values) : ir.error("Missing IR values in v_class_init (bug)")
        let init = v.value1.@cast(Value)
        return ir_class_init(ir, class, init, values)
    }
    if vt == v_export_symbol {
        let str = v.string
        return "@" + str
    }
    if vt == v_not {
        let ir_val = ir_value(ir, v.value1.@cast(Value))
        let code = ir.code()
        let var = ir.var()
        code.append_str("  ");
        code.append_str(var);
        code.append_str(" = xor i1 ");
        code.append_str(ir_val);
        code.append_str(", true\n");
        return var
    }
    if vt == v_buffer {
        ir_com(ir, "v_buffer_value")
        let val = v.value1.@cast(Value)
        let ir_val = ir_value(ir, val)
        let decl = v.decl.@cast(Decl)
        // ir_com(ir, "set v_buffer_value value")
        ir_store(ir, decl.ir_name, ir_val, ir_type(decl.type))
        return ir_val
    }
    if vt == v_stack_alloc {
        let func = ir.func()
        return func.alloca(v.int.@cast(uint))
    }
    if vt == v_this_or_that {
        let cond = v.value1.@cast(Value)
        let v1 = v.value2.@cast(Value)
        let v2 = v.value3.@cast(Value)
        let type = v.rett
        let ir_cond = ir_value(ir, cond)
        let b1 = ir.func().new_block("this_or_that_v1")
        let b2 = ir.func().new_block("this_or_that_v2")
        let ba = ir.func().new_block("this_or_that_after")
        ir_cond_jump(ir, ir_cond, b1, b2)

        ir.set_block(b1)
        let ir_v1 = ir_value(ir, v1)
        b1 = ir.block()
        ir_jump(ir, ba)

        ir.set_block(b2)
        let ir_v2 = ir_value(ir, v2)
        b2 = ir.block()
        ir_jump(ir, ba)

        ir.set_block(ba)
        let res = ir_phi(ir, ir_v1, b1.name, ir_v2, b2.name, ir_type(type))
        ir_com(ir, "this/that result: " + res)
        return res
    }
    if vt == v_phi {
        let v1 = v.value1
        let v2 = v.value2
        if !isset(v1) : ir.error("Missing IR phi value 1 (bug)")
        if !isset(v2) : ir.error("Missing IR phi value 2 (bug)")
        let irv1 = ir_value(ir, v1)
        let irv2 = ir_value(ir, v2)
        return ir_phi(ir, irv1, v1.ir_block, irv2, v2.ir_block, ir_type(v.rett))
    }
    if vt == v_inline_scope {
        let sub = v.scope1
        if !isset(sub) : ir.error("Missing IR inline scope (bug)")
        ir_ast(ir, sub)
        return "-inline-scope-"
    }
    if vt == v_cond {
        let condv = v.value1
        let val = v.value2
        let velse = v.value3
        if !isset(condv) : ir.error("Missing IR condition value (bug)")
        if !isset(val) : ir.error("Missing IR condition final value (bug)")

        let cond = ir_value(ir, condv)
        let b_err = ir.func().new_block("v_cond")
        let b_else : ?IRBlock = null 
        if isset(velse) : b_else = ir.func().new_block("v_cond_else")
        let b_after = ir.func().new_block("v_cond_after")

        ir_cond_jump(ir, cond, b_err, b_else ?? b_after)
        ir.set_block(b_err)
        ir_value(ir, val)
        ir_jump(ir, b_after)

        if isset(b_else) && isset(velse) {
            ir.set_block(b_else)
            ir_value(ir, velse)
            ir_jump(ir, b_after)
        }

        ir.set_block(b_after)
        return "-conditional-value-"
    }
    if vt == v_err_code_reset {
        let val = v.value1
        if !isset(val) : ir.error("Missing IR error ignore value (bug)")
        // Resolve value
        let res = ir_value(ir, val)
        // Clear code
        let g_code = ir.build.valk_global("core", "error_code")
        let code_type = g_code.get_type()
        ir_store(ir, ir_value_assign(ir, vgen_global(g_code)), "0", ir_type(code_type))
        return res
    }

    if vt == v_altv || vt == v_altv_break {
        let is_break = vt == v_altv_break
        let on = v.value1
        if !isset(on) : ir.error("Missing IR alternative on-value (bug)")

        let ir_on = ir_value(ir, on)
        let ir_cmp = ir_compare(ir, op_eq, ir_on, "null", on.rett)

        let current = ir.block()
        let b1 = ir.func().new_block(is_break ? "altv_break" : "altv")
        let b2 = ir.func().new_block("altv_after")

        ir_cond_jump(ir, ir_cmp, b1, b2)
        ir.set_block(b1)

        if is_break {
            let sub = v.scope1
            if !isset(sub) : ir.error("Missing IR alternative scope (bug)")
            ir_ast(ir, sub)
            ir.set_block(b2)
            return ir_on;
        } else {
            let alt = v.value2
            if !isset(alt) : ir.error("Missing IR alternative value (bug)")
            let ir_alt = ir_value(ir, alt)
            b1 = ir.block()
            ir_jump(ir, b2)
            ir.set_block(b2)
            return ir_phi(ir, ir_on, current.name, ir_alt, b1.name, ir_type(v.rett))
        }
    }
    if vt == v_vscope {

        let sub = v.scope1.@cast(Scope)
        let after = ir.func().new_block("vscope_after")
        let block_before = ir.block_vscope_after
        ir.block_vscope_after = after

        ir_ast(ir, sub)

        ir.block_vscope_after = block_before;
        ir.set_block(after)

        let retv = "void"
        let values = v.values
        if isset(values) {
            let v1 = values.get(0) !? null
            if isset(v1) {
                retv = ir_value(ir, v1)
            }
        }

        return retv
    }
    if vt == v_setjmp {
        let on = v.value1
        if !isset(on) : ir.error("Missing IR setjmp value (bug)")
        let buf = ir_value(ir, on)
        let framep = ir.var()
        let stackp = ir.var()
        let result = ir.var()
        let code = ir.code()

        if ir.build.target.os == "win" {
            // Frame pointer
            code.append_str("  ")
            code.append_str(framep)
            code.append_str(" = tail call ptr @llvm.frameaddress(i32 0)\n")
            let s1 = ir_gep(ir, buf, 0)
            ir_store(ir, s1, framep, "ptr")

            // Stack pointer
            code.append_str("  ")
            code.append_str(stackp)
            code.append_str(" = tail call ptr @llvm.stacksave()\n")
            let s2 = ir_gep(ir, buf, 2 * ir.build.ptr_size.@cast(int))
            ir_store(ir, s2, stackp, "ptr")

            // Call setjmp
            code.append_str("  ")
            code.append_str(result)
            code.append_str(" = tail call i32 @llvm.eh.sjlj.setjmp(ptr ");
            code.append_str(buf);
            code.append_str(")\n");
        } else {
            code.append_str("  ")
            code.append_str(result)
            code.append_str(" = call i32 @_setjmp(ptr ");
            code.append_str(buf);
            code.append_str(")\n");
        }
        return result
    }
    if vt == v_longjmp {
        let on = v.value1;
        if !isset(on) : ir.error("Missing IR longjmp value (bug)")
        let buf = ir_value(ir, on)
        let code = ir.code()

        if ir.build.target.os == "win" {
            code.append_str("  call void @llvm.eh.sjlj.longjmp(ptr ");
            code.append_str(buf);
            code.append_str(")\n");
            code.append_str("unreachable\n");
        } else {
            code.append_str("  call void @longjmp(ptr ");
            code.append_str(buf);
            code.append_str(", i32 1)\n");
            code.append_str("unreachable\n");
        }
        return "-long-jump-"
    }

    ir.error("Unhandled IR value (bug), type: " + v.type)
    // return "-value-"
}

fn ir_value_assign(ir: IR, v: Value) String {
    if !v.ir_value_asign_cached {
        v.ir_value_assign = ir_value_assign_resolve(ir, v)
        v.ir_value_asign_cached = true
    }
    return v.ir_value_assign
}

fn ir_value_assign_resolve(ir: IR, v: Value) String {
    let vt = v.type

    let before = v.before
    if isset(before) {
        ir_tokens(ir, before)
    }

    if vt == v_decl {
        let decl = v.decl
        if !isset(decl) : ir.error("Missing decl (bug)")
        return decl.ir_name
    }
    if vt == v_prop {
        let on = v.value1.@cast(Value)
        let prop = v.prop.@cast(Prop)
        let ir_on = ir_value(ir, on)
        return ir_gep(ir, ir_on, prop.offset)
    }
    if vt == v_ptrv {
        let on = v.value1.@cast(Value)
        let offset = v.value2.@cast(Value)
        let type = v.rett
        let ir_on = ir_value(ir, on)
        let ir_rett_type = ir_type(type)
        let ir_offset = ir_value(ir, offset)
        let ir_offset_type = ir_type(offset.rett)
        return ir_gep_typed(ir, ir_on, ir_rett_type, ir_offset, ir_offset_type)
    }
    if vt == v_global {
        let g = v.global
        if !isset(g) : ir.error("Missing global (bug)")
        ir_check_global_definition(ir, g)
        return g.ir_name
    }

    ir.error("IR: Unknown assignable value: " + vt)
}

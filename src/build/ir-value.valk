

fn ir_value(ir: IR, v: Value) String {

    let vt = v.type

    if vt == v_decl {
        let decl = v.decl
        if !isset(decl) : ir.error("Missing decl (bug)")
        return ir_load(ir, decl.ir_name, ir_type(decl.type))
    }
    if vt == v_int {
        return "" + v.int
    }
    if vt == v_prop {
        let on = v.value1 @as Value
        let prop = v.prop @as Prop
        let ir_on = ir_value(ir, on)
        return ir_gep(ir, ir_on, prop.offset)
    }
    if vt == v_func_ptr {
        let func = v.func @as Func
        ir_check_func_definition(ir, func)
        return "@" + func.export_name
    }
    if vt == v_func_call {
        let on = v.value1 @as Value
        let info = on.rett.func_info @as FuncInfo
        let values = v.values @as Array[Value]
        let ir_on = ir_value(ir, on)
        return ir_call(ir, ir_on, info, values)
    }

    return "-value-"
}



use valk:utils

struct IRFunc {
    ir: IR
    func: Func
    blocks: Array[IRBlock] (array[IRBlock]{})
    block_start: IRBlock
    block_code: IRBlock
    blockc: uint (0)

    static fn new(ir: IR, func: Func) IRFunc {
        let irf = IRFunc {
            ir: ir
            func: func
            block_start: IRBlock.new("start")
            block_code: IRBlock.new("code")
        }
        ir.functions.push(irf)
        irf.blocks.push(irf.block_start)
        irf.blocks.push(irf.block_code)
        return irf
    }

    fn new_block(name: String) IRBlock {
        let block = IRBlock.new(name + "_" + this.blockc++)
        this.blocks.push(block)
        return block
    }

    fn last_block() IRBlock {
        return this.blocks.get(0) ! this.ir.build.error("Missing blocks in IRFunc (bug)")
    }

    fn build() {
        this.write_func_code()
        this.func.ir_code = this.final_ir()
        this.wipe()
    }

    fn write_func_code() {

        ir_write_func_alloca(this.block_start.code, this.func)

        this.ir.set_func(this)

        ir_ast(this.ir, this.func.scope)
    }

    fn final_ir() String {
        let buffer = utils:ByteBuffer.new(1024)

        ir_write_func_definition(buffer, this.func, false)

        let blocks = this.blocks
        each blocks as i, block {
            if i == 1 {
                buffer.append_str("  br label %");
                buffer.append_str(block.name);
                buffer.append_str("\n");
            }
            buffer.append_str(block.name)
            buffer.append_str(":\n")
            buffer.append(block.code)
        }

        buffer.append_str("}\n\n")

        return buffer.to_string()
    }

    fn wipe() {
        this.blocks.clear()
    }

    fn alloca(size: uint) String {
        let var = this.ir.var()
        let code = this.block_start.code
        code.append_str("  ")
        code.append_str(var)
        code.append_str(" = alloca [")
        code.append_str(size)
        code.append_str(" x i8], align 8\n")
        return var
    }
}

fn ir_check_func_definition(ir: IR, func: Func) {
    if (func.from_header || func.unit != ir.unit) && !ir.unit.extern_functions.contains(func) {
        ir_write_func_definition(ir.code_func_defs, func, true)
        ir.unit.extern_functions.push(func)
    }
}

fn ir_write_func_definition(code: utils:ByteBuffer, func: Func, extern: bool) {

    code.append_str("; ")
    code.append_str(func.display_name)
    code.append_str("\n")
    code.append_str(extern ? "declare " : "define dso_local ")
    code.append_str(ir_type(func.rett_eax()))
    code.append_str(" @")
    code.append_str(func.export_name)
    code.append_str("(")

    let count = 0

    // Args
    let args = func.args
    each args as i, arg {
        if count > 0 : code.append_str(", ")
        let decl = arg.decl
        let arg_name : ?String = null
        if !extern {
            if decl.is_arg && decl.is_mut : arg_name = decl.ir_name + "_init"
            else: arg_name = decl.ir_name
        }
        ir_func_arg(code, decl.type, arg_name)
        count++
    }

    // Multi return
    let rdecls = func.rett_decls
    each rdecls as i, decl {
        if count > 0 : code.append_str(", ")
        ir_func_arg(code, decl.type, !extern ? decl.ir_name : null @as ?String)
        count++
    }

    // Infinite args
    if func.infinite_args {
        if count > 0 : code.append_str(", ")
        code.append_str("...")
    }

    if extern {
        code.append_str(")\n")
    } else {
        code.append_str(")")
        if func.inline {
            code.append_str(" alwaysinline")
        }
        code.append_str(" {\n")
    }
}


fn ir_func_arg(code: utils:ByteBuffer, type: Type, name: ?String) {
    code.append_str(ir_type(type))
    code.append_str(" noundef")
    if type.is_pointer && !type.nullable : code.append_str(" nonnull")

    if isset(name) {
        code.append_str(" ")
        code.append_str(name)
    }
}

fn ir_write_func_alloca(code: utils:ByteBuffer, func: Func) {
    let scope = func.scope
    let decls = scope.decls
    each decls as decl {
        if !decl.is_mut : continue
        if decl.is_gc : continue

        let type = ir_type(decl.type)

        code.append_str("  ")
        code.append_str(decl.ir_name)
        code.append_str(" = alloca ")
        code.append_str(type)
        code.append_str(", align 8\n")
        if decl.is_arg {
            code.append_str("  store ")
            code.append_str(type)
            code.append_str(" ")
            code.append_str(decl.ir_name)
            code.append_str("_init, ptr ")
            code.append_str(decl.ir_name)
            code.append_str(", align 8\n")
        }
    }
}

fn ir_write_func_gc_offsets(ir: IR, func: Func) {
    let scope = func.scope
    let decls = scope.decls
    let stack_adr = func.cache_stack_adr
    if !isset(stack_adr) : return

    let ir_stack_adr = ir_value(ir, stack_adr)
    let code = ir.code()

    code.append_str("; GC DECL OFFSETS\n")

    each decls as decl {
        if !decl.is_gc : continue
        if decl.is_arg && !decl.is_mut : continue

        code.append_str("  ")
        code.append_str(decl.ir_name)
        code.append_str(" = getelementptr i8, ptr ")
        code.append_str(ir_stack_adr)
        code.append_str(", i32 ")
        code.append_str(decl.offset * func.build.ptr_size)
        code.append_str("\n")

        if decl.is_arg {
            code.append_str("  store ")
            code.append_str(ir_type(decl.type))
            code.append_str(" ")
            code.append_str(decl.ir_name)
            code.append_str("_init, ptr ")
            code.append_str(decl.ir_name)
            code.append_str(", align 8\n")
        } else {
            code.append_str("  store ptr null, ptr ")
            code.append_str(decl.ir_name)
            code.append_str(", align 8\n")
        }
    }

    code.append_str("; GC DECL OFFSETS END\n")
}

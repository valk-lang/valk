
use valk:mem
use helper

class Parser {
    chunk: Chunk
    build: Build
    parent: ?Parser (null)
    func_: ?Func (null)
    // Content
    data: ptr
    len: uint
    i: uint
    line: uint
    col: uint
    // Result
    word_adr: ptr (null.@cast(ptr))
    word_len: uint (0)
    last_tok: int (0)
    last_char: u8 (0)
    // Compile macro
    cm_block: ?CmBlock (null)
    // Backup
    b_i: uint (0)
    b_line: uint (0)
    b_col: uint (0)
    // Backup2
    b2_i: uint (0)
    b2_line: uint (0)
    b2_col: uint (0)
    // Misc
    suggest_type: ?Type (null)
    suggest_type_prev: Array[?Type] (array[?Type]{})
    vscope_decls: ?Array[Decl] (null)
    // Bools
    imut_mode: bool (false)
    on_newline: bool (true)
    reading_coro: bool (false)
    loop_first_parse: bool (false)

    fn tok(allow_space: bool, allow_newline: bool, update: bool (true)) int {
        // Backup
        let i = this.i
        let line = this.line
        let col = this.col
        let word_start = i
        //
        let t = tok_end
        let word_end_offset: uint = 0
        // Chunk
        let len = this.len
        let data = this.data
        let on_newline = line == 1 && col == 1

        while true {
            // Detect end of file
            if this.i >= len {
                t = tok_end
                break
            }

            // Get byte
            let ch = @ptrv(data, u8, this.i++)
            this.col++

            // Invalid
            if ch > 126 {
                this.error("Parse error, unsupported character/byte: " + ch)
            }
            
            // Ignore chars
            if ch < 33 {
                if ch == ' ' || ch == '\r' || ch == '\t' {
                    if !allow_space {
                        this.i--
                        this.col--
                        t = tok_none
                        break
                    }
                    continue
                }
                if ch == '\n' {
                    if !allow_space || !allow_newline {
                        this.i--
                        this.col--
                        t = tok_none
                        break
                    }
                    on_newline = true
                    this.line++
                    this.col = 1
                    continue
                }
                this.error("Parse error, unsupported character/byte: " + ch)
            }

            // Comment
            if ch == '/' && @ptrv(data, u8, this.i) == '/' {
                // Skip
                while this.i < len {
                    if @ptrv(data, u8, this.i++) == '\n' : break
                }
                on_newline = true
                this.line++
                this.col = 1
                continue
            }

            word_start = this.i - 1

            // Word
            if ch.is_alpha() || ch == '_' || ch == '@' || ch == '$' {
                this.skip_word()
                t = ch == '@' ? tok_at_word : tok_word
                t = ch == '$' ? tok_flag : t
                break
            }

            // Number
            if ch.is_number() {
                t = this.skip_number()
                break
            }

            // String
            if ch == '\"' {
                this.skip_string()
                t = tok_string
                // word_start++
                // word_end_offset = 1
                break
            }

            // Char
            if ch == '\'' {
                ch = @ptrv(data, u8, this.i++)
                this.col++
                if ch == '\'' {
                    this.error("Missing character between single quotes")
                }
                if ch == '\\' {
                    ch = @ptrv(data, u8, this.i++)
                    this.col++
                    if ch == 'r' : ch = '\r'
                    else if ch == 'n' : ch = '\n'
                    else if ch == 't' : ch = '\t'
                    else if ch == 'b' : ch = '\b'
                    else if ch == 'f' : ch = '\f'
                    else if ch == 'v' : ch = '\v'
                    else if ch == 'a' : ch = '\a'
                    else if ch == 'e' : ch = 27
                }
                if ch == 0 {
                    this.error("Unexpected end of file")
                }
                this.last_char = ch
                t = tok_char
                ch = @ptrv(data, u8, this.i++)
                if ch != '\'' {
                    this.error("Missing single quote, found: '" + ch.to_ascii_string() + "'")
                }
                // word_start++
                // word_end_offset = 1
                break
            }

            // Signs
            let next = @ptrv(data, u8, this.i)
            if ch == '<' && (next == '{' || next == '<' || next == '=') {
                this.i++
                this.col++
            } else if ch == '>' && (next == '>' || next == '=') {
                this.i++
                this.col++
            } else if ch == '=' && (next == '=' || next == '>') {
                this.i++
                this.col++
            } else if ch == '!' && (next == '=' || next == '?') {
                this.i++
                this.col++
            } else if ch == '+' && (next == '=' || next == '+') {
                this.i++
                this.col++
            } else if ch == '-' && (next == '=' || next == '-' || next == '>') {
                this.i++
                this.col++
            } else if ch == '%' && (next == '=') {
                this.i++
                this.col++
            } else if ch == '*' && (next == '=') {
                this.i++
                this.col++
            } else if ch == '/' && (next == '=') {
                this.i++
                this.col++
            } else if ch == '?' && (next == '?' || next == '!') {
                this.i++
                this.col++
            } else if ch == '&' && (next == '&') {
                this.i++
                this.col++
            } else if ch == '|' && (next == '|') {
                this.i++
                this.col++
            }

            // Sign
            t = tok_sign
            break
        }

        this.word_adr = data + word_start
        this.word_len = this.i - word_start - word_end_offset
        this.last_tok = t
        if t == tok_none || t == tok_end {
            this.word_len = 0
        }

        this.on_newline = on_newline
        if !update {
            this.i = i
            this.line = line
            this.col = col
        }

        return t
    }

    fn get_fc() Fc !not_found {
        let p : ?Parser = this
        while isset(p) {
            let fc = p.chunk.fc
            if isset(fc) : return fc
            p = p.parent
        }
        throw not_found
    }

    fn func() Func {
        return this.func_ ?! this.error("Missing function object in parser (bug)")
    }
    fn func_or() Func !none {
        return this.func_ ?! throw none
    }

    fn backup() {
        this.b_i = this.i
        this.b_col = this.col
        this.b_line = this.line
    }
    fn restore() {
        this.i = this.b_i
        this.col = this.b_col
        this.line = this.b_line
    }
    fn backup2() {
        this.b2_i = this.i
        this.b2_col = this.col
        this.b2_line = this.line
    }
    fn restore2() {
        this.i = this.b2_i
        this.col = this.b2_col
        this.line = this.b2_line
    }

    fn char(offset: uint) u8 {
        return @ptrv(this.data + offset, u8, this.i)
    }
    fn next_if(ch: u8, offset: uint (0)) bool {
        if @ptrv(this.data + offset, u8, this.i) == ch {
            this.i++
            if ch == '\n' {
                this.line++
                this.col = 1
            } else {
                this.col++
            }
            return true
        }
        return false
    }

    fn clone_chunk() Chunk {
        let chunk = this.chunk
        return Chunk {
            build: chunk.build
            fc: chunk.fc
            content: chunk.content
            i: this.i
            line: this.line
            col: this.col
        }
    }
    fn set_chunk(chunk: Chunk) {
        this.chunk = chunk
        this.data = chunk.content.data
        this.len = chunk.content.bytes
        this.i = chunk.i
        this.line = chunk.line
        this.col = chunk.col
    }

    static fn new(chunk: Chunk, parent: ?Parser) Parser {
        return Parser{
            chunk: chunk
            build: chunk.build
            parent: parent
            data: chunk.content.data
            len: chunk.content.bytes
            i: chunk.i
            line: chunk.line
            col: chunk.col
        }
    }

    fn new_sub_parser(chunk: Chunk) Parser {
        let p = Parser.new(chunk, this)
        p.suggest_type = this.suggest_type
        p.func_ = this.func_
        p.loop_first_parse = this.loop_first_parse
        return p
    }

    fn skip_whitespace(newlines: bool) {
        let len = this.len
        let data = this.data

        while this.i < len {
            let ch = @ptrv(data, u8, this.i++)
            this.col++
            if ch.is_space_or_tab() : continue
            if newlines && ch.is_newline() : continue
            this.i--
            this.col--
            break
        }
    }

    fn skip_word() {
        let len = this.len
        let data = this.data

        while this.i < len {
            let ch = @ptrv(data, u8, this.i++)
            this.col++
            if !ch.is_alpha_numeric() && ch != '_' {
                this.i--
                this.col--
                break
            }
        }
    }
    fn skip_number() int {
        let len = this.len
        let data = this.data
        let first = true
        let t = tok_int
        let prev_ch = @ptrv(data, u8, this.i - 1)

        while this.i < len {
            let ch = @ptrv(data, u8, this.i++)
            this.col++
            if first && prev_ch == '0' {
                first = false
                if ch == 'x' {
                    t = tok_hex
                    continue
                }
                if ch == 'c' {
                    t = tok_octal
                    continue
                }
            }
            if ch == '_' : continue
            if t == tok_hex {
                if !ch.is_hex() {
                    this.i--
                    this.col--
                    break
                }
            } else if t == tok_octal {
                if !ch.is_octal() {
                    this.i--
                    this.col--
                    break
                }
            } else if t == tok_int {
                if ch == '.' && @ptrv(data, u8, this.i).is_number() {
                    t = tok_float
                    continue
                }
                if !ch.is_number() {
                    this.i--
                    this.col--
                    break
                }
            } else if t == tok_float {
                if !ch.is_number() {
                    this.i--
                    this.col--
                    break
                }
            }
        }
        return t
    }
    fn skip_string() {
        let len = this.len
        let data = this.data

        while this.i < len {
            let ch = @ptrv(data, u8, this.i++)
            this.col++
            if ch == '\\' {
                this.i++
                this.col++
                continue
            }
            if ch == '"' {
                break
            }
        }
    }

    fn skip_type() {
        let t = this.tok(true, true)
        let skip_id = false

        if this.word_is("imut") {
            this.skip_type()
            return
        }

        if this.sign_is("(") {
            this.skip_body(")")
            return
        }
        if this.sign_is("[") {
            this.skip_body("]")
            return
        }
        if this.sign_is("?") {
            this.skip_type()
            return
        }
        if this.sign_is("<") {
            this.skip_type()
            this.expect(">", true, false)
            return
        }
        if this.word_is("fn") || this.word_is("fnRef") {
            this.expect("(", false, false)
            this.skip_body(")")
            this.expect("(", false, false)
            this.skip_body(")")

            // TODO : skip errors
            // t = this.tok(true, true, false)
            // while this.sign_is("!") {
            //     t = this.tok(true, true)
            //     t = this.tok(false, false)
            //     if t != tok_word : this.error("Invalid error name: " + p.word())
            //     t = this.tok(true, true, false)
            // }

            return
        }

        // if this.sign_is("?") : t = this.tok(false, false)
        // else if this.sign_is("<") {
        //     this.skip_type()
        //     this.expect(">", true, false)
        //     //
        //     t = this.tok(false, false, false)
        //     skip_id = true
        // }

        if !skip_id {
            if t != tok_word : this.error("Invalid type syntax")

            t = this.tok(false, false, false)
            if this.sign_is(":") {
                this.tok(false, false)
                t = this.tok(false, false)
                if t != tok_word : this.error("Invalid type syntax")
                t = this.tok(false, false, false)
            }
        }
        if this.sign_is("[") {
            this.tok(false, false)
            this.skip_body("]")
        }
    }
    fn skip_body(close_sign: String) {
        let depth = 1
        let scope_ends = array[String]{}
        scope_ends.push(close_sign)
        while true {
            let t = this.tok(true, true)
            if t == tok_end : break
            if t == tok_sign {
                if this.on_newline && this.word_is("#") {
                    parse_skip_compile_macro(this)
                    continue
                }
                if this.word_is("(") || this.word_is("{") || this.word_is("<{") || this.word_is("[") {
                    depth++
                    if this.word_is("(") : scope_ends.push(")")
                    else if this.word_is("<{") || this.word_is("{") : scope_ends.push("}")
                    else if this.word_is("[") : scope_ends.push("]")
                    continue
                }
                if this.word_is(")") || this.word_is("}") || this.word_is("]") {
                    depth--
                    let expect = scope_ends.pop_last() !? "???"
                    if !this.word_is(expect) {
                        this.error("Incorrect scope ending. Expected '" + expect + "', Found: '" + this.word() + "'")
                    }
                    if depth == 0 : break
                    continue
                }
            }
        }
        if depth != 0 {
            this.error("Missing scope closing character, expected to find: '" + close_sign + "'")
        }
    }

    fn skip_bytes(amount: uint) {
        let data = this.data
        while amount-- > 0 {
            let ch = @ptrv(data, u8, this.i++)
            this.col++
            if ch == '\n' {
                this.line++
                this.col = 1
            }
        }
    }

    fn word() String {
        return String.make_from_ptr(this.word_adr, this.word_len)
    }
    fn word_is(word: String) bool {
        if this.word_len != word.bytes : return false
        return mem:equal(this.word_adr, word.data, word.bytes)
    }
    fn sign_is(sign: String) bool {
        if this.last_tok != tok_sign : return false
        return this.word_is(sign)
    }
    fn read_word(allow_space: bool, allow_newline: bool) String {
        let t = this.tok(allow_space, allow_newline)
        if t != tok_word : this.error("Invalid identifier name: '" + this.word() + "'")
        return this.word()
    }
    fn read_name_like(allow_space: bool, allow_newline: bool) String {
        let t = this.tok(allow_space, allow_newline)
        if t != tok_word && t != tok_at_word && t != tok_flag : this.error("Invalid identifier name: '" + this.word() + "'")
        return this.word()
    }
    fn next_word_is(word: String, allow_space: bool, allow_newline: bool, update: bool) bool {
        this.tok(allow_space, allow_newline, false)
        if this.word_is(word) {
            if update : this.tok(allow_space, allow_newline, true)
            return true
        }
        return false
    }
    fn integer_value() uint !nan {
        let t = this.last_tok
        let number = this.word().replace("_", "")
        if t == tok_int {
            return number.to_uint() ! throw nan
        } else if t == tok_hex {
            return number.hex_to_uint() ! throw nan
        } else if t == tok_octal {
            return number.octal_to_uint() ! throw nan
        }
        throw nan
    }

    fn float_value() f64 !nan {
        let number = this.word()
        return helper:str_to_float(number) ! throw nan
    }

    fn read_types(scope: Scope, end_sign: String, is_rett: bool) Array[Type] {
        let types = array[Type]{}
        let has_void = false
        let i = 0
        while true {
            let t = this.tok(true, false, false)
            if this.sign_is(end_sign) { 
                this.tok(true, false)
                break
            }
            i++
            let type = read_type(this, scope, true)
            if type.is_void() {
                if !is_rett || (has_void && i > 1) : this.error("Unexpected 'void' type")
                has_void = true
            } else {
                types.push(type)
            }
            // Next
            t = this.tok(true, true)
            if this.sign_is(",") : continue
            if this.sign_is(end_sign) : break
            this.error_token()
        }
        return types
    }

    fn read_values(scope: Scope, end_sign: String) Array[Value] {
        let values = array[Value]{}
        while true {
            let t = this.tok(true, true, false)
            if this.sign_is(end_sign) { 
                this.tok(true, true)
                break
            }
            let v = read_value(this, scope)
            values.push(v)
            // Next
            t = this.tok(true, true)
            if this.sign_is(",") : continue
            if this.sign_is(end_sign) : break
            this.error_token()
        }
        return values
    }

    fn read_values_type_checked(scope: Scope, types: Array[Type], end_sign: String) Array[Value] {
        let i : uint = 0
        let values = array[Value]{}
        while true {
            let t = this.tok(true, true, false)
            if this.sign_is(end_sign) { 
                this.tok(true, true)
                break
            }
            let type = types.get(i++) ! this.error("Too many values, expected values: " + types.length)
            // Read value
            this.set_suggest(type)
            let v = read_value(this, scope)
            this.pop_suggest()
            // Type check
            v = v.try_convert(this, scope, type)
            type.compat_check(v.rett, this)
            // Add to result
            values.push(v)
            // Next
            t = this.tok(true, true)
            if this.sign_is(",") : continue
            if this.sign_is(end_sign) : break
            this.error_token()
        }

        if values.length < types.length : this.error("Missing values, expected values: " + types.length)

        return values
    }

    // Expects
    fn expect(word: String, allow_space: bool, allow_newline: bool) {
        this.tok(allow_space, allow_newline)
        if !this.word_is(word) :
            this.error("Expected token: '" + word + "', instead of: '" + this.word() + "'")
    }
    fn expect2(word: String, word2: String, allow_space: bool, allow_newline: bool, update: bool (true)) {
        this.tok(allow_space, allow_newline, update)
        if !this.word_is(word) && !this.word_is(word2) :
            this.error("Expected token: '" + word + "' or '" + word2 + "', instead of: '" + this.word() + "'")
    }
    fn expect3(word: String, word2: String, word3: String, allow_space: bool, allow_newline: bool) {
        this.tok(allow_space, allow_newline)
        if !this.word_is(word) && !this.word_is(word2) && !this.word_is(word3) :
            this.error("Expected token: '" + word + "', '" + word2 + "' or '" + word3 + "', instead of: '" + this.word() + "'")
    }
    fn expect_many(words: Array[String], allow_space: bool, allow_newline: bool) {
        this.tok(allow_space, allow_newline)
        each words as word {
            if this.word_is(word) {
                return
            }
        }

        let options = ""
        each words as word, i {
            if i > 0 : options += ", "
            options += "'" + word + "'"
        }
        this.error("Unexpected token: '" + this.word() + "', expected: " + options)
    }
    fn next_matches_text(text: String) bool {
        let bytes_left = this.len - this.i
        if bytes_left < text.bytes : return false
        if !mem:equal(this.data + this.i, text.data, text.bytes) : return false
        return true
    }
    fn expect_name(allow_space: bool, allow_newline: bool) {
        let t = this.tok(allow_space, allow_newline)
        if t != tok_word : this.error("Expected a valid identifier name ([a-Z_]{1}[a-Z0-9_]*), found: '" + this.word() + "'")
    }
    fn expect_string(allow_space: bool, allow_newline: bool) {
        let t = this.tok(allow_space, allow_newline)
        if t != tok_string : this.error("Expected a string between doubles quotes, found: '" + this.word() + "'")
    }
    fn expect_newline() {
        this.tok(true, true, false)
        if !this.on_newline : this.error("Expected a newline")
    }

    // fn next_is_type(allow_space: bool, allow_newline: bool) bool {
    //     let start = this.clone_chunk()
    //     let t = this.tok(allow_space, allow_newline)
    //     this.set_chunk(start)
    // }

    fn has_error_handler_ahead() bool {
        this.tok(true, false, false)
        return this.word_is("!") || this.word_is("!?") || this.word_is("_") || this.word_is("->")
    }

    fn ignore_imut() bool {
        let chunk = this.chunk
        let fc = chunk.fc
        if isset(fc) : return fc.ignore_imut
        return false
    }

    // Misc
    static fn tok_has_word(tok: int) bool {
        return tok == tok_word || tok == tok_int || tok == tok_float || tok == tok_hex || tok == tok_octal || tok == tok_sign
    }

    fn tok_to_str(tok: int) String {
        if Parser.tok_has_word(tok) : return this.word()
        return "(token: " + tok + ")"
    }

    fn set_suggest(type: Type) {
        this.suggest_type_prev.push(this.suggest_type)
        this.suggest_type = type
    }
    fn pop_suggest() {
        this.suggest_type = this.suggest_type_prev.pop_last() !? null
    }

    // Error handler
    fn error_token() $exit {
        this.error("Unexpected token: '" + this.word() + "'")
    }
    fn error_eof() $exit {
        this.error("Unexpected end of file")
    }
    fn bug(msg: String) $exit {
        this.error(msg + " (BUG)")
    }
    fn error(msg: String) $exit {

        let chunk = this.chunk
        let content = chunk.content
        let data = this.data
        let len = this.len
        let func = this.func_
        let fc = this.chunk.fc

        if !isset(fc) {
            print("\n=====================\n")
            print(content.trim("\n"))
            print("\n=====================\n")
        }

        let p: ?Parser = this
        let chain = array[Parser]{}
        while isset(p) {
            chain.push(p)
            p = p.parent
        }

        if chain.length > 1 {
            println("------------------------------------")
            println("# Trace:")
            let len = chain.length
            while len-- > 0 {
                let p = chain.get(len) ! break
                let chunk = p.chunk
                println("# File: " + chunk.path() + " | Line: " + chunk.line)
            }
        }

        this.i--
        this.col--

        println("------------------------------------")
        println("# Parser error")
        println("# File: " + (isset(fc) ? fc.path : "<generated-code>"))
        println("# Line: " + this.line + " | Col: " + this.col)
        if isset(func) : println("# Function: " + func.display_name)
        println("# Error: " + msg)

        let i = this.i
        let starti = i
        let endi = i
        while starti > 0 && @ptrv(data, u8, starti - 1) != '\n' {
            starti--
        }
        while endi < len && @ptrv(data, u8, endi + 1) != '\n' {
            endi++
        }

        let before_len = i - starti
        if before_len > 15 {
            starti = i - 15
            before_len = 15
        }
        let after_len = 34 - before_len
        //
        let word_len = this.word_len
        if word_len > 1 {
            if word_len > 16 {
                word_len = 16
            }
            if word_len - 1 <= before_len {
                before_len -= word_len - 1
            } else {
                before_len = 0
            }
        }

        let line_len = endi - starti + 1
        let line = String.make_from_ptr(data + starti, line_len)
        println("------------------------------------")
        println(line)

        let c : uint = before_len
        while c-- > 1 {
            print("-")
        }
        if before_len > 0 : print(" ")
        c = word_len
        while c-- > 1 {
            print("^")
        }
        print("^ ")
        c = after_len
        while c-- > 0 {
            print("-")
        }
        print("\n")

        exit(1)
    }

    fn get_file() String !generated {
        let chunk = this.chunk
        let fc = chunk.fc
        if isset(fc) {
            return fc.path
        }
        throw generated
    }
}

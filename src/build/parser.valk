
struct Parser {
    chunk: Chunk
    parent: ?Parser (null)
    // Content
    data: ptr
    len: uint
    i: uint
    line: uint
    col: uint
    // Word
    word_adr: ptr (null @as ptr)
    word_len: uint (0)
    // Scope ends
    scope_ends: Array[u8] (array[u8]{})
    // Bools
    on_newline: bool (true)

    fn tok(allow_space: bool, allow_newline: bool, update: bool (true)) int {
        // Backup
        let i = this.i
        let line = this.line
        let col = this.col
        //
        let t = tok_end
        let word_len: uint = 0
        // Chunk
        let chunk = this.chunk
        let len = this.len
        let data = this.data
        let on_newline = false
        let is_word = false
        let is_number = false

        while this.i < len {
            let ch = @ptrv(data, u8, this.i++)
            this.col++
            
            // Ignore chars
            if ch < 33 {
                if ch == ' ' || ch == '\r' || ch == '\t' : continue
                if ch == '\n' {
                    on_newline = true
                    this.line++
                    this.col = 1
                    continue
                }
                this.error("Parse error, unknown byte: " + ch)
            }

            // Comment
            if ch == '/' && @ptrv(data, u8, this.i) == '/' {
                // Skip
                while this.i < len {
                    if @ptrv(data, u8, this.i++) == '\n' : break
                }
                on_newline = true
                this.line++
                this.col = 1
                continue
            }

            // Word
            if ch.is_alpha() || ch == '_' {
                let start = this.i - 1
                this.word_adr = data + start
                this.skip_word()
                this.word_len = this.i - start
                t = tok_word
                break
            }

            // Number

            // String

            // Char

            // Symbols
            if ch == '(' {
                if update : this.scope_ends.push(')')
                t = tok_bracket_open
                break
            }
            if ch == '[' {
                if update : this.scope_ends.push(']')
                t = tok_sq_bracket_open
                break
            }
            if ch == '{' {
                if update : this.scope_ends.push('}')
                t = tok_curly_open
                break
            }
            if ch == ')' {
                let ch_close = this.scope_ends.pop() ! this.error("Unexpected closing bracket: ')'")
                if ch != ch_close : this.error("Incorrect closing character: found ')', but expected '" + ch_close.to_ascii_string() + "'")
                t = tok_bracket_close
                break
            }
            if ch == ']' {
                let ch_close = this.scope_ends.pop() ! this.error("Unexpected closing bracket: ']'")
                if ch != ch_close : this.error("Incorrect closing character: found ']', but expected '" + ch_close.to_ascii_string() + "'")

                t = tok_sq_bracket_close
                break
            }
            if ch == '}' {
                let ch_close = this.scope_ends.pop() ! this.error("Unexpected closing bracket: '}'")
                if ch != ch_close : this.error("Incorrect closing character: found '}', but expected '" + ch_close.to_ascii_string() + "'")
                t = tok_curly_close
                break
            }

            this.error("Parse error, unexpected byte: " + ch)
        }

        this.on_newline = on_newline
        if !update {
            this.i = i
            this.line = line
            this.col = col
        }

        return t
    }

    fn clone_chunk() Chunk {
        let chunk = this.chunk
        return Chunk {
            fc: chunk.fc
            content: chunk.content
            i: chunk.i
            line: chunk.line
            col: chunk.col
        }
    }

    static fn create(chunk: Chunk, parent: ?Parser) Parser {
        return Parser{
            chunk: chunk
            parent: parent
            data: chunk.content.data_ptr()
            len: chunk.content.bytes
            i: chunk.i
            line: chunk.line
            col: chunk.col
        }
    }

    fn create_sub_parser(chunk: Chunk) Parser {
        return Parser.create(chunk, this)
    }

    fn skip_word() {
        let len = this.len
        let data = this.data

        while this.i < len {
            let ch = @ptrv(data, u8, this.i++)
            this.col++
            if !ch.is_alpha() && ch != '_' {
                this.i--
                this.col--
                break
            }
        }
    }
    fn skip_func_args() {
    }
    fn skip_func_body() {
    }

    exit_fn error(msg: String) {
        println("# Line: " + this.line + " | Col: " + this.col)
        println("# Error: " + msg)
        exit(1)
    }

    fn check_scope_end() {
        if this.scope_ends.length > 0 {
            let end_tok = this.scope_ends.pop() ! return
            this.error("Missing scope ending: '" + end_tok.to_ascii_string() + "'")
        }
    }

    static fn tok_to_str(tok: int) String {
        if tok == tok_bracket_close : return ")"
        if tok == tok_sq_bracket_close : return "]"
        if tok == tok_curly_close : return "}"
        return ""
    }
}

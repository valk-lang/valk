
fn ir_define_vtable(ir: IR, class: Class) {

    if class.type != ct_class : return

    // let name = "@" + class.vtable_export_name()
    // let b = ir.build

    // if ir.defined_symbols.contains(name) : return
    // else : ir.defined_symbols.push(name)

    // let extern = class.unit != ir.unit
    // let vt = class.vtable

    // let count = b.vtable_index_count
    // let list = array[?Func]{}
    // while count-- > 0 {
    //     list.push(null)
    // }
    // each vt as name, func {
    //     ir_check_func_definition(ir, func)
    //     let index = b.vtable_indexes.get(name) ! continue
    //     list.set(index, func) _
    // }

    // let code = ir.code_global_defs

    // code.append_str(name)
    // code.append_str(" = ")
    // code.append_str(extern ? "external " : "dso_local ")
    // code.append_str("global [")
    // code.append_str(b.vtable_index_count)
    // code.append_str(" x ptr]")
    // if !extern {
    //     code.append_str(" [")
    //     each list as i, func {
    //         if i > 0 : code.append_str(", ")
    //         code.append_str("ptr ")
    //         if isset(func) {
    //             code.append_str("@")
    //             code.append_str(func.export_name)
    //         } else {
    //             code.append_str("null")
    //         }
    //     }
    //     code.append_str("]")
    // }
    // code.append_str(", align 8\n")
}
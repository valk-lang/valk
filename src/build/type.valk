
struct Type {
    type: int
    build: Build
    array_of: ?Type (null)
    array_size: uint (0)
    func_info: ?FuncInfo (null)
    class: ?Class (null)
    is_pointer: bool (false)
    nullable: bool (false)
    is_signed: bool (false)

    static fn new(b: Build, type: int) Type {
        return Type {
            type: type
            build: b
        }
    }

    fn size() uint {
        if this.is_pointer {
            return this.build.ptr_size
        }
        let class = this.class
        if isset(class) {
            return class.size
        }
        return 0
    }

    fn clone() Type {
        let type = Type.new(this.build, this.type)
        type.array_of = this.array_of
        type.array_size = this.array_size
        type.func_info = this.func_info
        type.class = this.class
        type.is_pointer = this.is_pointer
        type.nullable = this.nullable
        type.is_signed = this.is_signed
        return type
    }

    fn is_gc() bool {
        return this.type == ty_class && this.is_pointer
    }

    fn _string() String {
        return this.str()
    }
    fn str() String {
        return "<cannot-convert-type-to-string>"
    }

    fn compat_check(type: Type, p: Parser) {
        if !this.compat(type) : p.error("Type '" + type + "' is not compatible with '" + this + "'")
    }
    fn compat(type: Type) bool {
        return true
    }
}

struct FuncInfo {
    args: Array[Type]
    rett: Type
    errors: Map[u32]
}


fn read_type(p: Parser, scope: Scope, allow_newline: bool (true)) Type {

    let t = p.tok(true, allow_newline)

    if t == tok_sign {
        if p.sign_is("?") {
            let type = read_type(p, scope)
            if !type.is_pointer {
                p.error("Cannot make type '" + type + "' nullable. This is only allowed for pointer types such as classes & structs.")
            }
            if !type.nullable {
                type = type.clone()
                type.nullable = true
            }
            return type
        }
    }

    if t == tok_word {
        if p.word_is("void") {
            return type_void(p.build)
        }
        let id = Id.read_full(p, p.word())
        let idf = scope.find_or_err(p, id)
        return handle_type_idf(p, idf)
    }

    p.error("Unknown type")
}

fn handle_type_idf(p: Parser, idf: Idf) Type {

    let for = idf.for

    if for == idf_type {
        let type = idf.type
        if isset(type) : return type
    }
    if for == idf_class {
        let class = idf.class
        if isset(class) : return type_class(p.build, class)
    }

    p.error("Not a type")
}

fn type_void(b: Build) Type {
    return Type.new(b, ty_void)
}
fn type_undefined(b: Build) Type {
    return Type.new(b, ty_undefined)
}
fn type_func(func: Func) Type {
    let t = Type.new(func.build, ty_func)
    t.func_info = func.info()
    return t
}
fn type_string(b: Build) Type {
    let class = b.valk_class("type", "String")
    return type_class(b, class)
}
fn type_class(b: Build, class: Class) Type {
    let ct = class.type
    let tt = ty_class
    if ct == ct_class : tt = ty_class
    else if ct == ct_struct : tt = ty_struct
    else if ct == ct_int : tt = ty_int
    else if ct == ct_float : tt = ty_float
    else if ct == ct_pointer : tt = ty_ptr
    else : b.error("Unknown type in function type_class (compiler bug)")
    return Type {
        type: tt
        build: b
        class: class
    }
}


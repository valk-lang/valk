
use helper

struct Type {
    type: int
    build: Build
    array_of: ?Type (null)
    array_size: uint (0)
    func_info: ?FuncInfo (null)
    class: ?Class (null)
    is_pointer: bool (false)
    nullable: bool (false)
    is_signed: bool (false)

    static fn new(b: Build, type: int) Type {
        return Type {
            type: type
            build: b
        }
    }

    fn size() uint {
        if this.is_pointer {
            return this.build.ptr_size
        }
        let array_of = this.array_of
        if isset(array_of) {
            return array_of.size() * this.array_size
        }
        let class = this.class
        if isset(class) {
            return class.size
        }
        return 0
    }

    fn clone() Type {
        let type = Type.new(this.build, this.type)
        type.array_of = this.array_of
        type.array_size = this.array_size
        type.func_info = this.func_info
        type.class = this.class
        type.is_pointer = this.is_pointer
        type.nullable = this.nullable
        type.is_signed = this.is_signed
        return type
    }

    fn is_void() bool {
        return this.type == ty_void
    }
    fn is_gc() bool {
        return this.type == ty_class && this.is_pointer
    }

    fn _string() String {
        return this.str()
    }
    fn str() String {
        return "<cannot-convert-type-to-string>"
    }

    fn compat_check(type: Type, p: Parser) {
        if !this.compat(type) : p.error("Type '" + type + "' is not compatible with '" + this + "'")
    }
    fn compat(type: Type) bool {
        return true
    }

    fn get_nullable() Type {
        if this.nullable : return this
        if !this.is_pointer : return this
        let type = this.clone()
        type.nullable = true
        return type
    }
}

struct FuncInfo {
    args: Array[Type]
    rett: Type
    errors: Map[u32]
    infinite_args: bool (false)
}


fn read_type(p: Parser, scope: Scope, allow_newline: bool (true)) Type {

    let t = p.tok(true, allow_newline)

    if t == tok_sign {
        if p.sign_is("?") {
            let type = read_type(p, scope, false)
            if !type.is_pointer {
                p.error("Cannot make type '" + type + "' nullable. This is only allowed for pointer types such as classes & structs.")
            }
            return type.get_nullable()
        } else if p.sign_is("<") {
            let type = read_type(p, scope, false)
            if type.nullable || type.is_pointer {
                type = type.clone()
                type.nullable = false
                type.is_pointer = false
            }
            p.expect(">", true, false)
            return type
        } else if p.sign_is("[") {
            t = p.tok(true, false)
            let size = p.integer_value() ! p.error("Invalid array size syntax")
            p.expect("x", true, false)
            let sub = read_type(p, scope, false)
            let type = Type.new(p.build, ty_array)
            type.array_of = sub
            type.array_size = size
            p.expect("]", true, false)
            return type
        }
    }

    if t == tok_word {
        if p.word_is("void") {
            return type_void(p.build)
        }
        if p.word_is("fn") {
            // Arg types
            p.expect("(", false, false)
            let types = array[Type]{}
            while true {
                let t = p.tok(true, false, false)
                if p.sign_is(")") { 
                    p.tok(true, false)
                    break
                }
                let type = read_type(p, scope, true)
                types.push(type)
                // Next
                t = p.tok(true, true)
                if p.sign_is(",") : continue
                if p.sign_is(")") : break
                p.error_token()
            }
            // Return type
            p.expect("(", false, false)
            p.tok(true, false, false)
            let rett = type_void(p.build)
            if !p.sign_is(")") {
                rett = read_type(p, scope, false)
            }
            p.expect(")", true, false)
            // Errors
            let errors = map[u32]{}
            p.tok(true, false, false)
            while p.sign_is("!") {
                p.tok(true, false)
                let t = p.tok(false, false)
                if t != tok_word : p.error("Invalid error name syntax: " + p.word())
                let name = p.word()
                let val = helper:ctxhash_u32(name)
                if errors.has(name) : p.error("Duplicate error name: " + name)
                if errors.has_value(val) : p.error("It seems that 2 different error names are resolving to the same hash, try picking a different error name: " + name)
                errors.set(name, val)
                // Next
                p.tok(true, false, false)
            }
            // Result
            let info = FuncInfo {
                args: types
                rett: rett
                errors: errors
            }
            let type = Type.new(p.build, ty_func)
            type.func_info = info
            type.is_pointer = true
            return type
        }
        let id = Id.read_full(p, p.word())
        let idf = scope.find_or_err(p, id)
        return handle_type_idf(p, idf)
    }

    p.error("Unknown type: " + p.word())
}

fn handle_type_idf(p: Parser, idf: Idf) Type {

    let for = idf.for

    if for == idf_type {
        let type = idf.type
        if isset(type) : return type
    }
    if for == idf_class {
        let class = idf.class
        if isset(class) : return class.get_type()
    }

    p.error("Not a type")
}

fn type_void(b: Build) Type {
    return Type.new(b, ty_void)
}
fn type_undefined(b: Build) Type {
    return Type.new(b, ty_undefined)
}
fn type_func(func: Func) Type {
    let t = Type.new(func.build, ty_func)
    t.func_info = func.info()
    return t
}
fn type_string(b: Build) Type {
    return b.valk_class("type", "String").get_type()
}
fn type_int(b: Build) Type {
    return b.valk_class("type", "int").get_type()
}


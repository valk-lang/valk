
use helper

class Type {
    type: int
    build: Build
    sub_type: ?Type (null)
    array_size: uint (0)
    func_info: ?FuncInfo (null)
    errors: ?Map[ERR_TYPE] (null)
    class: ?Class (null)
    group: ?Group (null)
    enum: ?Enum (null)
    sub_types: ?Array[Type] (null)
    custom_name: String ("")
    is_pointer: bool (false)
    nullable: bool (false)
    is_signed: bool (false)
    is_imut: bool (false)
    null_overwrite: bool (false)

    static fn new(b: Build, type: int) Type {
        return Type {
            type: type
            build: b
        }
    }

    fn size() uint {
        if this.type == ty_any : return this.build.ptr_size
        if this.is_pointer {
            return this.build.ptr_size
        }
        if this.type == ty_array {
            let array_of = this.sub_type
            if isset(array_of) {
                return array_of.size() * this.array_size
            }
        }
        let class = this.class
        if isset(class) {
            return class.size
        }
        return 0
    }
    fn bit_size() uint {
        if this.type == ty_bool && !this.is_pointer {
            return 1
        }
        return this.size() * 8
    }

    fn largest_property_offset() uint {
        let ptr_size = this.build.ptr_size
        let offset = this.size()
        if !this.is_pointer {
            if this.is_structural_type() {
                let class = this.class
                if isset(class) {
                    offset = 0
                    each class.props as prop {
                        let size = prop.type.size()
                        if size > offset : offset = size
                    }
                }
            }
            if this.is_array_type() {
                let sub_type = this.sub_type
                if isset(sub_type) {
                    offset = sub_type.size()
                }
            }
        }
        if offset > ptr_size : offset = ptr_size
        return offset
    }

    fn clone() Type {
        let type = Type.new(this.build, this.type)
        type.sub_type = this.sub_type
        type.array_size = this.array_size
        type.func_info = this.func_info
        type.class = this.class
        type.group = this.group
        type.is_pointer = this.is_pointer
        type.nullable = this.nullable
        type.is_signed = this.is_signed
        type.is_imut = this.is_imut
        return type
    }

    fn is_void() bool {
        return this.type == ty_void
    }
    fn is_undefined() bool {
        return this.type == ty_undefined
    }
    fn is_none() bool {
        return this.type == ty_none
    }
    fn is_multi() bool {
        return this.type == ty_multi
    }
    fn is_gc() bool {
        if this.type == ty_closure && this.is_pointer {
            return true
        }
        if this.type == ty_class && this.is_pointer {
            let class = this.class
            if !isset(class) : panic("Type has no class: " + this + " (bug)")
            return true
            // return class.size > 0
        }
        return false
    }
    fn is_ptr() bool {
        return this.type == ty_ptr
    }
    fn is_int() bool {
        return this.type == ty_int && !this.is_pointer
    }
    fn is_float() bool {
        return this.type == ty_float && !this.is_pointer
    }
    fn is_number() bool {
        return (this.type == ty_int || this.type == ty_float) && !this.is_pointer
    }
    fn is_bool() bool {
        return this.type == ty_bool && !this.is_pointer
    }
    fn is_struct_type() bool {
        return this.type == ty_struct
    }
    fn is_class_type() bool {
        return this.type == ty_class
    }
    fn is_structural_type() bool {
        return this.type == ty_struct || this.type == ty_class
    }
    fn is_array_type() bool {
        return this.type == ty_array
    }
    fn is_inline_type() bool {
        return !this.is_pointer && (this.type == ty_array || this.type == ty_struct)
    }
    fn is_pointer_for(type: Type) bool {
        return this.compat(type.get_pointer())
    }
    fn allow_math() bool {
        return this.type == ty_ptr || this.is_number()
    }
    fn fits_eax() bool {
        if this.is_inline_type() : return false
        return true
    }
    fn load_by_ref() bool {
        return this.type == ty_array
    }
    fn is_func_ref() bool {
        return this.type == ty_func
    }
    fn is_closure() bool {
        return this.type == ty_closure
    }

    fn str() String $to {
        return this.to_str(false)
    }
    fn to_str(full: bool) String {
        let t = this.type
        let e = this.enum
        if isset(e) {
            this.enum = null
            let result = e.display_name + "(" + this.to_str(full) + ")"
            this.enum = e
            return result
        }
        if t == ty_any : return this.custom_name
        if t == ty_none : return "none"
        if t == ty_void : return "void"
        if t == ty_undefined : return "@undefined"
        if t == ty_error : return "<error>"
        if t == ty_error_item : return "<error-value>"
        if t == ty_promise : return "<promise>" // TODO

        let result = ""
        if t == ty_func || t == ty_closure {
            let is_closure = t == ty_closure
            let str = is_closure ? "fn(" : "fnRef("
            let info = this.func_info
            if isset(info) {
                each info.args as type, i {
                    if i > 0 : str += ", "
                    str += type.to_str(full)
                }
            }
            str += ")("
            if isset(info) {
                each info.rett_types as type, i {
                    if i > 0 : str += ", "
                    str += type.to_str(full)
                }
            }
            str += ")"
            result = str
        }
        if t == ty_multi {
            let sub_types = this.sub_types
            if !isset(sub_types) : return "<multi-type> (missing type information)"
            let str = "("
            each sub_types as type, i {
                if i > 0 : str += ", "
                str += type.to_str(full)
            }
            str += ")"
            result = str
        }
        //
        let imut_class = false
        if t == ty_array {
            let of = this.sub_type;
            let size = this.array_size;
            if !isset(of) : return "[???]"
            if size > 1 : result = "[" + of + " x " + size + "]"
            else : result = "[" + of + "]"
        } else {
            let class = this.class
            if isset(class) {
                let b = this.build
                result = full ? class.export_name : class.display_name
                if !full {
                    let fc = class.fc
                    if isset(fc) {
                        let nsc = fc.nsc
                        let main = b.nsc_main()
                        if nsc != main && nsc.pkc != b.pkc_valk() {
                            result = nsc.name + ":" + result
                            if nsc.pkc != main.pkc {
                                result = nsc.pkc.name + ":" + result
                            }
                        }
                    }
                }

                if class.is_imut {
                    imut_class = true
                }
            }
        }
        if t == ty_ptr {
            let sub = this.sub_type
            if isset(sub) {
                if sub.type == ty_array {
                    result += sub
                } else {
                    result += "[" + sub + "]"
                }
            }
        }
        if !this.is_pointer && (t == ty_struct || t == ty_class) {
            result = "<" + result + ">"
        }
        if result.bytes == 0 : return "<cannot-convert-type-to-string> (compiler-type: " + t + ")"
        if this.nullable : result = "?" + result
        if this.is_imut && !imut_class : result = "imut " + result
        return result
    }

    fn compat_check(type: Type, p: ?Parser) {
        let ignore_imut = false
        if isset(p) : ignore_imut = p.ignore_imut()
        // if this.is_imut != type.is_imut && !ignore_imut {
        //     if type.is_imut {
        //         p.error("Trying to assign an immutable value (" + type + ") to a mutable type (" + this + ").")
        //     } else {
        //         p.error("Trying to assign a mutable value (" + type + ") to an immutable type (" + this + ").")
        //     }
        // }

        if !this.compat(type, ignore_imut) {
            // println(this.type + " <> " + type.type)
            // println(this.is_pointer + " <> " + type.is_pointer)
            // println(this.nullable + " <> " + type.nullable)
            if isset(p) : p.error("Incompatible types. Passing a '" + type + "' value to a '" + this + "' type")
            this.build.error("Incompatible types. Passing a '" + type + "' value to a '" + this + "' type")
        }
    }
    fn compat(type: Type, ignore_imut: bool (false)) bool {
        let this_class = this.class
        let type_class = type.class
        if isset(this_class) && this_class.mode_for_class != null : this_class = this_class.mode_for_class
        if isset(type_class) && type_class.mode_for_class != null : type_class = type_class.mode_for_class

        if this.type == ty_any || type.type == ty_any : return true // For docs
        if !this.nullable && type.nullable : return false
        if this.is_pointer != type.is_pointer : return false
        // Raw pointers
        if this.type == ty_ptr {
            let sub = this.sub_type
            if !type.is_pointer : return false
            if isset(sub) {
                let sub2 = type.get_inline()
                if sub.type == ty_array && sub2.type != ty_array {
                    sub2 = type_array(this.build, sub2, 1)
                }
                return sub.compat(sub2, ignore_imut)
            }
            return true
        }
        // Error types
        if this.type == ty_error || this.type == ty_error_item {
            if type.type != ty_error && type.type != ty_error_item : return false
            let this_errors = this.errors
            let type_errors = type.errors
            if !isset(this_errors) || !isset(type_errors) : return false
            each type_errors as code, name {
                if !this_errors.has(name) : return false
            }
            return true
        }
        //
        if this.type != type.type : return false
        if this.type == ty_int || this.type == ty_float {
            // Numbers
            if this.size() != type.size() : return false
            if this.is_signed != type.is_signed : return false
        } else {
            // Not a number
            if this_class != type_class : return false
            if this.is_imut != type.is_imut && !ignore_imut : return false
        }
        // Arrays
        if this.type == ty_array {
            let sub1 = this.sub_type
            let sub2 = type.sub_type
            if !isset(sub1) || !isset(sub2) : return false
            if this.array_size > 0 && type.array_size > 0 && this.array_size > type.array_size : return false
            return sub1.compat(sub2, ignore_imut)
        }
        // Enums
        let enu = this.enum
        if isset(enu) : if this.enum != type.enum {
            return false
        }
        // Multi types
        if this.is_multi() {
            let sub1 = this.sub_types
            let sub2 = type.sub_types
            if !isset(sub1) || !isset(sub2) : return false
            each sub1 as subt1, i {
                let subt2 = sub2.get(i) ! return false
                if !subt1.compat(subt2, ignore_imut) : return false
            }
        }
        return true
    }

    fn get_non_nullable() Type {
        if !this.nullable : return this
        if !this.is_pointer : return this
        let type = this.clone()
        type.nullable = false
        return type
    }

    fn get_nullable() Type {
        if this.nullable : return this
        if !this.is_pointer : return this
        let type = this.clone()
        type.nullable = true
        return type
    }
    fn get_pointer() Type {
        if (this.type == ty_struct || this.type == ty_class) && !this.is_pointer {
            let class = this.class
            if isset(class) : return class.get_type()
        }
        let type = this.build.valk_type("type", "ptr").clone()
        type.sub_type = this
        return type
    }
    fn get_inline() Type {
        if this.is_pointer {
            let tt = this.type
            if tt == ty_ptr {
                let sub = this.sub_type
                if isset(sub) : return sub
            } else if tt == ty_struct || tt == ty_class {
                let res = this.clone()
                res.nullable = false
                res.is_pointer = false
                return res
            }
        }
        return this
    }
    fn get_imut(is_imut: bool) Type {
        if is_imut {
            return get_imut_type(this)
        }
        return get_mut_type(this)
    }
    fn get_imut_or_async() Type {
        let class = this.class
        if isset(class) {
            if class.is_async {
                return this
            }
        }
        return get_imut_type(this)
    }
    fn is_imut_or_async() bool {
        if !this.is_structural_type() : return true
        let class = this.class
        if isset(class) {
            if class.is_async {
                return true
            }
        }
        return this.is_imut
    }

    fn is_imut_compatible() bool {
        if !this.is_structural_type() : return true
        let class = this.class
        if !isset(class) : return true
        return class.is_imut
    }
    fn get_func_info() FuncInfo {
        let info = this.func_info
        if isset(info) : return info
        this.build.error("Missing function information (compiler bug)")
    }
    fn match_nullable(with: Type) Type {
        if this.is_pointer && with.nullable {
            return this.get_nullable()
        } else if (this.is_multi() && with.is_multi()) {
            let sub1 = this.sub_types
            let sub2 = with.sub_types
            let list = Array[Type].new()
            if isset(sub1) && isset(sub2) {
                each sub1 as subt1, i {
                    let subt2 = sub2.get(i) ! {
                        list.push(subt1)
                        continue;
                    }
                    list.push(subt1.match_nullable(subt2))
                }
                return type_multi(this.build, list)
            }
        }
        return this
    }

    fn unroll() Array[Type] {
        if this.is_multi() {
            let types = this.sub_types
            if isset(types) : return types
        }
        let res = Array[Type].new()
        if !this.is_void() && !this.is_none() && !this.is_undefined() {
            res.push(this)
        }
        return res
    }

    fn fits_intv(intv: int, signed: bool) bool {
        if this.type != ty_int : return false
        if signed && intv < 0 {
            if !this.is_signed : return false
            let min : int = 1 << (this.size() * 8 - 1).@cast(int)
            return min >= intv
        }

        let max : uint = 0
        max--
        max = max >> (size_of(uint) * 8 - this.size() * 8)
        if signed : max = max >> 1

        let uv = intv.@cast(uint)
        return uv == (uv & max)
    }
}


fn read_type(p: Parser, scope: Scope, allow_newline: bool (true), allow_multi: bool (false)) Type {

    let t = p.tok(true, allow_newline)

    if t == tok_word {
        if p.word_is("imut") {
            let type = read_type(p, scope, false)
            return type.get_imut(true)
        }
    }

    if t == tok_sign {
        if p.sign_is("?") {
            let type = read_type(p, scope, false)
            // if !type.is_pointer : p.error("Cannot make type '" + type + "' nullable. This is only possible for pointer types.")
            return type.get_nullable()
        } else if p.sign_is(".") {
            let s = p.suggest_type
            if !isset(s) : p.error("Using '.' but the compiler could not find a typehint for it")
            return s
        } else if p.sign_is("<") {
            let type = read_type(p, scope, false)
            type = type.get_inline()
            p.expect(">", true, false)
            return type
        } else if p.sign_is("[") {
            // Type
            let sub = read_type(p, scope, false)
            p.expect("x", true, false)
            // Size
            let sug = p.suggest_type
            p.suggest_type = p.build.valk_type("type", "uint")
            let vsize = read_value(p, scope)
            if vsize.type != v_int || vsize.rett.is_signed : p.error("Invalid integer size")
            p.suggest_type = sug
            let size = vsize.int.to(uint)
            if size == 0 : p.error("Array size must be larger than 0")
            //
            let type = Type.new(p.build, ty_array)
            type.sub_type = sub
            type.array_size = size
            p.expect("]", true, false)
            return type
        } else if allow_multi && p.sign_is("(") {
            // Multi type
            let types = Array[Type].new()
            while true {
                let t = p.tok(true, false, false)
                if p.word_is(")") || t == tok_none : break
                if types.length > 0 : p.expect2(",", ")", true, false)
                let type = read_type(p, scope, true)
                if type.is_void() : p.error("You cannot use 'void' in a multi-type")
                types.push(type)
            }
            p.expect(")", true, false)

            if types.length == 1 {
                let first = types.get(0) !? null
                if isset(first) : return first
            }

            return type_multi(p.build, types)
        }
    }

    if t == tok_word {
        if p.word_is("void") {
            return type_void(p.build)
        }
        if p.word_is("fnRef") || p.word_is("fn") {
            let is_closure = p.word_is("fn")
            // Arg types
            p.expect("(", false, false)
            let types = p.read_types(scope, ")", false)
            // Return type
            p.expect("(", false, false)
            let rett_types = p.read_types(scope, ")", true)
            // Errors
            let errors = Map[u32]{}
            p.tok(true, false, false)
            while p.sign_is("!") {
                p.tok(true, false)
                let t = p.tok(false, false)
                if t != tok_word : p.error("Invalid error name syntax: " + p.word())
                let name = p.word()
                let val = helper:ctxhash_u32(name)
                if errors.has(name) : p.error("Duplicate error name: " + name)
                if errors.has_value(val) : p.error("It seems that 2 different error names are resolving to the same hash, try picking a different error name: " + name)
                errors.set(name, val)
                // Next
                p.tok(true, false, false)
            }
            // Result
            let info = FuncInfo {
                args: types
                rett_types: rett_types
                errors: errors
                can_error: errors.length > 0
            }
            let type = Type.new(p.build, is_closure ? ty_closure : ty_func)
            type.func_info = info
            type.is_pointer = true
            return type
        }
        if p.word_is("typeof") {
            p.expect("(", false, false)
            let v = read_value(p, scope)
            p.expect(")", true, true)
            return v.rett
        }
        p.col -= p.word_len
        p.i -= p.word_len
        let idf = p.read_idf(scope, true, false)
        return handle_type_idf(p, scope, idf)
    }

    p.error("Unknown type: " + p.word())
}

fn handle_type_idf(p: Parser, scope: Scope, idf: Idf) Type {

    let for = idf.for

    if for == idf_type {
        let type = idf.type
        if isset(type) : return type
    }
    if for == idf_class {
        let class = idf.class
        if isset(class) {
            if class.is_generic_base : class = read_class_generic(p, scope, class)
            let type = class.get_type()

            if p.next_word_is("[", false, false, true) {
                type = type.clone()
                // let t = p.tok(true, false, false)
                // if t == tok_int {
                    // p.tok(true, false)

                // Type
                let sub = read_type(p, scope)
                let size : uint = 0
                // Size
                if p.next_word_is("x", true, false, true) {
                    let sug = p.suggest_type
                    p.suggest_type = p.build.valk_type("type", "uint")
                    let vsize = read_value(p, scope)
                    if vsize.type != v_int || vsize.rett.is_signed : p.error("Invalid integer size")
                    p.suggest_type = sug
                    size = vsize.int.to(uint)
                    if size == 0 : p.error("Array size must be larger than 0")
                }
                //
                p.expect("]", true, false)
                type.sub_type = type_array(p.build, sub, size)

                // } else {
                //     type.sub_type = read_type(p, scope)
                //     p.expect("]", true, false)
                // }
            }

            return type
        }
    }
    if for == idf_alias {
        let alias = idf.alias
        if isset(alias) {
            let for_idf = alias.for_idf
            if isset(for_idf) {
                return handle_type_idf(p, scope, for_idf)
            }
            let for_type = alias.for_type
            if isset(for_type) {
                return for_type
            }
        }
    }
    if for == idf_class_prop {
        let prop = idf.prop
        if !isset(prop) : p.bug("Missing property info for identifier")
        return prop.type
    }
    if for == idf_prop {
        let prop = idf.prop
        if !isset(prop) : p.bug("Missing property info for identifier")
        return prop.type
    }
    // TODO: Enums

    p.error("Not a type")
}

fn type_void(b: Build) Type {
    return Type.new(b, ty_void)
}
fn type_undefined(b: Build) Type {
    return Type.new(b, ty_undefined)
}
fn type_any(b: Build) Type {
    return Type.new(b, ty_any)
}
fn type_none(b: Build) Type {
    return Type.new(b, ty_none)
}
fn type_func(func: Func) Type {
    let t = Type.new(func.build, ty_func)
    t.func_info = func.info()
    t.is_pointer = true
    return t
}
fn type_func_info(b: Build, info: FuncInfo) Type {
    let t = Type.new(b, ty_func)
    t.func_info = info
    t.is_pointer = true
    return t
}
fn type_promise(b: Build, fi: FuncInfo) Type {
    let t = Type.new(b, ty_promise)
    t.func_info = fi
    t.is_pointer = true
    return t
}
fn type_closure(b: Build, fi: FuncInfo) Type {
    let t = Type.new(b, ty_closure)
    t.func_info = fi
    t.is_pointer = true
    return t
}
fn type_multi(b: Build, types: Array[Type]) Type {
    if types.length <= 1 {
        return types.get(0) !? type_void(b)
    }
    let t = Type.new(b, ty_multi)
    t.sub_types = types
    return t
}
fn type_valk(b: Build, name: String) Type {
    return b.valk_class("type", name).get_type()
}
fn type_string(b: Build) Type {
    return b.valk_class("type", "String").get_type()
}
fn type_int(b: Build) Type {
    return b.valk_class("type", "int").get_type()
}
fn type_uint(b: Build) Type {
    return b.valk_class("type", "uint").get_type()
}
fn type_float(b: Build) Type {
    return b.valk_class("type", "f64").get_type()
}
fn type_ptr(b: Build) Type {
    return b.valk_class("type", "ptr").get_type()
}
fn type_array(b: Build, array_of: Type, size: uint) Type {
    let type = Type.new(b, ty_array)
    type.sub_type = array_of
    type.array_size = size
    return type
}
fn type_number(b: Build, size: uint, is_float: bool, is_signed: bool) Type {
    let name : ?String = null
    if(is_float) {
        if size == 4 : name = "f32"
        else if size == 8 : name = "f64"
    } else {
        if size == 1 : name = is_signed ? "i8" : "u8"
        else if size == 2 : name = is_signed ? "i16" : "u16"
        else if size == 4 : name = is_signed ? "i32" : "u32"
        else if size == 8 : name = is_signed ? "i64" : "u64"
    }
    if isset(name) {
        return b.valk_class("type", name).get_type()
    }
    b.error("Cannot generate numeric type for size: " + size)
}

fn type_error(b: Build, errors: Map[ERR_TYPE]) Type {
    let type = Type.new(b, ty_error)
    type.errors = errors
    type.class = b.valk_class("type", "u32")
    return type
}
fn type_error_item(b: Build, name: String, val: ERR_TYPE) Type {
    let type = Type.new(b, ty_error_item)
    let errors = Map[ERR_TYPE].new()
    errors.set(name, val)
    type.errors = errors
    type.class = b.valk_class("type", "u32")
    return type
}

fn match_alt_value_types(t1: Type, t2: Type, return_void_if_not_compat: bool) Type !compat {
    if t2.nullable : t1 = t1.get_nullable()
    if t1.compat(t2) : return t1
    if return_void_if_not_compat : return type_void(t1.build)
    throw compat
}
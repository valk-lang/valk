
class Idf {
    for: int
    type: ?Type (null)
    value: ?Value (null)
    decl: ?Decl (null)
    func: ?Func (null)
    class: ?Class (null)
    global: ?Global (null)
    alias: ?Alias (null)
    trait: ?Trait (null)
    enum: ?Enum (null)
    macro: ?Macro (null)
    idf: ?Idf (null)
    macro_values: ?Array[Map[Idf]] (null)
    idf_group: ?Map[Idf] (null)
    prop: ?Prop (null)
    scope: ?Scope (null)
    location: ?Chunk (null)
    used: bool (false)

    static fn for_type(type: Type) Idf {
        return Idf {
            for: idf_type
            type: type
        }
    }

    static fn for_func(func: Func) Idf {
        return Idf {
            for: idf_func
            func: func
        }
    }

    static fn for_class(class: Class) Idf {
        return Idf {
            for: idf_class
            class: class
        }
    }

    static fn for_scope(scope: Scope) Idf {
        return Idf {
            for: idf_scope
            scope: scope
        }
    }

    static fn for_decl(decl: Decl) Idf {
        return Idf {
            for: idf_decl
            decl: decl
        }
    }

    static fn for_global(g: Global) Idf {
        return Idf {
            for: idf_global
            global: g
        }
    }

    static fn for_alias(alias: Alias) Idf {
        return Idf {
            for: idf_alias
            alias: alias
        }
    }

    static fn for_value(val: Value) Idf {
        return Idf {
            for: idf_value
            value: val
        }
    }

    static fn for_trait(trait: Trait) Idf {
        return Idf {
            for: idf_trait
            trait: trait
        }
    }

    static fn for_enum(enu: Enum) Idf {
        return Idf {
            for: idf_enum
            enum: enu
        }
    }

    static fn for_macro(m: Macro) Idf {
        return Idf {
            for: idf_macro
            macro: m
        }
    }
    static fn for_macro_values(values: Array[Map[Idf]]) Idf {
        return Idf {
            for: idf_macro_values
            macro_values: values
        }
    }

    static fn for_idf(idf: Idf) Idf {
        return Idf {
            for: idf_idf
            idf: idf
        }
    }

    static fn for_idf_group(idfs: Map[Idf]) Idf {
        return Idf {
            for: idf_idf_group
            idf_group: idfs
        }
    }

    static fn for_class_prop(prop: Prop) Idf {
        return Idf {
            for: idf_class_prop
            prop: prop
        }
    }

    static fn for_prop(prop: Prop, value: ?Value) Idf {
        return Idf {
            for: idf_prop
            prop: prop
            value: value
        }
    }

    fn get_decl() Decl {
        let item = this.decl
        if !isset(item) : build_error("Missing decl value (bug)")
        return item
    }
}

class Id {
    name: String
    parent: ?String (null)

    fn str() String $to {
        let parent = this.parent
        if isset(parent) : return parent + ":" + this.name
        return this.name
    }
}

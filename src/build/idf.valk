
struct Idf {
    for: int
    type: ?Type (null)
    value: ?Value (null)
    decl: ?Decl (null)
    func: ?Func (null)
    class: ?Class (null)
    global: ?Global (null)
    alias: ?Alias (null)
    trait: ?Trait (null)
    enum: ?Enum (null)
    macro: ?Macro (null)
    scope: ?Scope (null)

    static fn for_type(type: Type) Idf {
        return Idf {
            for: idf_type
            type: type
        }
    }

    static fn for_func(func: Func) Idf {
        return Idf {
            for: idf_func
            func: func
        }
    }

    static fn for_class(class: Class) Idf {
        return Idf {
            for: idf_class
            class: class
        }
    }

    static fn for_scope(scope: Scope) Idf {
        return Idf {
            for: idf_scope
            scope: scope
        }
    }

    static fn for_decl(decl: Decl) Idf {
        return Idf {
            for: idf_decl
            decl: decl
        }
    }

    static fn for_global(g: Global) Idf {
        return Idf {
            for: idf_global
            global: g
        }
    }

    static fn for_alias(alias: Alias) Idf {
        return Idf {
            for: idf_alias
            alias: alias
        }
    }

    static fn for_value(val: Value) Idf {
        return Idf {
            for: idf_value
            value: val
        }
    }

    static fn for_trait(trait: Trait) Idf {
        return Idf {
            for: idf_trait
            trait: trait
        }
    }

    static fn for_enum(enu: Enum) Idf {
        return Idf {
            for: idf_enum
            enum: enu
        }
    }

    static fn for_macro(m: Macro) Idf {
        return Idf {
            for: idf_macro
            macro: m
        }
    }

    fn get_decl() Decl {
        let item = this.decl
        if !isset(item) : build_error("Missing decl value (bug)")
        return item
    }
}

struct Id {
    ns: String
    pkg: ?String (null)
    build: Build

    static fn read(p: Parser, allow_space: bool, allow_newline: bool) Id {
        let pkg: ?String = null
        let ns = p.read_word(allow_space, allow_newline)
        if p.char(0) == ':' {
            let t = p.tok(false, false, true)
            pkg = ns
            ns = p.read_word(false, false)
        }
        return Id {
            ns: ns
            pkg: pkg
            build: p.build
        }
    }
    static fn read_full(p: Parser, ns: String) Id {
        let pkg: ?String = null
        if p.char(0) == ':' {
            let t = p.tok(false, false)
            pkg = ns
            ns = p.read_word(false, false)
        }
        return Id {
            ns: ns
            pkg: pkg
            build: p.build
        }
    }

    fn _string() String {
        let pkg = this.pkg
        if isset(pkg) : return pkg + ":" + this.ns
        return this.ns
    }
}

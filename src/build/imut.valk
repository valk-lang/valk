
fn get_mut_type(type: Type) Type {
    if type.is_structural_type() : return type
    let class = type.class
    if !isset(class) : return type
    if !class.is_imut : return type

    let mclass = class.mut_class
    if !isset(mclass) : return type
    let t = type.clone()
    t.class = mclass
    return t
}

fn get_imut_type(type: Type) Type {
    if !type.is_structural_type() : return type
    let class = type.class
    if !isset(class) : return type
    if class.is_imut : return type

    let imut_class = get_imut_class(class)
    let t = type.clone()
    t.class = imut_class
    return t
}


fn get_imut_class(class: Class) Class {

    let _iclass = class.imut_class
    if isset(_iclass) : return _iclass

    let u = class.unit

    let iclass = u.new_class(class.fc, class.act, class.name, class.type, null, class.chunk)
    iclass.name = "imut_" + class.name
    iclass.export_name = "imut_" + class.export_name
    iclass.display_name = "imut " + class.display_name
    iclass.chunk = class.chunk
    iclass.mut_class = class
    iclass.is_imut = true
    class.imut_class = iclass

    class_parse_props(iclass)

    each iclass.funcs as name, func {
        parse_func_args(func)
    }

    if class.build.class_sizes_known {
        iclass.determine_size() ! u.build.error("Cannot determine class size of: " + iclass.get_type())
    }

    return iclass
}

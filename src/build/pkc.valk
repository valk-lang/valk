
use valk:fs
use helper

struct Pkc {
    build: Build
    dir: ?String (null)
    config: ?helper:Config (null)
    namespaces: Map[Nsc] (map[Nsc]{})
    pkc_by_name: Map[Pkc] (map[Pkc]{})
    header_dirs: Array[String] (array[String]{})
    headers_by_fn: Map[Fc] (map[Fc]{})

    static fn new(b: Build) Pkc {

        return Pkc {
            build: b
        }
    }

    fn set_dir(dir: String) {
        let b = this.build
        if b.pkc_by_dir.has(dir) {
            b.error("Build error: There 2 packages with the same directory: " + dir)
        }
        if b.verbose > 2 : b.log("> Set package directory: " + dir)
        this.dir = dir
        b.pkc_by_dir.set(dir, this)

        // Load config
        let path = dir + "/valk.json"
        if b.verbose > 2 : b.log("> Load package config: " + path)

        let config = helper:Config.load(path) ! {
            this.build.error("Invalid json syntax: " + path)
        }
        if !isset(config) {
            this.build.error("Package config not found: " + path)
        }
        this.config = config
    }

    fn load_sub_pkc(name: String) Pkc {
        let sub = this.pkc_by_name.get(name) ? null
        if isset(sub) : return sub

        let b = this.build
        let dir = ""

        if name == "valk" {
            dir = fs:exe_dir() + "/lib"
        } else {
            let config = this.config
            if !isset(config) {
                this.build.error("Cannot load package '" + name + "', missing config file")
            }
            let d = config.get_package_dir(name)
            if !isset(d) {
                this.build.error("Cannot load package '" + name + "'")
            }
            dir = d
        }
        let p = this.build.pkc_by_dir.get(dir) ? <{
            // Create new package
            if b.verbose > 2 : b.log("> Creating package for directory: " + dir)
            let pkc = Pkc.new(b)
            pkc.set_dir(dir)
            return pkc
        }
        return p
    }

}


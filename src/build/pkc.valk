
use helper

class Pkc {
    build: Build
    name: String
    dir: ?String (null)
    config: ?helper:Config (null)
    namespaces: Map[Nsc] (map[Nsc]{})
    pkc_by_name: Map[Pkc] (map[Pkc]{})
    header_dirs: Array[String] (array[String]{})
    headers_by_fn: Map[Fc] (map[Fc]{})
    //
    use_libs: uint (libs_none)

    static fn new(b: Build, name: String) Pkc {

        return Pkc {
            build: b
            name: name
        }
    }

    fn set_dir(dir: String, config_must_exist: bool (false)) {
        let b = this.build
        if b.pkc_by_dir.has(dir) {
            b.error("Build error: There 2 packages with the same directory: " + dir)
        }
        if b.verbose > 2 : b.log("> Set package directory: " + dir)
        this.dir = dir
        b.pkc_by_dir.set(dir, this)

        // Load config
        let path = dir + "/valk.json"
        if b.verbose > 2 : b.log("> Load package config: " + path)

        let config = helper:Config.load(path) ! {
            b.error("Invalid json syntax: " + path)
        }
        if !isset(config) && config_must_exist {
            b.error("Package config not found: " + path)
        }
        this.config = config
    }

    fn load_sub_pkc(name: String) Pkc {
        let sub = this.pkc_by_name.get(name) !? null
        if isset(sub) : return sub

        let b = this.build
        let dir = ""

        let use_libs : uint = libs_none
        if name == "valk" {
            dir = helper:valk_lib_dir()
        } else {
            let config = this.config
            if !isset(config) {
                this.build.error("Cannot load package '" + name + "', missing config file")
            }
            let d = config.get_package_dir(name)
            if !isset(d) {
                this.build.error("Cannot load package '" + name + "'")
            }
            dir = d
        }
        let p = this.build.pkc_by_dir.get(dir) !? <{
            if b.verbose > 2 : b.log("> Creating package for directory: " + dir)
            let pkc = Pkc.new(b, name)
            pkc.set_dir(dir)
            return pkc
        }
        // Library usage
        if use_libs > libs_none && use_libs > p.use_libs {
            p.use_libs = use_libs
        }
        if this.use_libs > p.use_libs && name != "valk" {
            p.use_libs = this.use_libs
        }
        //
        return p
    }

    fn find_nsc(name: String) ?Nsc {
        let nscs = this.namespaces
        let nsc = nscs.get(name) !? null
        if isset(nsc) : return nsc
        let config = this.config
        if !isset(config) : return null
        let dir = config.get_nsc_dir(name)
        if !isset(dir) : return null
        let b = this.build
        // dir = {pkc.dir}/{nsc.dir}
        dir = (this.dir ?? ".") + "/" + dir
        if b.nsc_by_dir.has(dir) : b.error("There are 2 namespaces pointing to the same directory. Namespace: '" + this.name + ":" + name + "' | Directory: " + dir)
        if b.verbose > 2 : b.log("> Init namespace: " + name + " => " + dir)
        // init
        let u = Unit.new(this.build, name, helper:ctxhash(dir))
        let n = Nsc.new(this, name, dir, u)
        b.nsc_by_dir.set(dir, n)
        nscs.set(name, n)
        n.load_files(u)
        return n
    }

    fn nsc(name: String, p: ?Parser (null)) Nsc {
        let nsc = this.find_nsc(name)
        if !isset(nsc) {
            if isset(p) : p.error("Cannot find namespace '" + name + "' in package '" + this.name + "'")
            this.build.error("Cannot find namespace: " + name)
        }
        return nsc
    }
}



fn ast_gen_return(func: Func, scope: Scope, values: Array[Value]) {
    let b = func.build
    let rett_types = func.rett_types
    let rett_decls = func.rett_decls

    let value: ?Value = null
    let rdecl_i : uint = 0

    each values as i, retv {
        if i == 0 && retv.rett.fits_eax() {
            value = value
            continue
        }

        let rdecl = rett_decls.get(rdecl_i++) ! b.error("Missing generated return variable (bug)")
        let type_of = rdecl.type.array_of
        if !isset(type_of) : b.error("Missing generated return variable type (bug)")
        scope.ast.push(Token {
            type: tk_assign
            value1: vgen_ptrv(vgen_decl(rdecl), type_of, vgen_int(0, type_uint(b)))
            value2: retv
        })
    }

    let retv_cache : ?Value = null
    if isset(value) {
        retv_cache = vgen_cached(value)
        scope.ast.push(Token {
            type: tk_statement
            value1: retv_cache
        })
    }

    ast_return_value(func, scope, retv_cache)
}

fn ast_return_value(func: Func, scope: Scope, value: ?Value) {

    if func.is_test {
        test_defer(func, scope)
    }

    scope.ast.push(Token { type: tk_inline_scope, scope1: func.scope_defer })

    scope.ast.push(Token {
        type: tk_return
        value1: value
    })

    scope.did_return = true
}
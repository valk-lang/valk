
use valk:utils

fn coro_generate(p: Parser, scope: Scope, on: Value) Value {

    let b = p.build

    let args = on.values
    if !isset(args) : p.error("Missing function call arguments (coro-bug)")
    let call_on = on.value1
    if !isset(call_on) : p.error("Missing function call on value (coro-bug)")
    let fi = call_on.rett.func_info
    if !isset(fi) : p.error("Missing function info (coro-bug)")

    let arg_types = fi.args
    let rett_types = fi.rett_types

    while args.length > arg_types.length {
        args.remove_index(args.length - 1)
    }

    let first = rett_types.get(0) !? type_void(b)
    let has_rett = !first.is_void()

    let has_args = false
    let has_gc_args = false
    each arg_types as type {
        if type.is_gc() : has_gc_args = true
        else : has_args = true
    }

    let func = scope.get_func() ! p.error("Coroutine initalization outside a function")

    ///////////////////////
    // Identifiers
    ///////////////////////
    let idf_scope = Scope.new(sc_default, null)

    let coro_class = b.valk_class("coro", "Coro")
    let idf = Idf.for_class(coro_class)
    idf_scope.set_idf(p, "CORO_CLASS", idf)

    let stack_class = b.valk_class("gc", "Stack")
    idf = Idf.for_class(stack_class)
    idf_scope.set_idf(p, "STACK_CLASS", idf)

    let yield_func = b.valk_func("coro", "yield")
    idf = Idf.for_func(yield_func)
    idf_scope.set_idf(p, "YIELD_FUNC", idf)

    idf = Idf.for_type(call_on.rett)
    idf_scope.set_idf(p, "HANDLER_TYPE", idf)

    each arg_types as type, i {
        let idf = Idf.for_type(type)
        idf_scope.set_idf(p, "T" + i, idf)
    }
    each rett_types as type, i {
        let idf = Idf.for_type(type)
        idf_scope.set_idf(p, "RT" + i, idf)
    }

    idf = Idf.for_value(call_on)
    idf_scope.set_idf(p, "HANDLER", idf)

    ///////////////////////
    // Run function
    ///////////////////////

    // Func args
    let code = utils:ByteBuffer.new(256)
    code.append_str("coro: CORO_CLASS) {\n")
    code.append_str("let args = coro.args.@cast(ptr)\n")
    code.append_str("let stack = coro.stack\n")
    code.append_str("let stack_adr = stack.base\n")

    // Get args
    each arg_types as type, i {
        code.append_str("let arg")
        code.append_uint(i)
        code.append_str(" = @ptrv(")
        code.append_str(type.is_gc() ? "stack_adr" : "args")
        code.append_str(", T")
        code.append_uint(i)
        code.append_str(")\n")

        code.append_str(type.is_gc() ? "stack_adr" : "args")
        code.append_str(" += size_of(T")
        code.append_uint(i)
        code.append_str(")\n")
    }

    // Call handler
    if has_rett {
        code.append_str("let ")
        each rett_types as type, i {
            if i > 0 : code.append_str(", ")
            code.append_str("retv")
            code.append_uint(i)
        }
        code.append_str(" = ")
    }
    code.append_str("(coro.handler.@cast(HANDLER_TYPE))(")
    each arg_types as type, i {
        if i > 0 : code.append_str(", ")
        code.append_str("arg")
        code.append_uint(i)
    }
    code.append_str(")")
    if fi.can_error {
        code.append_str(" ! {\n")
        code.append_str("  coro.error_code = E.@cast(u32)\n")
        code.append_str("  coro.error_msg = EMSG\n")
        code.append_str("  stack.adr = stack.base\n")
        code.append_str("  coro.complete()\n")
        code.append_str("  return\n")
        code.append_str("}\n")
    }
    code.append_str("\n")

    // Save return values
    if has_rett {
        let offset : uint = 0
        let offset_gc : uint = 0
        each rett_types as type, i {
            if type.is_gc() {
                code.append_str("@ptrv(stack.base, ptr, ")
                code.append_uint(offset_gc)
                code.append_str(") = retv")
                code.append_uint(i)
                code.append_str("\n")
                offset_gc++
            } else {
                code.append_str("@ptrv(coro.args + ")
                code.append_uint(offset)
                code.append_str(", RT")
                code.append_uint(i)
                code.append_str(") = retv")
                code.append_uint(i)
                code.append_str("\n")
                offset += type.size()
            }
        }
        code.append_str("stack.adr = stack.base + ")
        code.append_uint(offset_gc * b.ptr_size)
        code.append_str("\n")
    } else {
        code.append_str("stack.adr = stack.base\n")
    }
    code.append_str("coro.complete()\n")
    code.append_str("}\n")

    let content = code.to_string()
    let chunk = Chunk.new(b, content, null)
    let sp = Parser.new(chunk, p)

    let fc = p.get_fc() ! p.error("Cannot find file for access (bug)")
    let init_func = b.generated_unit().new_func(fc, act_default, func.name + "__coro_" + func.coro_count++, null, chunk)
    init_func.scope.parent = idf_scope
    idf_scope.func = init_func

    sp.func = init_func

    idf = Idf.for_func(init_func)
    idf_scope.set_idf(p, "START_FUNC", idf)

    // Parse
    init_func.parse_args(sp)
    parse_func_args(init_func)

    ///////////////////////
    // Run coro
    ///////////////////////

    code.clear()

    code.append_str("<{\n")
    code.append_str("let coro = CORO_CLASS.new(HANDLER, START_FUNC)\n")
    if has_args {
        code.append_str("let args = coro.args.@cast(ptr)\n")
    }
    if has_gc_args {
        code.append_str("let gc_args = coro.stack.base\n")
    }
    each args as val, i {
        let is_gc = val.rett.is_gc()

        let idf = Idf.for_type(val.rett)
        idf_scope.set_idf(p, "ARG_T_" + i, idf)
        idf = Idf.for_value(val)
        idf_scope.set_idf(p, "ARG_V_" + i, idf)

        code.append_str("@ptrv(")
        code.append_str(is_gc ? "gc_args" : "args")
        code.append_str(", ARG_T_")
        code.append_uint(i)
        code.append_str(") = ARG_V_")
        code.append_uint(i)
        code.append_str("\n")

        code.append_str(is_gc ? "gc_args" : "args")
        code.append_str(" += size_of(ARG_T_")
        code.append_uint(i)
        code.append_str(")\n")
    }

    if has_gc_args {
        code.append_str("coro.stack.adr = gc_args\n")
    }
    code.append_str("YIELD_FUNC()\n")
    code.append_str("return coro\n")

    code.append_str("}\n")

    content = code.to_string()
    chunk = Chunk.new(b, content, null)
    sp = p.new_sub_parser(chunk)
    idf_scope.parent = scope
    idf_scope.func = scope.func

    let res = read_value(sp, idf_scope, 0)
    res.rett = type_promise(b, fi)
    let rvs = res.values
    if isset(rvs) {
        let v1 = rvs.get(0) ! p.error("Missing first value from value scope for coroutine (bug)")
        v1.rett = res.rett
    }

    return res
}


fn coro_await(p: Parser, scope: Scope, on: Value) Value {

    let b = p.build
    let fi = on.rett.func_info
    if !isset(fi) || on.rett.type != ty_promise : p.error("Cannot use await on this type: " + on.rett)

    let sub = scope.sub_scope(sc_default)
    let retts = fi.rett_types
    let has_return_value = retts.length > 0

    let coro_class = b.valk_class("coro", "Coro")
    let idf = Idf.for_class(coro_class)
    sub.set_idf(p, "CORO_CLASS", idf)
    idf = Idf.for_value(on)
    sub.set_idf(p, "AWAIT_ON_VALUE", idf)

    let await_coro_func = b.valk_func("coro", "await_coro")
    idf = Idf.for_func(await_coro_func)
    sub.set_idf(p, "AWAIT_CORO_FUNC", idf)

    let g_err_code = b.valk_global("core", "error_code")
    idf = Idf.for_global(g_err_code)
    sub.set_idf(p, "G_ERR_CODE", idf)
    let g_err_msg = b.valk_global("core", "error_msg")
    idf = Idf.for_global(g_err_msg)
    sub.set_idf(p, "G_ERR_MSG", idf)

    each retts as rett, i {
        idf = Idf.for_type(rett)
        sub.set_idf(p, "RETT" + i, idf)
    }

    let code = utils:ByteBuffer.new(256)
    code.append_str("<{\n")
    code.append_str("let coro = AWAIT_ON_VALUE.@cast(CORO_CLASS)\n")
    code.append_str("while(!coro.done) { AWAIT_CORO_FUNC(coro) }\n")

    code.append_str("if coro.error_code != 0 {\n")
    code.append_str("  G_ERR_CODE = coro.error_code\n")
    code.append_str("  G_ERR_MSG = coro.error_msg\n")

    if has_return_value {
        // Return statement
        code.append_str("return ")
        each retts as rett, i {
            if i > 0 : code.append_str(", ")
            code.append_str(rett.is_pointer ? "null" : "0")
            code.append_str(".@cast(RETT")
            code.append_uint(i)
            code.append_str(")")
        }
        code.append_str("\n")
    } else {
        code.append_str("  return 0\n")
    }

    code.append_str("}\n")
            // if coro.error_code != 0 {
            //     core:error_code = coro.error_code
            //     core:error_msg = coro.error_msg
            // }

    if has_return_value {
        // Return values
        let args_offset : uint = 0;
        let gc_offset : uint = 0;
        each retts as rett, i {

            code.append_str("let retv")
            code.append_uint(i)
            code.append_str(" = ")
            if rett.is_gc() {
                code.append_str("@ptrv(coro.stack.base, RETT")
                code.append_uint(i)
                code.append_str(", ")
                code.append_uint(gc_offset)
                code.append_str(")\n")
                gc_offset++
            } else {
                code.append_str("@ptrv(coro.args + ")
                code.append_uint(args_offset)
                code.append_str(", RETT")
                code.append_uint(i)
                code.append_str(")\n")
                args_offset += rett.size()
            }
        }

        // Return statement
        code.append_str("return ")
        each retts as rett, i {
            if i > 0 : code.append_str(", ")
            code.append_str("retv")
            code.append_uint(i)
        }
        code.append_str("\n")
    } else {
        code.append_str("return 0\n")
    }

    code.append_str("}\n")


    let content = code.to_string()
    let chunk = Chunk.new(b, content, null)
    let sp = p.new_sub_parser(chunk)

    let res = read_value(sp, sub, 0)

    // Error handling
    if fi.can_error || p.has_error_handler_ahead() {
        res = value_error_handling(p, scope, res, fi)
    } else {
        let msg = "# Missing await error handler ("
        msg += p.chunk.path()
        msg += " | line: "
        msg += p.line
        msg += ")"

        res = value_panic_handler(p, scope, res, msg)
    }


    return res;
}

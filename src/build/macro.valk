
class Macro {
    name: String
    display_name: String
    pattern: Pattern (Pattern {
        type: pat_parts
        parts: Array[Pattern].new()
    })
    scope: Scope
    chunk: ?Chunk (null)
    is_value: bool (false)
    is_class_macro: bool (false)
}

class Pattern {
    type: int // parts, optional, repeat, token, value, type, suggest
    token: String ("")
    name: String ("")
    suggest: ?Type (null)
    parts: ?Array[Pattern] (null)
    allow_space: bool (false)
    allow_newline: bool (false)
}

// Parse macro definition
fn parse_macro_base(p: Parser, m: Macro) {

    let used_var_names = Array[String].new()
    parse_macro_pattern(p, m.scope, m.pattern, used_var_names, m.is_class_macro)

    if p.next_word_is("<{", true, true, false) {
        m.chunk = p.clone_chunk()
        m.is_value = true
        p.expect("<{", true, true)
        p.skip_body("}")
    } else {
        p.expect2("<{", "{", true, true)
        m.chunk = p.clone_chunk()
        p.skip_body("}")
    }
}

// Parse macro definition part
fn parse_macro_pattern(p: Parser, scope: Scope, pat: Pattern, vars: Array[String], must_start_with_token: bool (false)) {

    let parts = pat.parts
    if !isset(parts) : return

    let allow_space = false
    let allow_newline = false

    while true {
        if must_start_with_token && parts.length == 1 {
            let p1 = parts.get(0) ! p.bug("Missing first macro item")
            if p1.type != pat_token : p.error("The first macro item must be a token")
        }

        let t = p.tok(true, true, false)
        if t == tok_string {
            p.tok(true, true)
            let token = p.word()
            parts.push(Pattern {
                type: pat_token
                token: token.part(1, token.bytes - 2).unescape()
                allow_space: allow_space
                allow_newline: allow_newline
            })
            allow_space = false
            allow_newline = false
            continue
        }
        if p.word_is("s") || p.word_is("ws") {
            allow_space = true
            if p.word_is("ws") : allow_newline = true
            p.tok(true, true)
            continue;
        }

        if pat.type == pat_optional && parts.length == 0 {
            p.error("The first part of an 'optional' macro item must be valid token between double-quotes")
        }

        if p.word_is("V") || p.word_is("T") {
            p.tok(true, true)
            let is_value = p.word_is("V")
            p.expect(":", false, false)
            let name = p.read_word(false, false)
            if vars.contains(name) : p.error("Duplicate macro variable name: " + name)
            vars.push(name)
            parts.push(Pattern {
                type: is_value ? pat_value : pat_type
                name: name
                allow_space: allow_space
                allow_newline: allow_newline
            })
            allow_space = false
            allow_newline = false
            continue
        }
        if p.word_is("optional") {
            p.tok(true, true)
            p.expect("(", false, false)
            let sub = Pattern {
                type: pat_optional
                parts: Array[Pattern].new()
                allow_space: allow_space
                allow_newline: allow_newline
            }
            allow_space = false
            allow_newline = false
            parts.push(sub)
            parse_macro_pattern(p, scope, sub, vars)
            p.expect(")", true, true)
            continue;
        }
        if p.word_is("repeat") {
            p.tok(true, true)
            p.expect("(", false, false)
            let name = p.read_word(true, true)
            p.expect(",", true, true)
            let sub = Pattern {
                type: pat_repeat
                name: name
                parts: Array[Pattern].new()
                allow_space: allow_space
                allow_newline: allow_newline
            }
            allow_space = false
            allow_newline = false
            parts.push(sub)
            //
            let subvars = Array[String].new()
            parse_macro_pattern(p, scope, sub, subvars)
            p.expect(",", true, true)
            t = p.tok(true, true)
            let word = p.word()
            if t != tok_string : p.error("The last argument for repeat() must a be token between double-quotes. This token represent the end of the repeated pattern. Invalid token: '" + word + "'")
            sub.token = word.part(1, word.bytes - 2).unescape()
            p.expect(")", true, true)
            continue;
        }
        if p.word_is("suggest") {
            p.tok(true, true)
            p.expect("(", false, false)
            let type = read_type(p, scope)
            let sub = Pattern {
                type: pat_suggest
                suggest: type
                parts: Array[Pattern].new()
            }
            parts.push(sub)
            p.expect(")", true, true)
            continue;
        }

        break
    }
}


// Actual use of a macro
fn read_macro_value(pp: Parser, scope: Scope, m: Macro) Value {

    let chunk = m.chunk
    if !isset(chunk) : pp.error("Missing macro content position (bug)")

    let sub = scope.sub_scope(sc_default)
    sub.parent_idf = m.scope
    read_macro_pattern(pp, scope, m.pattern, sub.identifiers)

    let p = pp.new_sub_parser(chunk)
    if m.is_value {
        return read_macro_value_vscope(p, sub)
    }
    return read_macro_value_inline_scope(p, sub)
}

fn read_macro_pattern(p: Parser, scope: Scope, pat: Pattern, identifiers: Map[Idf]) {

    if pat.type == pat_token {
        // if !p.next_matches_text(pat.token) : p.error("Expected token: '" + pat.token + "'")
        p.expect(pat.token, pat.allow_space, pat.allow_newline)
        return
    }

    if pat.type == pat_value {
        let v = read_value(p, scope)
        identifiers.set(pat.name, Idf.for_value(v))
        return
    }

    if pat.type == pat_type {
        let type = read_type(p, scope)
        identifiers.set(pat.name, Idf.for_type(type))
        return
    }

    if pat.type == pat_parts {
        let parts = pat.parts
        if !isset(parts) : p.error("Missing macro pattern parts (bug)")
        each parts as subpat {
            read_macro_pattern(p, scope, subpat, identifiers)
        }
        return
    }

    if pat.type == pat_optional {
        let parts = pat.parts
        if !isset(parts) : p.error("Missing macro pattern parts for 'optional' (bug)")
        let first = parts.get(0) ! p.error("First macro pattern for 'optional' not found (bug)")
        if p.next_word_is(first.token, false, false, false) {
            each parts as subpat {
                read_macro_pattern(p, scope, subpat, identifiers)
            }
        }
        return
    }

    if pat.type == pat_repeat {
        let parts = pat.parts
        if !isset(parts) : p.error("Missing macro pattern parts for 'repeat' (bug)")
        let end_token = pat.token
        let macro_values = Array[Map[Idf]].new()
        identifiers.set(pat.name, Idf.for_macro_values(macro_values))
        while true {
            let t = p.tok(true, true, false)
            if t == tok_none : p.error("Unexpected end of code")
            if p.word_is(end_token) {
                p.tok(true, true)
                break
            }
            let idfs = Map[Idf].new()
            macro_values.push(idfs)
            each parts as subpat {
                read_macro_pattern(p, scope, subpat, idfs)
            }
        }
        return
    }

    if pat.type == pat_suggest {
        let s = pat.suggest
        if isset(s) : p.suggest_type = s
        return
    }

    p.error("Unhandled macro pattern type (bug)")
}

fn read_macro_value_vscope(p: Parser, scope: Scope) Value {
    return read_value(p, scope, 0)
}

fn read_macro_value_inline_scope(p: Parser, scope: Scope) Value {
    let sub = scope.sub_scope(sc_default)
    read_ast(p, sub, false)
    return vgen_inline_scope(sub, type_void(p.build))
}

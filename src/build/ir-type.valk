
fn ir_type(type: Type) String {
    if type.is_pointer : return "ptr"
    let tt = type.type
    if tt == ty_void : return "void"
    if tt == ty_int {
        let size = type.size()
        return ir_type_int(size)
    }
    if tt == ty_bool : return "i1"
    if tt == ty_array {
        let subtype = type.array_of
        if !isset(subtype) : type.build.error("Missing array-type in IR conversion (bug)")
        return "[" + type.array_size + " x " + ir_type(subtype) + "]"
    }
    type.build.error("Cannot convert type to IR-type: " + type)
}

fn ir_class_name(class: Class) String {
    return "%struct." + class.export_name
}

fn ir_type_int(size: uint) String {
    if size == 1 : return "i8"
    if size == 2 : return "i16"
    if size == 4 : return "i32"
    if size == 8 : return "i64"
    return "-unknown-int-size-" + size
}
fn ir_type_float(size: uint) String {
    if size == 4 : return "f32"
    if size == 8 : return "f64"
    return "-unknown-float-size-" + size
}
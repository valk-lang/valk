
use valk:mem

fn ctxhash(content: String) String {

    let data = content.data_ptr()
    let len: u8 = 32
    let buf = mem:calloc(len @as uint)

    let dpos: uint = 0
    let rpos: u8 = 0
    let diff: u8 = 0

    let end = false

    while true {
        let ch = @ptrv(data, u8, dpos++)
        if ch == 0 {
            end = true
            dpos = 0
            continue
        }

        diff += (ch + dpos @as u8) * 21 + rpos
        @ptrv(buf, u8, rpos++) = ch + diff

        if rpos == len {
            if end : break
            rpos = 0
        }
    }

    let mix = "TMpUivZnQsHw1klS3Ah5d6qr7tjKxJOIEmYP8VgGzcDR0f2uBe4aobWLNCFy9X".data_ptr()

    let i = len
    while i-- > 0 {
        let ch = @ptrv(buf, u8, i)
        diff += (ch + i) * 11 + i
        @ptrv(buf, u8, i) = @ptrv(mix, u8, (ch + diff) % 62)
    }

    let str = String.make_from_ptr(buf, len)
    mem:free(buf)
    return str
}

fn ctxhash_u32(content: String) u32 {
    let len: u8 = 32
    let hash = ctxhash(content)
    let result: u32 = 0
    let ref = @ref(result)
    let data = hash.data_ptr()
    while len-- > 0 {
        @ptrv(ref, u8, len % 4) += @ptrv(data, u8, len)
    }
    return result;
}

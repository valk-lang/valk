
use valk:fs

fn valk_lib_dir() String {
    return resolve(add(fs:exe_dir(), "lib"))
}

#if OS == win
+ value PATH_DIV ("\\")
+ value PATH_DIV_TWICE ("\\\\")
+ value PATH_DIV_REPLACE ("/")
+ value PATH_DOT_DIV (".\\")
#else
+ value PATH_DIV ("/")
+ value PATH_DIV_TWICE ("//")
+ value PATH_DIV_REPLACE ("\\")
+ value PATH_DOT_DIV ("./")
#end

fn resolve(path: String) String {
    // Use correct slashes
    path = path.replace(PATH_DIV_REPLACE, PATH_DIV)
    // Remove double slashes (except at start)
    if path.contains(PATH_DIV_TWICE) {
        let starts_with_div2 = path.starts_with(PATH_DIV_TWICE)
        while path.contains(PATH_DIV_TWICE) : path = path.replace(PATH_DIV_TWICE, PATH_DIV)
        if starts_with_div2 : path = PATH_DIV + path
    }
    // Replace dots
    if path == "." : path = fs:cwd()
    else if path.starts_with(PATH_DOT_DIV) : path = add(fs:cwd(), path.part(1, path.length - 1))
    else if (path.get(0) != '/' && path.get(1) != ':') && !path.starts_with("\\\\wsl.") : path = add(fs:cwd(), path)
    if path.contains("..") : path = fs:realpath(path)
    // Consistency
    if path.ends_with(PATH_DIV) : path = path.rtrim(PATH_DIV)
    if path.is_empty() : path = PATH_DIV
    return path
}

fn add(dir: String, fn: String) String {
    let s1 = dir.ends_with(PATH_DIV) || dir.ends_with(PATH_DIV_REPLACE)
    let s2 = fn.starts_with(PATH_DIV) || fn.starts_with(PATH_DIV_REPLACE)
    if !s1 && !s2 : return dir + PATH_DIV + fn
    if s1 && s2 : return (dir + fn.ltrim(PATH_DIV).ltrim(PATH_DIV_REPLACE))
    return dir + fn
}

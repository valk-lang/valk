
use valk:json
use valk:fs
use helper

class Config{
    json: json:Value
    path: String

    static fn load(path: String) ?Config !invalid {
        let content = fs:read(path) ! {
            return null
        }
        let j = json:decode(content) ! throw invalid
        return Config {
            json: j
            path: path
        }
    }

    fn get_package_dir(name: String) String !notfound !nosrc !noversion {
        let deps = this.json.get("dependencies").object()
        let dep = deps.get(name) ! throw notfound
        let src = dep.get("src").string().replace("/", ".")
        if src.empty() : throw nosrc
        let ver = dep.get("version").string()
        if dep.has("lock") {
            ver = dep.get("lock").string()
        }
        if !SELF.is_valid_version(ver) : throw noversion

        return helper:add(helper:add(helper:add(fs:cwd(), "vendor"), src), ver)
    }

    fn get_nsc_dir(name: String) ?String {
        let j = this.json
        let dir = j.get("namespaces").get(name).string()
        if dir.bytes == 0 : return null
        return dir
    }

    static fn is_valid_version(v: String) bool {
        let parts = v.split(".")
        if parts.length != 3 : return false
        (parts.get(0) !? "0").to_uint() ! return false
        (parts.get(1) !? "0").to_uint() ! return false
        (parts.get(2) !? "0").to_uint() ! return false
        return true
    }
}


class CLIArgs {
    inputs: Array[String]
    flags: Array[String]
    values: Map[Array[String]]
    invalid: Array[String]

    fn get_first_values_for(key: String, fail: bool (true)) String !key_not_found {
        let vals = this.values.get(key) !? Array[String].new()
        if vals.length > 1 && fail : panic("The '" + key + "' argument was passed multiple times")
        return vals.get(0) ! throw key_not_found
    }
    fn get_all(key: String) Array[String] {
        return this.values.get(key) !? Array[String].new()
    }
}

fn parse_cli_args(args: Array[String], valid_flags: Array[String], flags_with_value: Array[String]) CLIArgs {
    let inputs = Array[String].new()
    let flags = Array[String].new()
    let values = Map[Array[String]].new()
    let invalid = Array[String].new()

    let key: ?String = null
    each args as arg {
        if isset(key) {
            let vals = values.get(key) !? Array[String].new()
            vals.push(arg)
            values.set(key, vals)
            key = null
            continue
        }
        if arg.starts_with("-") {
            if !valid_flags.contains(arg) {
                invalid.push(arg)
                continue
            }

            if flags_with_value.contains(arg) {
                key = arg
            } else {
                flags.push(arg)
            }
            continue
        }
        inputs.push(arg)
    }

    return CLIArgs {
        inputs: inputs
        flags: flags
        values: values
        invalid: invalid
    }
}

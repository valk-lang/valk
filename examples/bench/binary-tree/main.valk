
class Node {
    left: ?Node (null)
    right: ?Node (null)

    static fn tree(x: int) Node {
        if x == 0 : return Node {}
        return Node {
            left: Node.tree(x - 1)
            right: Node.tree(x - 1)
        }
    }

    fn check() uint {
        let res : uint = 1
        let lt = this.left
        let rt = this.right
        if isset(lt) && isset(rt) : res += lt.check() + rt.check()
        return res
    }
}

fn stretch(depth: int) {
    let check = Node.tree(depth).check()
    println("stretch tree of depth %depth\t check: %check")
}

fn main(args: Array[String]) {

    let min_depth = 4
    let max_depth = 5
    args.get(1) -> str : max_depth = str.to_int() ! panic("Invalid number: %str")

	if min_depth + 2 > max_depth : max_depth = min_depth + 2

    stretch(max_depth + 1)

    let longlived = Node.tree(max_depth)

    let x = min_depth
    while x <= max_depth {
        let iters = 1 << (max_depth - x + min_depth)
        let check : uint = 0
        let i = 0
        while i++ < iters {
            check += Node.tree(x).check()
        }
        println("%iters\t trees of depth %x\t check: %check")
        x += 2
    }

    println("long lived tree of depth %max_depth\t check: %{ longlived.check() }")
}


use valk:time
use valk:gc

class Node {
    left: ?Node (null)
    right: ?Node (null)

    static fn tree(x: int) Node $hot {
        if x == 0 {
            let res = Node {}
            return res
        }
        return Node {
            left: Node.tree(x - 1)
            right: Node.tree(x - 1)
        }
    }

    fn check() uint $hot {
        let res : uint = 1
        let lt = this.left
        let rt = this.right
        if isset(lt) && isset(rt) {
            res += lt.check() + rt.check()
        }
        return res
    }
}

fn stretch(depth: int) {
    let check = Node.tree(depth).check()
    println("stretch tree of depth " + depth + "\t check: " + check)
}

fn main(args: Array[String]) {

    let depth = 17
    args.get(1) -> str : depth = str.to_int() ! panic("Invalid number: " + str)

    let start = time:microtime()

    stretch(depth + 1)

    let longlived = Node.tree(depth)

    let x = 4
    while x <= depth {
        let mul = (depth - x + 4)
        let iters = 1
        while mul-- > 0 {
            iters = iters * 2
        }
        let check = 0.to(uint)

        let i = 0
        while i++ < iters {
            let t = Node.tree(x)
            check += t.check()
        }
        println(iters + "\t trees of depth " + x + "\t check: " + check)
        x += 2
    }

    let ll = longlived.check()
    println("long lived tree of depth " + depth + "\t check: " + ll)

    println("# Time required: " + ((time:microtime() - start) / 1000) + " ms")
    println("# GC peak memory usage: " + (gc:mem_usage_peak / 1024) + " KB")
}
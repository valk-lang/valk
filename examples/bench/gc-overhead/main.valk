
use valk:time
use valk:gc

class Node {
    next: ?Node

    fn verify() uint {
        let n : ?Node = this
        let c : uint = 0
        while isset(n) {
            n = n.next
            c++
        }
        return c
    }
}

fn createObjects(amount: uint) Node {
    let i : uint = 0
    let prev = Node {}
    let first = prev
    while i++ < amount {
        let n = Node {}
        prev.next = n
        prev = n
    }
    return first
}

fn main() {

    println("# Create objects")

    let repeat : uint = 10000
    let object_count : uint = 500 * 1000
    let list = createObjects(object_count)

    println("# Start")

    let start = time:microtime()
    let count : uint = 0
    while count < repeat {
        gc:collect()
        count++
    }

    let elapsed = (time:microtime() - start) / 1000 + 1
    println("# Done")

    println("> Finished " + count + " collections in " + elapsed + "ms.")
    println("> Collects per second: " + (repeat * 1000 / elapsed))
    println("> Verify: " + ((list.verify() == object_count + 1) ? "OK" : "FAIL"))
}


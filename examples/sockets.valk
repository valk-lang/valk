
use valk:net
use valk:utils

// Server
fn server() {
    let sock = net:SocketTCP.new("127.0.0.1", 8000) ! panic("Failed to open socket: " + EMSG)
    sock.bind() ! panic("Failed binding to port: " + EMSG)
    let buffer = utils:ByteBuffer.new()
    while true {
        let con = sock.accept() ! {
            println("# Failed to accept connection")
            continue;
        }
        // Handle connection (normally you do this on a separate coroutine)
        while true {
            buffer.clear()
            let bytes = con.recv(buffer, 1000) ! {
                if E == E.closed : break // Connection closed
                println("# Server failed to read from connection")
                break
            }
            println("# Server received: " + buffer)
            con.send("PONG") ! {
                println("# Server failed to send data")
                break
            }
        }
    }
}

// Client
fn main() {
    // Start our server in the background
    let s = co server()
    // Open client
    let sock = net:SocketTCP.new("127.0.0.1", 8000) ! panic("Failed to open socket: " + EMSG)
    let con = sock.connect() ! panic("Failed to connect")
    // Send
    con.send("PING") ! panic("Client failed to send data")
    // Recv
    let buffer = utils:ByteBuffer.new()
    con.recv(buffer, 1000) ! panic("Client failed to read from connection")
    println("# Client received: " + buffer)
    con.close()
}


use valk:gc
use valk:time

@ignore_access

global ga: Array[?Node] (array[?Node]{})
global gm: HashMap[?Node, ?Node] (hashmap[?Node, ?Node]{})
global gn: ?Node (null)
shared sn: imut ?Node (null)

// global all: Array[Node] (array[Node]{})
global nodec: uint (0)
global loops: uint (0)

class Node {
    a: ?Node (null)
    b: ?Node (null)

    static fn spawn() {
        nodec++
        let n = Node{}
        let rand : uint = (loops + loops + n.@cast(uint)) % 9
        if rand == 0 {
        } else if rand == 1 {
            ga.append(n)
        } else if rand == 2 {
            gm.set(gn, n)
        } else if rand == 3 {
            gn = n
        } else if rand == 4 {
            sn = n.@cast(imut Node)
        } else if rand == 5 {
            let prev = gn
            if isset(prev) : prev.a = n
        } else if rand == 6 {
            let prev = gn
            if isset(prev) : prev.b = n
        } else if rand == 7 {
            let prev = sn.@cast(?Node)
            if isset(prev) : prev.a = n
        } else if rand == 8 {
            let prev = sn.@cast(?Node)
            if isset(prev) : prev.b = n
        }
    }

    fn gc_free() {
        if nodec > 100000 : panic("LEAK (1)")
        nodec--
    }
}

fn main() {
    while true {
        if nodec > 100000 : panic("LEAK (2)")
        if loops++ % 177777 == 0 : println(nodec)

        Node.spawn()

        if nodec > 10000 {
            ga.remove(loops % ga.length)
            gm.clear()
        } else if nodec > 1000 {
            let i = nodec / 10
            let n = ga.get((loops / 2) + 1 % ga.length) ! continue
            ga.set(loops % ga.length, n) _
        }
    }
}